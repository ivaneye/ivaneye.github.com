<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>从0到1</title>
    <description>懒是一种态度</description>
    <link>http://ivaneye.com/</link>
    <atom:link href="http://ivaneye.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 31 Jul 2016 16:36:18 +0800</pubDate>
    <lastBuildDate>Sun, 31 Jul 2016 16:36:18 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>高性能Server---Reactor模型</title>
        <description>&lt;h2&gt;无处不在的C/S架构&lt;/h2&gt; &lt;p&gt;在这个充斥着云的时代,我们使用的软件可以说99%都是C/S架构的！&lt;/p&gt; &lt;ul&gt; &lt;li&gt;你发邮件用的Outlook,Foxmail等&lt;/li&gt; &lt;li&gt;你看视频用的优酷，土豆等&lt;/li&gt; &lt;li&gt;你写文档用的Office365,googleDoc，Evernote等&lt;/li&gt; &lt;li&gt;你浏览网页用的IE,Chrome等(B/S是特殊的C/S)&lt;/li&gt; &lt;li&gt;......&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;C/S架构的软件带来的一个明显的好处就是：只要有网络，你可以在任何地方干同一件事。&lt;/p&gt; &lt;p&gt;例如：你在家里使用Office365编写了文档。到了公司，只要打开编辑地址就可以看到在家里编写的文档，进行展示或者继续编辑。甚至在手机上进行阅读与编辑。不再需要U盘拷来拷去了。&lt;/p&gt; &lt;p&gt;C/S架构可以抽象为如下模型：&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/iomodel/client-server.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;C就是Client(客户端),上面的B是Browser(浏览器)&lt;/li&gt; &lt;li&gt;S就是Server(服务器)：&lt;strong&gt;服务器管理某种资源，并且通过操作这种资源来为它的客户端提供某种服务&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;C/S架构之所以能够流行的一个主要原因就是网速的提高以及费用的降低，特别是无线网络速度的提高。试想在2G时代，大家最多就是看看文字网页，小说什么的。看图片，那简直就是奢侈！更别说看视频了！&lt;/p&gt; &lt;p&gt;网速的提高，使得越来越多的人使用网络，例如：优酷，微信都是上亿用户量，更别说天猫双11的瞬间访问量了！这就对服务器有很高的要求！能够快速处理海量的用户请求！那服务器如何能快速的处理用户的请求呢？&lt;/p&gt; &lt;!-- more --&gt; &lt;h2&gt;高性能服务器&lt;/h2&gt; &lt;p&gt;高性能服务器至少要满足如下几个需求：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;效率高：既然是高性能，那处理客户端请求的效率当然要很高了&lt;/li&gt; &lt;li&gt;高可用：不能随便就挂掉了&lt;/li&gt; &lt;li&gt;编程简单：基于此服务器进行业务开发需要足够简单&lt;/li&gt; &lt;li&gt;可扩展：可方便的扩展功能&lt;/li&gt; &lt;li&gt;可伸缩：可简单的通过部署的方式进行容量的伸缩，也就是服务需要无状态&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;而满足如上需求的一个基础就是高性能的IO!&lt;/p&gt; &lt;h2&gt;Socket&lt;/h2&gt; &lt;p&gt;无论你是发邮件，浏览网页，还是看视频～实际底层都是使用的TCP/IP，而TCP/IP的编程抽象就是Socket!&lt;/p&gt; &lt;p&gt;我一直对Socket的中文翻译很困惑，个人觉得是我所接触的技术名词翻译里最莫名其妙的，没有之一！&lt;/p&gt; &lt;p&gt;Socket中文翻译为&amp;quot;套接字&amp;quot;！什么鬼？在很长的时间里我都无法将其和网络编程关联上！后来专门找了一些资料，最后在知乎上找到了一个还算满意的答案(具体链接，请见文末的参考资料链接)！&lt;/p&gt; &lt;p&gt;Socket的原意是插口，想表达的意思是插口与插槽的关系！&amp;quot;send socket&amp;quot;插到&amp;quot;receive socket&amp;quot;里，建立了链接，然后就可以通信了！&lt;/p&gt; &lt;p&gt;套接字的翻译，应该是参考了套接管(如下图)！从这个层面上来看，是有那么点意思！&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/iomodel/%E5%A5%97%E6%8E%A5%E7%AE%A1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;p&gt;套接字这个翻译已经是标准了，不纠结这个了！&lt;/p&gt; &lt;p&gt;我们看一下Socket之间建立链接及通信的过程！实际上就是对TCP/IP连接与通信过程的抽象:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/iomodel/socket.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;服务端Socket会bind到指定的端口上，Listen客户端的&amp;quot;插入&amp;quot;&lt;/li&gt; &lt;li&gt;客户端Socket会Connect到服务端&lt;/li&gt; &lt;li&gt;当服务端Accept到客户端连接后&lt;/li&gt; &lt;li&gt;就可以进行发送与接收消息了&lt;/li&gt; &lt;li&gt;通信完成后即可Close&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;对于IO来说，我们听得比较多的是:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;BIO:阻塞IO&lt;/li&gt; &lt;li&gt;NIO:非阻塞IO&lt;/li&gt; &lt;li&gt;同步IO&lt;/li&gt; &lt;li&gt;异步IO&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;以及其组合:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;同步阻塞IO&lt;/li&gt; &lt;li&gt;同步非阻塞IO&lt;/li&gt; &lt;li&gt;异步阻塞IO&lt;/li&gt; &lt;li&gt;异步非阻塞IO&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;那么什么是阻塞IO、非阻塞IO、同步IO、异步IO呢？&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作&lt;/li&gt; &lt;li&gt;阻塞IO和非阻塞IO的区别在于第一步：发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO;如果不阻塞，那么就是非阻塞IO&lt;/li&gt; &lt;li&gt;同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO;如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;举个不太恰当的例子 ：比如你家网络断了，你打电话去中国电信报修！&lt;/p&gt; &lt;ul&gt; &lt;li&gt;你拨号---客户端连接服务器&lt;/li&gt; &lt;li&gt;电话通了---连接建立&lt;/li&gt; &lt;li&gt;你说：“我家网断了,帮我修下”---发送消息&lt;/li&gt; &lt;li&gt;说完你就在那里等，那么就是阻塞IO&lt;/li&gt; &lt;li&gt;如果正好你有事，你放下带电话，然后处理其他事情了，过一会你来问下，修好了没---那就是非阻塞IO&lt;/li&gt; &lt;li&gt;如果客服说：“马上帮你处理，你稍等”---同步IO&lt;/li&gt; &lt;li&gt;如果客服说：“马上帮你处理，好了通知你”，然后挂了电话---异步IO&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;本文只讨论BIO和NIO,AIO使用度没有前两者普及，暂不讨论！&lt;/p&gt; &lt;p&gt;下面从代码层面看看BIO与NIO的流程!&lt;/p&gt; &lt;h2&gt;BIO&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;客户端代码&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Bind,Connect&lt;/span&gt; &lt;span...</description>
        <pubDate>Sat, 23 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2016/07/23/iomodel.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2016/07/23/iomodel.html</guid>
        
        <category>java</category>
        
        <category>io</category>
        
        <category>reactor</category>
        
        
        <category>io</category>
        
      </item>
    
      <item>
        <title>我的读书方法</title>
        <description>&lt;h1&gt;&amp;quot;书籍收藏家&amp;quot;&lt;/h1&gt; &lt;p&gt;你是否有过这样的经历？&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/read/read/read_process.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;p&gt;亦或，终于读完了一本书！这本书讲的什么呢？呃。。。。&lt;/p&gt; &lt;p&gt;我在很长一段时间里都有这样的困惑！这种情况导致的结果是，我成了&amp;quot;书籍收藏家&amp;quot;---买的书里没读完的比读完的多得多！&lt;/p&gt; &lt;!-- more --&gt; &lt;h1&gt;一天一本书？！&lt;/h1&gt; &lt;p&gt;网上有不少网友说自己读书经历，有的一年200多本书，有的一天一本书。我很羡慕他们是怎么做到的？&lt;/p&gt; &lt;p&gt;起初我觉得是自己看书的速度太慢了，一个字一个字的看，看到后面忘到前面。和以前背单词很像，abandon最熟，后面都不记得～所以就专门看了一些速读方面的资料，比如什么“一目十行”之类的。试了试发现没鸟用。读书是为了收获知识(消遣类的除外，我对消遣类的书不感兴趣，自动排除～)，一目十行虽然提高了翻书速度，但是：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;需要更高的集中力，就更容易疲劳，持续时间变短。结果就是实际效果没多少改善&lt;/li&gt; &lt;li&gt;对收获知识没有多大的帮助，依然是读了后面忘了前面&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;读书的目的&lt;/h1&gt; &lt;p&gt;速读尝试失败后，我进行了思考，我读书的目的是什么？&lt;/p&gt; &lt;ul&gt; &lt;li&gt;学习专业领域知识(深度)&lt;/li&gt; &lt;li&gt;扩展眼界(广度)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;总体来说，我读书是为了收获知识，使其融合到自身的知识体系架构中，为我所用！&lt;/p&gt; &lt;p&gt;既然是为了收获知识，读书的速度就不是主要问题，主要问题是怎样把书里的知识快速的吸收到自己脑子里！&lt;/p&gt; &lt;p&gt;那如何&lt;strong&gt;快速的收获知识&lt;/strong&gt;呢？&lt;/p&gt; &lt;h1&gt;学习&lt;/h1&gt; &lt;p&gt;基于上面的问题，我搜集并阅读了关于如何阅读的书籍！下面列出对我有帮助的四本书:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;书都不会读，你还想成功&lt;/li&gt; &lt;li&gt;杠杆阅读术&lt;/li&gt; &lt;li&gt;如何阅读一本书&lt;/li&gt; &lt;li&gt;如何提问：批判性思维&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;为什么要一个字一个字的读？&lt;/h2&gt; &lt;p&gt;先说前两本，这两本书提到的方法比较类似：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;针对特定领域，读大量类似的书&lt;/li&gt; &lt;li&gt;如果书中提到了类似的观点或知识，则重点关注&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;缺点就是比较费钱~&lt;/p&gt; &lt;p&gt;这个方法我并没有采用！提到这两本书，是因为这两本书使我进行了反思：我为什么要一个字一个字的读书呢？&lt;/p&gt; &lt;p&gt;主要有两个原因：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;学校里学习时都是这么读过来的(怪不得后来对学习越来越没兴趣了～)&lt;/li&gt; &lt;li&gt;书是花钱买的，每个字都抠一遍，才能值回花销&lt;/li&gt; &lt;li&gt;程序员出生，典型的程序员思维，喜欢死抠细节&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;但是实际上越抠细节，收获越低！&lt;/p&gt; &lt;h2&gt;阅读是思考的过程&lt;/h2&gt; &lt;p&gt;收获比较大的是《如何阅读一本书》和《如何提问：批判性思维》。一本教如何阅读，一本教如何思考！&lt;/p&gt; &lt;p&gt;《如何阅读一本书》提到了四种读书方式：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;基础阅读&lt;/li&gt; &lt;li&gt;检视阅读&lt;/li&gt; &lt;li&gt;分析阅读&lt;/li&gt; &lt;li&gt;主题阅读&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;抠字眼的阅读方式实际上还停留在基础阅读层面，这个层面主要是为了学习基础知识---比如识字！&lt;/p&gt; &lt;p&gt;《如何提问：批判性思维》则说明了如何找出作者的观点，以及如何支撑这些观点！&lt;/p&gt; &lt;p&gt;从这两本书中，总结了适合自己的读书过程！&lt;/p&gt; &lt;h1&gt;读书工具&lt;/h1&gt; &lt;p&gt;先说下我读书的工具：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;纸质书&lt;/li&gt; &lt;li&gt;Kindle Paper White&lt;/li&gt; &lt;li&gt;手机/iPad&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;纸质书&lt;/h2&gt; &lt;p&gt;我最钟爱的还是纸质书，不过存在几个问题：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;不宜携带：相对手机和Kindle&lt;/li&gt; &lt;li&gt;无法方便的电子化：书中的知识点需要手动敲到电脑里进行整理&lt;/li&gt; &lt;li&gt;贵：相对其它设备来说，价格偏贵&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;相对的，优点是:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;快速定位&lt;/li&gt; &lt;li&gt;不影响阅读速度和方式：不论是速读，慢读还是跳读&lt;/li&gt; &lt;li&gt;墨香：个人喜好&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Kindle&lt;/h2&gt; &lt;p&gt;知道Kindle很久了，之前一直没出手，直到出了Kindle Paper White，立马出手。没有背光灯还不如纸质书！&lt;/p&gt; &lt;p&gt;Kindle的致命缺点是翻页太慢！很难进行速读和跳读！&lt;/p&gt; &lt;p&gt;优点就是:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;易于携带：相对纸质书和iPad&lt;/li&gt; &lt;li&gt;裸机手感很棒！&lt;/li&gt; &lt;li&gt;护眼：这是广告！我眼睛不好，当初买Kindle就是为了护眼！后来搜集资料发现：没有数据可以证明电子屏比水墨屏更伤眼睛！近视的原因是看近物时间过长，眼睛没有得到休息所致，和什么屏幕没有关系！即使纸质书也是！&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;缺点：&lt;/p&gt; &lt;ul&gt; &lt;li&gt;翻页慢&lt;/li&gt; &lt;li&gt;屏幕易碎：带套手感差，不带套怕屏碎！纠结～&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;手机/iPad&lt;/h2&gt;...</description>
        <pubDate>Sun, 05 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2016/06/05/read.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2016/06/05/read.html</guid>
        
        <category>book</category>
        
        <category>read</category>
        
        
        <category>book</category>
        
      </item>
    
      <item>
        <title>从用户体验角度看工具</title>
        <description>&lt;h1&gt;用户体验&lt;/h1&gt; &lt;p&gt;作为互联网从业人员，经常会接触到“用户体验”这个词！ 我们可能为了一个菜单该放在哪里而争论，或一边苦逼的编码一边骂着SB产品经理！ 我们为别人考虑着“用户体验”，但是对自己一直在用的软件，为什么却这么将就呢？&lt;/p&gt; &lt;h1&gt;软件=工具&lt;/h1&gt; &lt;p&gt;作为软件开发人员，使用的软件不在少数，我们都称为工具。即为工具，我们好像就不那么纠结难不难用了！好像工具就应该比较难用才对！而实际上，我们为别人做的软件，对别人来说也是工具。我们为什么要为用户考虑这么多，为什么不为自己考虑考虑？&lt;/p&gt; &lt;p&gt;现在，我们从用户体验的角度重新审视下我们常用的工具！&lt;/p&gt; &lt;h1&gt;简单&lt;/h1&gt; &lt;p&gt;在做软件的时候，我们知道要把用户当作“白痴”来看待！要尽可能的把功能做简单，能一步完成的绝对不能分成两步。所以软件要做得足够的简单。但是简单并不代表功能上的简单，比如说Windows下的记事本，那叫简陋！对于工具型软件来说，“简单”有三个层面上的意思：&lt;/p&gt; &lt;h2&gt;功能够用&lt;/h2&gt; &lt;p&gt;软件功能应该也适用28原则，即在使用软件的大部分(80%，甚至更多)情况下，只会使用很少(20%，甚至更少)的功能。所以软件没必要太多的功能。只要有足够的核心功能即可。过多的功能只会增加软件的复杂度和学习成本。&lt;/p&gt; &lt;p&gt;一个很典型的例子就是Office。Office功能很强大，但是大家大部分情况下会用到它多少功能？有5%吗？而且，你会发现，你需要的功能消失在了它的菜单列表里了！&lt;/p&gt; &lt;p&gt;现在再看Word的工具栏，是什么感觉？&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/think/tools/tools_03.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;!-- more --&gt; &lt;h2&gt;操作简单&lt;/h2&gt; &lt;p&gt;在功能的基础上，软件还需要操作简单。工具是为了提高效率的，太复杂的操作会间接的降低效率。比如：你本来就是为了编辑点文本，但是得花半年甚至更多时间去学习编辑工具。等你学完了，黄花菜都凉了。（无意黑谁，只是提醒注意任务的主次！）&lt;/p&gt; &lt;h2&gt;符合直觉&lt;/h2&gt; &lt;p&gt;符合直觉就是说，当你刚接触一个软件的时候，可以靠猜或者随便点点就能掌握基本的功能！&lt;/p&gt; &lt;p&gt;典型的反面例子就是Vim!当一个完全没接触过Vim的人，打开Vim，三秒钟就懵逼了!怎么输入？怎么保存？怎么退出？目前我使用Vi的原因是Vi是Linux默认安装的文本编辑器！&lt;/p&gt; &lt;p&gt;有人会说，Vim的编辑效率很高，各种奇技淫巧！这点我承认，但是对我来说，然并卵，这个下面再提！&lt;/p&gt; &lt;p&gt;符合“简单”的工具，先推荐两个，Markdown和Pandoc!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Markdown三分钟入门&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Markdown就是一个很简单的工具！&lt;/p&gt; &lt;p&gt;文件名以md结尾&lt;/p&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th&gt;语法&lt;/th&gt; &lt;th&gt;说明&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td&gt;# title&lt;/td&gt; &lt;td&gt;标题，一个#号代表一个级别&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;- text&lt;/td&gt; &lt;td&gt;列表&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1. text&lt;/td&gt; &lt;td&gt;还是列表&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;[text](url)&lt;/td&gt; &lt;td&gt;链接&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;![](img-url)&lt;/td&gt; &lt;td&gt;图片&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&amp;gt; text&lt;/td&gt; &lt;td&gt;引用&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;*斜体*&lt;/td&gt; &lt;td&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;**粗体**&lt;/td&gt; &lt;td&gt;&lt;strong&gt;粗体&lt;/strong&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;```&lt;/td&gt; &lt;td&gt;代码&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;演示请见下面的gif!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Pandoc三十秒入门&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Markdown负责内容，Pandoc则负责展示！Pandoc是个牛逼的格式转换工具！请至&lt;a href=&quot;http://pandoc.org/&quot;&gt;官网&lt;/a&gt;查看Pandoc支持的转换类型！(很多，这里不贴了～)&lt;/p&gt; &lt;p&gt;比如你想把Markdown转换成Word&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pandoc source.md -o target.docx &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;那如果你想把Markdown转换成epub,html，你猜你该输什么命令呢？&lt;/p&gt; &lt;h1&gt;跨平台/全平台&lt;/h1&gt; &lt;p&gt;做前端的同学深有体会，各种浏览器兼容性问题！但是为了用户能在各个浏览器上看到一样的效果，还是忍了！&lt;/p&gt; &lt;p&gt;我们用的工具也一样。一般我们会在Windows或者Mac上开发，而部署都是在Linux上！所以我们当然希望能有工具既能在Windows上运行，也能在Mac和Linux上运行。当然功能和使用感受要完全相同。&lt;/p&gt; &lt;p&gt;比如，Notepad++,ULtraEdit,EditPlus,Office是在Windows上接受度比较高的编辑类软件，TextMate是Mac上很知名的编辑器。但是一出这个系统，你就用不了了，就得花时间再去学另一个软件，也是一种浪费！&lt;/p&gt; &lt;h1&gt;颜值&lt;/h1&gt; &lt;p&gt;好看这个东西，见仁见智！自己觉得好看就行了！比起意淫用户喜欢什么样的配色、布局、字体！自己喜欢什么样的配色、布局、字体，应该很简单吧？比如，我就比较偏爱暗色系的主题！当初NetBeans就是因为颜值太差，被我抛弃了～&lt;/p&gt; &lt;p&gt;现在来看Vim和Emacs，颜值也是比较差的。不过两者的定制化比较高，可以按自己的需求来配置。不过由于历史遗留问题，有些功能靠配置是没法解决的。比如说，现在编辑器里都默认自带的目录树和页签。Vim和Emacs都是模拟出来的，看起来很不协调！&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/think/tools/tools_vim.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;...</description>
        <pubDate>Fri, 08 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2016/04/08/tools.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2016/04/08/tools.html</guid>
        
        <category>think</category>
        
        <category>随笔</category>
        
        
        <category>think</category>
        
      </item>
    
      <item>
        <title>我的管理实践---《人件》读后感</title>
        <description>&lt;h1&gt;写在前面&lt;/h1&gt;

&lt;p&gt;听说《人件》是很久之前的事了，但一直没读。主要是受到了《人月神话》的影响---《人月神话》一直被奉为经典管理书籍，名声应该比《人件》高，至少我是这么认为的。所以先读了《人月神话》，当时还很好奇，《人月神话》和项目管理有毛线关系？读了才知道，“人月”就是我们说的“人天”！读了大概三分之一，不知道是翻译问题还是作者行文方式不适合我，反正读不下去了，感觉说了那么多废话只是说明了“增加人力无法加快项目进度”！所以《人件》也就无限期搁置了！&lt;/p&gt;

&lt;p&gt;最近项目组购书，买了这本书，就拿来看看！看了才有一种相见恨晚的感觉。我做了两年多的管理，最近不想做了，又回到了技术。这本书并没有让我学到什么，但是它所提到的很多内容和我当时的管理方式很契合，或者说和我的想法很相近，同时也解释了我最后为什么不想做管理了！&lt;/p&gt;

&lt;h1&gt;人员管理&lt;/h1&gt;

&lt;p&gt;“流水的开发，铁打的项目”。相信对有几年经验的开发人员来说，这句话并没有说错。&lt;/p&gt;

&lt;p&gt;很庆幸的是，在我管理的两年多里，没有人离职，虽然团队不大，只有七个人。&lt;/p&gt;

&lt;p&gt;我把功劳归结为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;项目组成员的自觉性&lt;/li&gt;
&lt;li&gt;和我的好脾气&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而《人件》给了我更有说服力的说法：&lt;strong&gt;“管理者不是让大家去工作，而是创造环境，让大家可以顺利的开展工作”&lt;/strong&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;首先，我承认我自己也是多少有点“高科技幻觉”的！至少，每次别人问我做什么工作时，我回答：“互联网”，或者很屌丝的“软件开发”。基本都会得到“高端”的回应！也就导致我的一丝丝飘飘然，至少在当时是的。&lt;/p&gt;

&lt;p&gt;现在，我很认同《人件》里的说法：&lt;strong&gt;“从事基础研究并获得根本突破的科研人员做的才是高科技工作，其他人只是在使用研究成果”&lt;/strong&gt;.在各个技术大会上，你听着某某架构师、某某CTO，说着这个技术如何如何先进，这个架构如何如何好。其实绝大部分都是使用的前人的研究成果，而这些研究成果有不少实际上在很多年前就研究出来了。&lt;/p&gt;

&lt;p&gt;另一个现象就是，虽然软件行业在外人以及不少行内人看来是“高科技行业”。但是，在管理上，仍然使用的是传统行业的那一套:项目就像流水线一样，而开发人员则像流水线工人，开发人员是可替换的！从软件架构来看：开发人员就像一个个的模块，某个模块出问题了，换个相同的模块就行了！&lt;/p&gt;

&lt;p&gt;而实际上，虽然软件行业不是“高科技”行业，但是与传统行业还是有一个很明显的差异的：软件行业是“思维密集型”行业，而大部分传统行业是“劳动密集型”行业。&lt;/p&gt;

&lt;p&gt;说到这里，我脑子里出现的画面是卓别林的“摩登时代”---他在流水线上拧螺丝的情景。可以想象，替换一个拧螺丝的流水线工人的成本能有多大？而替换一个软件开发呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先需要找个人和他交接&lt;/li&gt;
&lt;li&gt;有新人进来了，还要再和新人交接&lt;/li&gt;
&lt;li&gt;新人还需要熟悉整个环境&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，在软件行业，人是“个体”，不是“模块”！&lt;/p&gt;

&lt;p&gt;可能得益于我的性格---“懒”！我这人不喜欢被人管，也确信，大部分成年人不喜欢被人管---大家都是成年人了，有自觉性！所以，我的管理完全建立在大家有自觉性的前提上！同时，给予了充分的自主性。所以我的管理很轻松：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;按个人能力及偏好划分计划&lt;/li&gt;
&lt;li&gt;每日反馈进度&lt;/li&gt;
&lt;li&gt;有问题，协助处理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很庆幸项目没有出现大误差：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;期间安全发布了两个大版本，n个小版本&lt;/li&gt;
&lt;li&gt;没有做过任何强制的加班规定，项目组人员自觉按计划执行！&lt;/li&gt;
&lt;li&gt;除了版本发布前夕，基本没有什么加班情况！&lt;/li&gt;
&lt;li&gt;项目组成员没有感到特别大的压力，能专心做自己的工作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我个人是不喜欢加班的，相信没人会喜欢加班！而且特别特别讨厌强制性加班---没事也得留在公司！所以我在管理时，没有做过任何强制性加班的决定。我认为强制性加班完全提高不了效率！《人件》中也有同样的观点！&lt;/p&gt;

&lt;p&gt;首先，效率是什么？&lt;strong&gt;单位时间内的工作产生更高的价值&lt;/strong&gt;。而强制性加班，实际上是在&lt;strong&gt;单位付酬的情况下掠取更多价值&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;其次，长期的强制性加班，会导致人员的流失，增加了替换人员的成本。实际上就抵消了，加班所带来的所谓的效率的提升！&lt;/p&gt;

&lt;p&gt;总的来说，在人员管理方面，我个人觉得做得还不错，有点“无为而治”的感觉！&lt;/p&gt;

&lt;h1&gt;环境&lt;/h1&gt;

&lt;p&gt;作为一个一线开发人员，应该有过这样的体会：思考一个问题，或者对某个问题进行编码!终于搞完了，抬头一看，“靠，三小时过去了”！或者正在兴头上，突然电话响了，或者下班了,直接就郁闷了～&lt;/p&gt;

&lt;p&gt;反正我是深有体会！《人件》中给了个词&amp;quot;Flow&amp;quot;，中文版翻译为“流”！这是一个渐入的过程，很像做梦！在《盗梦空间》里，小李子说了这么一句，原文不记得了，大意是：“你能回想起来你是什么时候开始做梦的吗”？这里，也同样可以问一句，“你能回想起来，你是什么时候进入Flow状态的吗”？&lt;/p&gt;

&lt;p&gt;我有这样的体会，所以在管理项目时，也在给项目组成员提供这样的环境！但是作为一个小项目经理，我没办法改变公司的格局，只能尽自己能力所及，做一些事情！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先，需求接口人是我。也就是说，我先对需求把关---做还是不做,什么时候做&lt;/li&gt;
&lt;li&gt;现网问题全部提到我这里，我进行整理分发---通过jira&lt;/li&gt;
&lt;li&gt;进度压力由我扛着，不传达到组员&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这使得组员在项目中能专注于自己的事情！另一方面，我自己就和“Flow”说拜拜了！这也是我最后不做管理的其中一个原因！&lt;/p&gt;

&lt;h1&gt;招人与留人&lt;/h1&gt;

&lt;p&gt;招人方面我体会不深，我本人主业是技术，项目管理只是副业～～～所以招聘时，我更关注的是技术：主要是基础以及发展潜力！&lt;/p&gt;

&lt;p&gt;而在留人方面，我并没有做什么特别的事情！我赞同：“用人不疑，疑人不用！”《人件》里提到“领导力”这个词，并说到提高“领导力”，需要做的几件事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主动承担任务&lt;/li&gt;
&lt;li&gt;明显胜任工作&lt;/li&gt;
&lt;li&gt;为任务准备提前做足必要的功课&lt;/li&gt;
&lt;li&gt;让每个人创造最大的价值&lt;/li&gt;
&lt;li&gt;实施过程中保持幽默和明显的善意&lt;/li&gt;
&lt;li&gt;有感染力&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对应到我自身来说，我做到的是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主动承担任务[Yes]&lt;/li&gt;
&lt;li&gt;明显胜任工作[Yes]&lt;/li&gt;
&lt;li&gt;为任务准备提前做足必要的功课[Yes]&lt;/li&gt;
&lt;li&gt;让每个人创造最大的价值[不确定]&lt;/li&gt;
&lt;li&gt;实施过程中保持幽默和明显的善意[有善意，有没有幽默就不知道了]&lt;/li&gt;
&lt;li&gt;有感染力[什么是感染力？]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;算是有点“领导力”吧！&lt;/p&gt;

&lt;h1&gt;团队&lt;/h1&gt;

&lt;p&gt;团队方面，个人体会和《人件》所描述的没什么共鸣！&lt;/p&gt;

&lt;p&gt;我是个海贼迷，索隆粉！我个人比较赞同索隆在阿拉巴斯坦对乔巴说的自己对团队的理解：“你尽全力做好你该做的，我尽全力做好我该做的！如果你没做好，就揍你！”当然，这里的揍不一定就是真的揍了，可以想象一下，在团队里，其他人都在尽力做自己该做的事情，你没有，你会是什么感觉？&lt;/p&gt;

&lt;p&gt;《人件》中提到团队需要目标一致！我个人觉得好难，甚至不现实！前几天刚读了托尼.巴赞的《思维导图》！书里有个实验，就是找了几个人，四人一组，针对同一个词来进行联想，然后统计有多少词是四个人都想到的！实验结果是，即使是年龄相当，经历相当的四个人，联想到相同词的概率都非常的小！所以我觉得要让项目组成员目标一致很难！&lt;/p&gt;

&lt;p&gt;比如，有人工作就是为了赚钱！你能说他肤浅吗？你工作不是为了钱？有人工作就是为了充实自己！你能说他自私吗？你不需要项目经验来太高自己？你要让所有人都要把目标变成完成高质量的项目！有可能吗？&lt;/p&gt;

&lt;p&gt;但是目标不同又如何呢？&lt;/p&gt;

&lt;p&gt;你工作是为了赚钱！ok，没问题。你就把公司当作赚钱工具。你工作是为了充实自己！也没问题，你把公司当作学校！但是前提是你需要完成你的职责！你需要完成你的职责，来换取你所想要的！&lt;/p&gt;

&lt;h1&gt;企业文化&lt;/h1&gt;

&lt;p&gt;企业文化这么虚的东西，我真没什么体会！但是有些病态的企业文化我能体会，同时也是我不会去做的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;比如全公司的强制性加班&lt;/li&gt;
&lt;li&gt;无意义的会议！以及会议的跑题！&lt;/li&gt;
&lt;li&gt;过多人参与的会议，等等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，我不赞同所谓的“家”的企业文化---把公司当作家一样！在我看来，公司和家是对立的联系！&lt;/p&gt;

&lt;p&gt;人是有&lt;strong&gt;责任心&lt;/strong&gt;的动物！你为了家庭才出来工作，这是对家的责任感驱动！而对公司的责任感是建立在对家的责任感之上的！因为，对公司的责任感，能获得更多的回报，来照顾家庭！而过多的工作，又会导致对家庭的忽略！&lt;/p&gt;

&lt;h1&gt;结语&lt;/h1&gt;

&lt;p&gt;针对两年多的管理体会，以及《人件》的阅读，目前管理给我的体会就是：
&lt;strong&gt;管理，是一种服务！为了让成员快乐地、有效率地完成工作！&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2016/02/15/peopleware.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2016/02/15/peopleware.html</guid>
        
        <category>book</category>
        
        <category>review</category>
        
        
        <category>book</category>
        
      </item>
    
      <item>
        <title>My GitBook</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.gitbook.com/book/ivaneye/luminus-reference/details&quot;&gt;Luminus手册&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.gitbook.com/book/ivaneye/design-pattern/details&quot;&gt;语言与模式&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 12 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2015/12/12/book.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2015/12/12/book.html</guid>
        
        <category>book</category>
        
        <category>index</category>
        
        
        <category>book</category>
        
      </item>
    
      <item>
        <title>Go语言初探</title>
        <description>&lt;h1&gt;简介&lt;/h1&gt; &lt;p&gt;最近研究Docker，由于Docker由golang编写，为了更好的梳理Docker，所以先过了一下golang。&lt;/p&gt; &lt;p&gt;其实之前看过golang，对其语法无爱，所以就没太关注。&lt;/p&gt; &lt;p&gt;这次先简单梳理一下个人感觉比较有新意的地方！&lt;/p&gt; &lt;h1&gt;less is more&lt;/h1&gt; &lt;p&gt;golang推崇少即是多理念，语法简单，关键字就20多个，半天过一遍语法绰绰有余！&lt;/p&gt; &lt;p&gt;相对的Java关键字近100个，死板的语法，一堆的模板代码，这也是Java一直被喷的地方！&lt;/p&gt; &lt;p&gt;PS:要说&amp;quot;少即是多&amp;quot;理念的话，应该首推Lisp，比如Clojure,关键字不超过10个，其它功能全部是在这几个关键字上实现的，且语法高度统一&lt;/p&gt; &lt;p&gt;就看最简单的Hello World就行了&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//java实现&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//go实现&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;clojure实现&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;就HelloWorld这个例子看，golang和Java算是半斤八两!对比可以看出如下几个区别:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;golang不是面向对象语言，所以不是基于类和对象来构建代码的&lt;/li&gt; &lt;li&gt;golang不像Java会默认导入例如java.lang包，需要手动import&lt;/li&gt; &lt;li&gt;golang的启动方法也叫main，不过没有参数，且这个方法必须要在main这个包里&lt;/li&gt;...</description>
        <pubDate>Tue, 24 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2015/11/24/golang-first.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2015/11/24/golang-first.html</guid>
        
        <category>golang</category>
        
        <category>language</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>实时发布-嵌入式OSGi的应用</title>
        <description>&lt;h1&gt;场景&lt;/h1&gt; &lt;p&gt;单机应用已经越来越不能符合目前越来越复杂的产品需求了。即使是小型应用，至少也需要部署2台以上的服务器做集群。且应用必须24小时对外服务,可用性得达到n个9。这就对发布有了更高的要求。&lt;/p&gt; &lt;p&gt;也就催生了灰度发布这样的发布过程。而即使是这样，还是需要经历大致如下的发布过程:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;下载代码&lt;/li&gt; &lt;li&gt;打包&lt;/li&gt; &lt;li&gt;停止服务器&lt;/li&gt; &lt;li&gt;部署&lt;/li&gt; &lt;li&gt;启动服务器&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;而业界一直诟病JVM的启动速度，再加上如果项目比较大，编译过程比较长，发布机器比较多，那么做一次完整的发布可能需要几个小时。万一中途出了问题，要回退，又要几个小时。&lt;/p&gt; &lt;p&gt;是否可以解决这样的问题呢？而OSGi恰是一个不错的选择!&lt;/p&gt; &lt;h1&gt;OSGi&lt;/h1&gt; &lt;p&gt;OSGi是一个优雅、完整和动态的组件模型，提供了完整的模块化运行环境。&lt;/p&gt; &lt;p&gt;应用程序（称为bundle）无需重新引导可以被远程安装、启动、升级和卸载。&lt;/p&gt; &lt;p&gt;其主要应用在嵌入式开发中，而在JavaSE和JavaEE方面则少有建树。其最著名的使用就是eclipse了。究其原因主要有:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;增加开发难度：需要开发人员更关心模块的划分，处理模块与模块之间的依赖关系(模块间的导入导出),这是一个好的方面，但是&lt;/li&gt; &lt;li&gt;没有完善的工具：模块间的依赖关系需要开发人员手动处理(有相应的工具，但不能百分百处理依赖关系)。&lt;/li&gt; &lt;li&gt;额外的运行环境：应用(bundle)需要运行在实现了OSGi规范的容器内，导致了模块间的依赖关系需要在运行时才能验证是否有问题。也就是说无法在编译期验证模块间的关系。同时也增加了测试及调试的难度。&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;可以看出，OSGi的主要缺点是开发较繁琐。而针对前面所提到的问题，OSGi解决了如下几个问题:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;项目模块化，对于项目的更新与发布不再需要发布整个项目，只需要发布需要更新的模块即可。提高了编译打包的速度。&lt;/li&gt; &lt;li&gt;OSGi可在运行时的对bundle进行安装、启动、升级和卸载。提高了部署的速度。(这里就需要吐槽一下eclipse了，它是基于osgi的，但是每次安装插件都要重启是要搞哪样？！)&lt;/li&gt; &lt;li&gt;支持多版本发布。在OSGi容器内可发布相同应用的不同版本&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;OSGi是如何做到这些的呢？其实OSGi实现了一套自身的ClassLoader，具体可见&lt;a href=&quot;/2015/05/20/classloader.html&quot;&gt;此文&lt;/a&gt;&lt;/p&gt; &lt;h1&gt;OSGi容器&lt;/h1&gt; &lt;p&gt;目前OSGi容器主要有Knopflerfish, Apache Felix, Equinox, Spring DM。其具体比较请见&lt;a href=&quot;http://www.cnblogs.com/longkerdandy/archive/2010/09/29/OSGi_Compare.html&quot;&gt;此文&lt;/a&gt;&lt;/p&gt; &lt;p&gt;以及其上的一些应用，方便在OSGi上进行开发，比如Karaf,ServiceMix等。&lt;/p&gt; &lt;!-- more --&gt; &lt;h1&gt;OSGi的使用方式&lt;/h1&gt; &lt;p&gt;OSGi容器有两种使用方式:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;作为容器使用：&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;OSGi容器作为外层，所有的应用均部署在OSGi容器内。那么所有的应用都需要bundle化，但是上面说了,bundle化不是一个方便的过程。 且OSGi在非嵌入式领域并不是很流行，虽然之前业界一直在推广，但最终效果并不理想，Spring最后也放弃了对OGSi的支持。 所以当你的应用较大时，bundle化会是一个比较大的绊脚石。 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;嵌入式使用&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;基于上面的原因，我们可以将OSGi容器作为嵌入式容器使用，即基本的模块在OSGi外部运行，也就不需要bundle化了， 变动比较频繁的模块部署到OSGi容器内，使用OSGi便利的部署机制。 比如:项目中依赖的Spring,Mybatis等jar包可以在OSGi容器外部署，而业务模块则部署到OSGi容器内 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;Felix安装&lt;/h1&gt; &lt;p&gt;这里使用felix作为OSGi容器来演示嵌入式OSGi的使用！felix可到Apache网站下载!&lt;/p&gt; &lt;p&gt;felix目录结构如下:&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-bin:felix.jar路径，其实felix只需要这个jar包就可以运行了 -bundle:部署的bundle目录,如果你有需要部署的bundle，将其拷贝到此目录下，启动felix时会自动部署 -cache:bundle缓存目录 -conf:配置文件目录 -doc:相关文档 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;在根目录运行如下命令即可启动&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -jar bin/felix.jar &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;bundle目录下默认有四个bundle，提供了类似命令行功能。启动时自动部署了。可以输入lb，来查看已安装的bundle&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;g! lb START LEVEL 1 ID|State |Level|Name 0|Active | 0|System Bundle (5.4.0)|5.4.0 1|Active...</description>
        <pubDate>Wed, 11 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2015/11/11/embed-osgi.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2015/11/11/embed-osgi.html</guid>
        
        <category>architecture</category>
        
        <category>osgi</category>
        
        
        <category>architecture</category>
        
      </item>
    
      <item>
        <title>Java环境与语法</title>
        <description>&lt;h1&gt;简介&lt;/h1&gt; &lt;p&gt;本文是对&lt;a href=&quot;/2015/11/01/language.html&quot;&gt;如何学习一门编程语言&lt;/a&gt;的具体实践-Java语言第一篇。&lt;/p&gt; &lt;p&gt;前面说了基础语法是很简单的，如果有语言基础，比较好的方法是过一遍&lt;a href=&quot;http://learnxinyminutes.com/&quot;&gt;Learn X in Y minutes&lt;/a&gt;。&lt;/p&gt; &lt;p&gt;下文是在公司给毕业生做培训时的PPT，可做参考！&lt;/p&gt; &lt;h1&gt;Java环境搭建&lt;/h1&gt; &lt;ul&gt; &lt;li&gt; 到&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Oracle官方网站&lt;/a&gt;下载相应操作系统的JDK进行安装&lt;/li&gt; &lt;li&gt; 打开命令行,输入&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -version &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;得到如下信息，则表示搭建成功!&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;java version &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.8.0&amp;quot;&lt;/span&gt; Java&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; SE Runtime Environment &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 1.8.0-b132&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Java HotSpot&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 64-Bit Server VM &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 25.0-b70, mixed mode&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Java中需要理解两个路径：&lt;/p&gt; &lt;ul&gt; &lt;li&gt; path是系统查找程序的路径&lt;/li&gt; &lt;li&gt; classpath是Java查找类的路径&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;第一个程序&lt;/h1&gt; &lt;ul&gt; &lt;li&gt; 创建文件Hello.java&lt;/li&gt; &lt;li&gt; 输入如下代码&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//例子代码&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;...</description>
        <pubDate>Tue, 03 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2015/11/03/javabasic.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2015/11/03/javabasic.html</guid>
        
        <category>how</category>
        
        <category>language</category>
        
        <category>java</category>
        
        
        <category>train</category>
        
      </item>
    
      <item>
        <title>如何学习一门编程语言</title>
        <description>&lt;h1&gt;简介&lt;/h1&gt;

&lt;p&gt;未来的应用必然是异构的，绝对不会限定在一门语言上，这就要求我们能根据需要快速的掌握一门语言。&lt;/p&gt;

&lt;p&gt;本文就个人经历谈一谈如何快速的学习一门编程语言。主要面向已经掌握了一门语言的人。&lt;/p&gt;

&lt;h1&gt;学习目的&lt;/h1&gt;

&lt;p&gt;当你决定要学习一门语言的时候，请先问问自己为什么要学习这门语言？
如果答案是这门语言现在很火，那么可以洗洗睡了。生命苦短，好好玩乐吧，少年！&lt;/p&gt;

&lt;p&gt;个人认为需要学习一门语言的动机有如下几个：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;工作需要:工作需要使用这门语言，而且你还得靠这份工作养活，那么无论你怎么不情愿，硬着头皮学吧！&lt;/li&gt;
&lt;li&gt;提高效率:目前你使用的语言效率不高，而另一门语言能显著的提高效率(公司对语言的使用没有限制)。或者能作为工具语言提高你的工作效率。&lt;/li&gt;
&lt;li&gt;拓宽思路:你使用的面向过程语言，想了解了解被吹得天花乱坠的面向对象语言。或者你使用的面向对象语言，想看看函数式编程语言是什么鬼！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而第一种目的和第二，三中目的所要学习的程度则有差别。工作需要当然是越深入越好。提高效率则更偏向实用。拓宽思路则理解其思想即可。&lt;/p&gt;

&lt;p&gt;确立了目标后才能更好的学习语言，比如你只是想拓宽思路，那么没必要死抠语法，理解其思想即可，语法忘了就忘了。如果是使用，那么后期需要频繁的使用，在使用的过程中反馈学习，才能有更好的效果。编程嘛，无他，唯手熟尔！&lt;/p&gt;

&lt;p&gt;无论什么目的，都需要从基础开始！&lt;/p&gt;

&lt;h1&gt;环境与语法&lt;/h1&gt;

&lt;p&gt;首先是要摸清你要学习的语言的环境和基本语法。这个耗时不会很长，一般半天左右即可。&lt;/p&gt;

&lt;p&gt;目前大部分语言都提供了傻瓜式的安装包，所以环境基本不是问题了。&lt;/p&gt;

&lt;p&gt;语法的话，基本语法其实很简单。只要你有一门编程语言的基础，基本语法的学习也就是分分钟的事。无外乎:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;常量&lt;/li&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;li&gt;逻辑判断&lt;/li&gt;
&lt;li&gt;循环/递归&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等等,这些最基本的东西，只是各个语言在语法表达层面上的差异罢了!&lt;/p&gt;

&lt;h1&gt;语言的思想&lt;/h1&gt;

&lt;p&gt;基本语法只能说达到了Hello World的级别。而语言的思想则是核心重点。&lt;/p&gt;

&lt;p&gt;当然，如果你会过程式语言，再学一门过程式语言，这个坎就比较小了(只涉及到一些小的语法层面的学习，
比如Java使用接口来实现多重继承，而ruby使用的是mixin)。但是如果你学过过程式语言，现在要学面向对象语言，
或者你会面向对象语言，要学习函数式语言，则需要重点越过这个坎。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;比如:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;过程式语言考虑的是数据结构和算法，封装级别到方法&lt;/li&gt;
&lt;li&gt;面向对象考虑的是如何构建对象及对象之间的关系。封装级别是类&lt;/li&gt;
&lt;li&gt;函数式则考虑如何构建函数。封装级别是函数(函数和方法的区别请自行google)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每种语言思想的不同也就导致了在使用语言解决问题时的思考重心的不同。就像上面说的:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;过程式语言思考的是如何设计数据结构和算法&lt;/li&gt;
&lt;li&gt;面向对象语言思考的是如何构建对象及对象之间的关系&lt;/li&gt;
&lt;li&gt;函数式语言思考的是如何构建函数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这一部分算是比较难搞定的地方，需要一定的时间去学习与思考。&lt;/p&gt;

&lt;h1&gt;库&lt;/h1&gt;

&lt;p&gt;语言思想这一部分搞定后(如果一时搞不定，可以结合此部分反馈学习 )，后面其实就是对库的学习了。几个比较重要的库:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;字符串处理:这个不用说，字符串是我们打交道最多的，搞定相应的操作库是必须的&lt;/li&gt;
&lt;li&gt;集合操作:这个也是必须的&lt;/li&gt;
&lt;li&gt;IO操作:不搞定IO，如何和计算机或其他系统交互呢？&lt;/li&gt;
&lt;li&gt;并发库:计算机早就进入了多核时代，不搞定并发怎么好意思说是现代化编程语言？(连js这种单线程语言，都可以通过多进程的方式进行并发)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在学习库的过程中，可以进一步体会所学习的语言的思想！&lt;/p&gt;

&lt;h1&gt;代码组织&lt;/h1&gt;

&lt;p&gt;学习了思想，学习了库，其实你已经可以编写功能完善的代码了。但是如何编写出最适合该语言特性的代码呢?&lt;/p&gt;

&lt;p&gt;这里就相当于是最佳实践了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;比如面向对象里类的封装与继承。最经典的设计模式啦！面向对象语言中一堆的模式需要学习！&lt;/li&gt;
&lt;li&gt;函数式编程里函数的定义，lazy seq的使用，偏函数等等编写出更函数式的代码&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;打包，部署及三方库&lt;/h1&gt;

&lt;p&gt;编写完代码就是打包部署了，这里就涉及到了语言的生态环境了。即如何管理自己编写的库。&lt;/p&gt;

&lt;p&gt;比如:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;java里的Maven管理&lt;/li&gt;
&lt;li&gt;node.js的npm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以及对需要使用的第三方库的学习。&lt;/p&gt;

&lt;h1&gt;总结&lt;/h1&gt;

&lt;p&gt;经过如上过程，基本上就能将一门语言应用到实际使用中了!&lt;/p&gt;

&lt;p&gt;后续将针对Java,Groovy,Scala,Clojure,Shell等语言做详细的教程!&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2015/11/01/language.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2015/11/01/language.html</guid>
        
        <category>how</category>
        
        <category>language</category>
        
        
        <category>how</category>
        
      </item>
    
      <item>
        <title>Docker初探</title>
        <description>&lt;h1&gt;Docker的用途&lt;/h1&gt;

&lt;p&gt;在程序的生命周期中，主要有开发，测试，发布环节。每个环节都需要部署相应的环境。&lt;/p&gt;

&lt;p&gt;简单来说，Java使得程序能够一次编译到处运行，但是需要部署的每台机器都要部署jdk，server等，而每次部署都会是个耗时的过程，可能jdk版本不同，机器系统不同等导致部署环境不一致，进而导致无法发布应用的情况。&lt;/p&gt;

&lt;p&gt;Docker的作用就是将整个应用连带部署环境一起打包。就是说开发时配置好的环境，可以一起打包，拷贝到测试，发布机器上直接去发布即可。&lt;/p&gt;

&lt;h1&gt;Docker的安装&lt;/h1&gt;

&lt;p&gt;windows下从下面的连接下载安装包!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/boot2docker/windows-installer/releases&quot;&gt;https://github.com/boot2docker/windows-installer/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载最新版本的：docker-install.exe即可。一路next，没什么好说的。&lt;/p&gt;

&lt;h1&gt;启动Docker&lt;/h1&gt;

&lt;p&gt;直接双击Boot2Docker Start即可启动。启动后会将c:/Users/{username}目录挂载过去，可以作为本地与docker的文件交互目录&lt;/p&gt;

&lt;h1&gt;SSH连接&lt;/h1&gt;

&lt;p&gt;可以通过SSH工具连接到Docker上进行操作！在Docker界面上通过
&lt;code&gt;
boot2docker ip
&lt;/code&gt;
可以获取Docker的IP。默认的用户名和密码是： docker/tcuser&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1&gt;下载镜像&lt;/h1&gt;

&lt;p&gt;通过如下地址下载:ubuntu-14.04-x86_64.tar.gz&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://download.openvz.org/template/precreated&quot;&gt;http://download.openvz.org/template/precreated&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;拷贝镜像到Docker&lt;/h1&gt;

&lt;p&gt;将镜像文件拷贝到c:/Users/{username}目录下，即可在SSH中使用mv或者copy命令移动到Docker的任意目录下，例如要移动到/home下
&lt;code&gt;
mv /c/Users/{username}/ubuntu-14.04-x86_64.tar.gz /home
&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;安装镜像&lt;/h1&gt;

&lt;p&gt;命令：cat ubuntu-14.04-x86_64.tar.gz |docker import - ubuntu:ubuntu14
速度非常快，大概10几秒就完成了。&lt;/p&gt;

&lt;h1&gt;查看镜像&lt;/h1&gt;

&lt;p&gt;查看： docker images&lt;/p&gt;

&lt;h1&gt;运行镜像&lt;/h1&gt;

&lt;p&gt;运行：docker run -i -t ubuntu:ubuntu14 /bin/bash&lt;/p&gt;

&lt;p&gt;这相当于启动了一个Ubuntu，你可以通过命令下载文件，进行环境的配置，比如安装JDK等。&lt;/p&gt;

&lt;h1&gt;生成新镜像&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看当前容器
&lt;code&gt;
docker ps -a
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成新镜像
&lt;code&gt;
docker commit {containerId} new-image
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;导出镜像
&lt;code&gt;
docker save new-image &amp;gt; /tmp/new-image.tar
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此镜像就可以拷贝到其他机器上进行安装，安装后就是个包含了完整jdk环境的Ubuntu14，当然你可以把应用也打包进去，那就直接部署这个镜像就完成了应用的发布了。&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Oct 2015 00:00:00 +0800</pubDate>
        <link>http://ivaneye.com/2015/10/29/docker-first.html</link>
        <guid isPermaLink="true">http://ivaneye.com/2015/10/29/docker-first.html</guid>
        
        <category>docker</category>
        
        
        <category>docker</category>
        
      </item>
    
  </channel>
</rss>
