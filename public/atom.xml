<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>思考，执行，表达！</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ivaneye.com/"/>
  <updated>2016-12-30T12:57:06.224Z</updated>
  <id>https://ivaneye.com/</id>
  
  <author>
    <name>IvanEye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>散弹枪知识与狙击枪知识</title>
    <link href="https://ivaneye.com/2016/12/18/iwant.html"/>
    <id>https://ivaneye.com/2016/12/18/iwant.html</id>
    <published>2016-12-17T16:00:00.000Z</published>
    <updated>2016-12-30T12:57:06.224Z</updated>
    
    <content type="html"><![CDATA[<p>“<strong>面对这个知识爆炸的年代，或多或少有点焦急！看到新知识就想去了解、学习</strong>”群里网友的一句话，好像道出了不少人的心声！</p>
<p>几年前我也是个很“焦急”的人，而且我所从事的是互联网行业！新技术是日新月异！一有新技术出来我就会去学习，至少也要关注一下！生怕错过了新技术，就和其他人脱节了！</p>
<p>这样导致的问题是什么呢？我们获取的都是<strong>散弹枪知识</strong>！散弹枪有什么特点呢？首先，面对目标，不需要瞄太准，大差不差就行了，因为它打出的子弹是散开的。如果目标足够大，很容易就能中，但是如果是个点，即使靠得很近，可能也中不了。其次，由于子弹是散开的，所以攻击距离就比较短，所以拿散弹枪只能打近身战。打过CS的应该深有体会吧？</p>
<p>我觉得这应该和我们的成长环境有一定的关系！我们大部分人都是在和<strong>别人家的孩子</strong>的比较下成长起来的！别人有什么，我们就想要什么，而不管<strong>我们到底需不需要</strong>！</p>
<p>这种心理和女人购物是一样的！女人：“<strong>我不知道买这些东西有什么用，但是它们打折啊</strong>！”我们：“<strong>我不确定我是否需要这些，但是这些是知识啊</strong>！”</p>
<p>你是否有真正问过自己，<strong>你想要的是什么？</strong></p>
<a id="more"></a>
<p>之前看了一片文章，很有启发性！<a href="https://zh-cn.facebook.com/notes/%E4%B8%96%E7%95%8C%E5%81%89%E4%BA%BA%E5%90%8D%E8%A8%80%E9%8C%84/%E6%83%B3%E5%83%8F%E4%BD%A0%E4%BA%94%E5%B9%B4%E5%BE%8C%E5%9C%A8%E5%81%9A%E4%BB%80%E9%BA%BC/229961337129508/" target="_blank" rel="external">想像你五年后在做什麼？</a></p>
<p>文中作者的好友问她“最希望五年后的你在做什么？”，作者希望自己能有一张很受欢迎的唱片在市场上发行。她朋友回答：“如果第五年，你要有一张唱片在市场上发行，那么你的第四年一定要和一家唱片公司签约；那么你的第三年一定要有一个完整的作品，可以拿给唱片公司；那么第二年，一定要有很棒的作品开始录音；那么第一年，就一定要把你所有要准备录音的作品全部编曲、排练就位准备好；那么你的第六个月，就要把那些没有完成的作品修饰好，然后让你自己可以逐一筛选；那么你的第一个月就是要把目前这几首曲子完工；那么你的地一个星期就要先列出一整个清单，排出哪些曲子需要修改，哪些需要完工”！</p>
<p>我自己也是个例子！五年前，我是完全不敢在台上发言的，一上台就紧张、出汗、颤抖，完全说不出话来。但是我非常羡慕那些在台上侃侃而谈的人。<strong>我也要上台演讲</strong> 是我当时的心愿！当时我没有从五年计划开始倒推，但是我的执行流程也很类似！我先从内部会议的发言、提问开始，慢慢的开始做一些完整的阐述与说明，然后是部门内部分享，再后来是公司内部分享，到最后的技术大会。五年时间，虽然还做不到侃侃而谈，但是我能上台演讲了！</p>
<p>这和前面的<strong>散弹枪知识</strong>有什么区别呢？你会发现，有了目标后，我的学习都是为这个目标服务的，我们获取的知识都是<strong>狙击枪知识</strong>！狙击枪什么特点？狙击手需要隐藏很长的时间，寻找狙击时机，需要控制自己的呼吸，狙击的目标远，但是一击毙命！我们有目标后，需要学习实现这个目标所需要的知识，可能要花很长时间，但是不管目标有多远，我们都能达到，当然了，也可能最终没有命中目标(运气不好)！</p>
<p>做个类比，“你要xxx”就相当于1000米外的目标，如果散弹枪射程是500米，你积累再多的“散弹枪知识”有用吗？你需要静下心来慢慢瞄准，控制呼吸，等待时机，使用狙击枪对其一击致命！当然也要看风向(运气)了！</p>
<p><strong>狙击枪知识不止对未来目标有效，对近期目标也是有效的</strong>！我参加了一个写作群，群里有朋友问：“我想写作，但是不知道写什么！”其实换个问法就可以解决问题了：“我要写作关于xxx的内容，现在还缺xxx！”</p>
<p>比如说，我想像Charles Petzold那样，用有趣、通俗的文字来讲技术知识！现在我有了技术知识，我该如何用有趣、通俗的文字来描述呢？类比好像是个不错的方法！我怎么去类比呢？比如说我想用通俗易懂的文字向没有编程经验的人讲述“<strong>元编程</strong>”，我该怎么说呢？元编程就是编写程序的程序？！别人能听懂吗？我是不是该找个好的类比？3D打印机好像是个不错的类比！3D打印机可以打印桌子、花瓶，甚至手枪，而有一种3D打印机，它可以打印出3D打印机，这个3D打印机就是“<strong>元3D打印机</strong>”！</p>
<p>个人赞同李笑来在一个分享里的观点的前半部分，“<strong>知识并没有爆炸</strong>，爆炸的是垃圾”！所以<strong>做个冷静的狙击手，胜过拿着散弹枪冲锋献阵</strong>！  </p>
<ul>
<li>想像你五年后在做什麼？(需翻墙)(<a href="https://zh-cn.facebook.com/notes/%E4%B8%96%E7%95%8C%E5%81%89%E4%BA%BA%E5%90%8D%E8%A8%80%E9%8C%84/%E6%83%B3%E5%83%8F%E4%BD%A0%E4%BA%94%E5%B9%B4%E5%BE%8C%E5%9C%A8%E5%81%9A%E4%BB%80%E9%BA%BC/229961337129508/" target="_blank" rel="external">https://zh-cn.facebook.com/notes/%E4%B8%96%E7%95%8C%E5%81%89%E4%BA%BA%E5%90%8D%E8%A8%80%E9%8C%84/%E6%83%B3%E5%83%8F%E4%BD%A0%E4%BA%94%E5%B9%B4%E5%BE%8C%E5%9C%A8%E5%81%9A%E4%BB%80%E9%BA%BC/229961337129508/</a>)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“&lt;strong&gt;面对这个知识爆炸的年代，或多或少有点焦急！看到新知识就想去了解、学习&lt;/strong&gt;”群里网友的一句话，好像道出了不少人的心声！&lt;/p&gt;
&lt;p&gt;几年前我也是个很“焦急”的人，而且我所从事的是互联网行业！新技术是日新月异！一有新技术出来我就会去学习，至少也要关注一下！生怕错过了新技术，就和其他人脱节了！&lt;/p&gt;
&lt;p&gt;这样导致的问题是什么呢？我们获取的都是&lt;strong&gt;散弹枪知识&lt;/strong&gt;！散弹枪有什么特点呢？首先，面对目标，不需要瞄太准，大差不差就行了，因为它打出的子弹是散开的。如果目标足够大，很容易就能中，但是如果是个点，即使靠得很近，可能也中不了。其次，由于子弹是散开的，所以攻击距离就比较短，所以拿散弹枪只能打近身战。打过CS的应该深有体会吧？&lt;/p&gt;
&lt;p&gt;我觉得这应该和我们的成长环境有一定的关系！我们大部分人都是在和&lt;strong&gt;别人家的孩子&lt;/strong&gt;的比较下成长起来的！别人有什么，我们就想要什么，而不管&lt;strong&gt;我们到底需不需要&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;这种心理和女人购物是一样的！女人：“&lt;strong&gt;我不知道买这些东西有什么用，但是它们打折啊&lt;/strong&gt;！”我们：“&lt;strong&gt;我不确定我是否需要这些，但是这些是知识啊&lt;/strong&gt;！”&lt;/p&gt;
&lt;p&gt;你是否有真正问过自己，&lt;strong&gt;你想要的是什么？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="随笔" scheme="https://ivaneye.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>哲学是个什么鬼?</title>
    <link href="https://ivaneye.com/2016/11/29/philosophy.html"/>
    <id>https://ivaneye.com/2016/11/29/philosophy.html</id>
    <published>2016-11-28T16:00:00.000Z</published>
    <updated>2016-12-30T12:52:39.665Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间<a href="http://www.tudou.com/programs/view/ZKIHkd5cDaM" target="_blank" rel="external">吉林大学2011马哲考试中的神吐槽</a>这个视频又被扒了出来。不知道有多少人对此产生共鸣？应该不止我一个吧？</p>
<p>我觉得造成这种想法的原因就是<strong>中国的教育制度</strong>!可以从两个层面来说：</p>
<ul>
<li>教材</li>
<li>应试教育</li>
</ul>
<h2 id="教材"><a href="#教材" class="headerlink" title="教材"></a>教材</h2><p>先说教材，在中国说哲学，应该默认都是指马克思主义哲学，因为学校里教的都是马克思主义哲学，且只教马克思主义哲学！教就教吧，在教材里还要说其它的哲学体系都是错误的，特别是“唯心主义”！“我思故我在”这种扯淡的话，绝对是错误的！马克思的“辩证唯物主义”才是正确的！</p>
<p>现在看来，中国国情分分钟打马哲的脸！就以房价来说吧，马哲对“价值规律”的解释如下：</p>
<ul>
<li>商品的价值量是由生产这种商品的社会必要劳动时间决定的。</li>
<li>商品交换要以价值量为基础，实行等价交换。</li>
</ul>
<p>还有什么供求关系什么的啦，不记得了！</p>
<p>请问用马哲如何解释不断增长的房价？</p>
<a id="more"></a>
<p>再举个例子，《黑客帝国》大家都看过吧？以前看，只是觉得打斗效果很炫！现在回想一下，真是细思极恐啊！请问你如何证明你生活的世界不是虚拟世界？“辩证唯物主义”可以证明吗？</p>
<p>网上有个段子，假如你确实生活在虚拟世界里，你得到了一个特殊的权仗，你只要挥动一下，整个世界就会停顿一秒，你能感知到你生活在虚拟世界里吗？答案是不能！当你在挥动权仗时，你自己也会停顿这一秒，包括思维和感知，所以你依然无法感知你到底是否生活在虚拟世界里！</p>
<h2 id="应试教育"><a href="#应试教育" class="headerlink" title="应试教育"></a>应试教育</h2><p>再说应试教育！马哲好像是高中开始学的，但是属于副科，所以老师就随便应付应付就行了！毕竟大家要考大学嘛！谁会花时间在不记分的副科上？！而且考试完全靠背，谁管有没有用？并且整个教育都是以结论为向导，即告诉你一个结论，然后去应用这个结论，而没有说如何推导出这个结论！</p>
<p>到了大学，反正无论学文科、理科还是工科，怎么都躲不开马哲，虽然是必修课，但是老师依然还是照本宣科！后来要考研，看到马哲是必修课，成为了我放弃考研的一个原因！我惹不起还躲不起吗？所以研究生如何学马哲的我就不得而知了，不出意外还是背吧！</p>
<h2 id="再遇哲学"><a href="#再遇哲学" class="headerlink" title="再遇哲学"></a>再遇哲学</h2><p>工作后做了互联网行业！本来以为这辈子不会再和哲学扯上关系了！但是在查资料的过程中，发现不少人在写技术文章时都会说类似的话：“这个问题上升到了哲学层面”！同时也发现国外不少人是哲学博士！例如pandoc的开发者John MacFarlane，就是个哲学教授！自己很不理解，怎么学马哲的都开始编码了？我们这些码农还怎么混啊？但是回想起来，国外很多开发人员都不是软件相关专业，例如Spring的作者就是学音乐的，所以也就没太在意。</p>
<p>后来在买书的时候，凑单买了一本《哲学家们都干了些什么》！看完后发现以前对哲学的理解完全就是误解！</p>
<h2 id="国外哲学体系"><a href="#国外哲学体系" class="headerlink" title="国外哲学体系"></a>国外哲学体系</h2><p>先来看国外大学的学院设置，就能大致理解国外的哲学体系了。</p>
<p>洪堡大学的院系设置：</p>
<ul>
<li>法学院<br>　　洪堡大学德意志和国际建筑法学系、环境法研究中心、大陆法学系、宪法学院</li>
<li>农业以及园艺学院<br>　　植物种植学、园林艺术学、家畜学</li>
<li>第一自然科学院<br>　　生物学、化学、物理学</li>
<li>第二自然学院<br>　　地理学、信息学、数学心理学、夏堡医学院</li>
<li>第一哲学院<br>　　哲学、历史、欧洲民族学、生物信息学</li>
<li>第二哲学院<br>　　德意志文学、德意志语言学、罗马语言学、英美文学、斯洛伐克文学、古语言学</li>
<li>第三哲学院<br>　　社会学、文化和艺术亚非文学</li>
<li>第四哲学院<br>　　运动学、康复科学技术学院</li>
<li>经济学院<br>　　金融学、管理和运营市场学、市场运营、统计学、经济史、经济信息学</li>
</ul>
<p>你会发现洪堡大学有四个哲学院，每个哲学院学习的内容都不相同。实际上哲学是个抽象学科，而如何研究抽象？需要从具体的知识来进行抽象，洪堡大学分别从历史学、文学、社会学、运动学这四个具体学科的学习来学习哲学这个抽象学科！</p>
<p>学过面向对象编程的是否觉得很眼熟？其实就是面向对象建模的过程！</p>
<p>可以看pandoc的开发者John MacFarlane,他虽然是哲学教授，但是主要研究方向是“逻辑与科学的方法论”方向。</p>
<h2 id="哲学到底是什么？"><a href="#哲学到底是什么？" class="headerlink" title="哲学到底是什么？"></a>哲学到底是什么？</h2><p>维基百科上说哲学（英语：philosophy）是对普遍的和基本的问题的研究，这些问题通常和存在、知识、价值、理性、心灵、语言等有关。</p>
<p>可以说哲学是其它学科的基础！它对其它具体学科有指导作用！之前说过<a href="http://www.ivaneye.com/2016/10/11/metaknowledge.html" target="_blank" rel="external">元认知</a>,而哲学可以说是元知识，是<strong>学习其它具体知识的知识</strong>！</p>
<p>说得再具体点，哲学教的其实是<strong>如何思考</strong>，可以说是批判性思维的抽象！而哲学的三个终极问题</p>
<ul>
<li>我是谁？</li>
<li>我从哪里来？</li>
<li>我要到哪里去？</li>
</ul>
<p>不过是思考细化后的终点！</p>
<p>举个《哲学家们都干了些什么》里的一个例子，“天下乌鸦一般黑”！这句话严谨吗？</p>
<p>你如何确认“天下乌鸦一般黑”？你需要把世界上所有的乌鸦都确认一遍，是否所有的乌鸦都是黑的！还得确认过去所有的乌鸦都是黑的！同时还要确认未来所有的乌鸦也都是黑的！</p>
<p>最后，在说个段子！老师出了一道开放性问题：你对其他国家的食物短缺有什么自己的看法？非洲学生问：什么叫食物？欧洲学生问：什么叫短缺？美国学生问：什么叫其他国家？中国学生问：什么叫自己的看法？</p>
<p>我觉得中国学生缺乏个人看法的其中一个原因就是对哲学的误解和忽视！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间&lt;a href=&quot;http://www.tudou.com/programs/view/ZKIHkd5cDaM&quot;&gt;吉林大学2011马哲考试中的神吐槽&lt;/a&gt;这个视频又被扒了出来。不知道有多少人对此产生共鸣？应该不止我一个吧？&lt;/p&gt;
&lt;p&gt;我觉得造成这种想法的原因就是&lt;strong&gt;中国的教育制度&lt;/strong&gt;!可以从两个层面来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;教材&lt;/li&gt;
&lt;li&gt;应试教育&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;教材&quot;&gt;&lt;a href=&quot;#教材&quot; class=&quot;headerlink&quot; title=&quot;教材&quot;&gt;&lt;/a&gt;教材&lt;/h2&gt;&lt;p&gt;先说教材，在中国说哲学，应该默认都是指马克思主义哲学，因为学校里教的都是马克思主义哲学，且只教马克思主义哲学！教就教吧，在教材里还要说其它的哲学体系都是错误的，特别是“唯心主义”！“我思故我在”这种扯淡的话，绝对是错误的！马克思的“辩证唯物主义”才是正确的！&lt;/p&gt;
&lt;p&gt;现在看来，中国国情分分钟打马哲的脸！就以房价来说吧，马哲对“价值规律”的解释如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商品的价值量是由生产这种商品的社会必要劳动时间决定的。&lt;/li&gt;
&lt;li&gt;商品交换要以价值量为基础，实行等价交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有什么供求关系什么的啦，不记得了！&lt;/p&gt;
&lt;p&gt;请问用马哲如何解释不断增长的房价？&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://ivaneye.com/categories/book/"/>
    
    
      <category term="book" scheme="https://ivaneye.com/tags/book/"/>
    
      <category term="read" scheme="https://ivaneye.com/tags/read/"/>
    
  </entry>
  
  <entry>
    <title>巴菲特午餐</title>
    <link href="https://ivaneye.com/2016/11/27/lunch.html"/>
    <id>https://ivaneye.com/2016/11/27/lunch.html</id>
    <published>2016-11-26T16:00:00.000Z</published>
    <updated>2016-12-30T12:56:39.660Z</updated>
    
    <content type="html"><![CDATA[<p>之前在<a href="http://www.ivaneye.com/2016/11/21/cost.html" target="_blank" rel="external">为时间买单</a>里扯到了<strong>巴菲特午餐</strong>。正好吴军在”得到APP”专栏里透露了段永平，赵丹阳和朱晔之前和巴菲特午餐时所讨论的问题。对其中的三个建议有些体会：</p>
<ul>
<li>不要做自己不懂的事情</li>
<li>永远不要做空股票</li>
<li>永远不要用杠杆投资</li>
</ul>
<h1 id="不要做自己不懂的事情"><a href="#不要做自己不懂的事情" class="headerlink" title="不要做自己不懂的事情"></a>不要做自己不懂的事情</h1><p>这是巴菲特给段永平的其中一个建议。我对段永平自己的经历印象比较深刻。</p>
<p>当年段永平的步步高公司曾经夺得央视的广告标王，因此靠着黄金时段的广告，这家公司的品牌迅速被广大消费者接受。为了维护品牌，也为了宣传自己新的产品，他的公司每年都投入几亿到几十亿来做广告。当然，也就让广告公司挣得盆满钵满。当时，步步高的很多高管意识到了这点，向段永平建议自己创立广告公司。但是段永平并不认可这种想法，认为自己办广告公司一定会办咋，因为他不懂这个行业。下面的人当然还要据理力争，他们说，你怎么就肯定我们办不好呢？或许我们能够学习，能够办好。段永平解释说，<strong>我确实不知道为什么我们不可能办好，但是我知道一定会是一个失败的结果。因为如果你们的逻辑成立的话，今天世界上最大的广告公司应该是可口可乐广告公司，或者保洁广告公司，但是结果却不是，这里面必然有它的原因。</strong></p>
<a id="more"></a>
<p>现在的OPPO和Vivo也基本延续了步步高的策略！在手机业也已经超过了具有互联网思维的小米了！</p>
<p>相对的有一个反例—苏宁！苏宁是家电起家，然后开始涉足各种行业，苏宁体育，苏宁房产，苏宁易购等！就说苏宁易购吧，用户体验比天猫、京东差太多了！</p>
<p>这几天苏宁在推广苏宁超市，满50送50！我买了点零食，几盒彩笛卷，几包牛肉干！居然两个包裹没送完！其中一个包裹里就一盒彩笛卷！朋友圈里有人拉了车下去接货，然后收到了一盒口香糖！！！对苏宁的物流简直无语了。几年前在苏宁买了三本书，也是一本一本的送，最后一本等了两个星期，最后告诉我无货了！也是醉了。三四年过去了，苏宁的物流还是一点进步都没有。</p>
<p>据说这次还动用了总部的非物流人员去送货，就这物流算法，一盒彩笛卷一个包裹，多少人也不够送的啊！！！</p>
<p>这也应了“不要做自己不懂的事情”这句话！从物流可以看出来，苏宁的物流思维还是在家电上，因为家电大多体积都较大，一般都是一件一件的包装，然后整体配送！而苏宁超市卖的都是小件，一个客户可能会买很多件，但是苏宁物流系统里应该对这种需求支持得很不好，所以才导致了现在的问题！</p>
<p>我赞同“不要做自己不懂的事情”的观点，但是要换个说法：“一件事情，在自己懂之前不要做”！有什么区别？看上面步步高的例子！</p>
<p>对苏宁来说，他就是没有理清家电配送和小件配送的区别，导致了这次营销的失败（至少成功度大打折扣）！</p>
<h1 id="永远不要做空股票"><a href="#永远不要做空股票" class="headerlink" title="永远不要做空股票"></a>永远不要做空股票</h1><p>第二个建议是永远不做空股票！巴菲特推崇的是价值投资，之前看过邱国鹭的《投资中最简单的事》，也是在说价值投资！</p>
<p>所谓<strong>价值投资</strong>就是，衡量股票真实价值的方法，而非追随情感驱动型的市场定价！</p>
<p>巴菲特认为，只要时间足够长，股票价值走向是往上的！</p>
<p>不只是股票，按照<strong>英国人理论</strong>,其实整个社会的资源是随着时间的推移而增加的！</p>
<ul>
<li><p><strong>西班牙人的理论</strong>:认为地球上只有一个固定数量的价值，因此通向积累财富的道路就是学会从土地或者从人身上更有效地榨取财富</p>
</li>
<li><p><strong>英国人的理论</strong>:认为价值可以通过天才和技术创造出来。</p>
</li>
</ul>
<p>所以从长远来看的话，做空股票是个必定亏本的生意！</p>
<h1 id="永远不要用杠杆投资"><a href="#永远不要用杠杆投资" class="headerlink" title="永远不要用杠杆投资"></a>永远不要用杠杆投资</h1><p>对于杠杆投资，去年的股灾相信大家应该还记忆尤新吧？不多说了，就举个例子：</p>
<p>之前听朋友说过一件事，说他一朋友就是融资炒股了，自己投了身家，四倍杠杆去炒股，然后爆仓了，被强制平仓，一个中产阶级就这么瞬间倾家荡产了！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这三个建议其实都很简单易懂，但是在现在这个浮躁的社会，你看到别人融资炒股、做淘宝、做微商、做海淘赚钱了，你会不会心痒？也想试试？</p>
<p>这三个建议，算是给目前浮躁的社会一股清流吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在&lt;a href=&quot;http://www.ivaneye.com/2016/11/21/cost.html&quot;&gt;为时间买单&lt;/a&gt;里扯到了&lt;strong&gt;巴菲特午餐&lt;/strong&gt;。正好吴军在”得到APP”专栏里透露了段永平，赵丹阳和朱晔之前和巴菲特午餐时所讨论的问题。对其中的三个建议有些体会：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要做自己不懂的事情&lt;/li&gt;
&lt;li&gt;永远不要做空股票&lt;/li&gt;
&lt;li&gt;永远不要用杠杆投资&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;不要做自己不懂的事情&quot;&gt;&lt;a href=&quot;#不要做自己不懂的事情&quot; class=&quot;headerlink&quot; title=&quot;不要做自己不懂的事情&quot;&gt;&lt;/a&gt;不要做自己不懂的事情&lt;/h1&gt;&lt;p&gt;这是巴菲特给段永平的其中一个建议。我对段永平自己的经历印象比较深刻。&lt;/p&gt;
&lt;p&gt;当年段永平的步步高公司曾经夺得央视的广告标王，因此靠着黄金时段的广告，这家公司的品牌迅速被广大消费者接受。为了维护品牌，也为了宣传自己新的产品，他的公司每年都投入几亿到几十亿来做广告。当然，也就让广告公司挣得盆满钵满。当时，步步高的很多高管意识到了这点，向段永平建议自己创立广告公司。但是段永平并不认可这种想法，认为自己办广告公司一定会办咋，因为他不懂这个行业。下面的人当然还要据理力争，他们说，你怎么就肯定我们办不好呢？或许我们能够学习，能够办好。段永平解释说，&lt;strong&gt;我确实不知道为什么我们不可能办好，但是我知道一定会是一个失败的结果。因为如果你们的逻辑成立的话，今天世界上最大的广告公司应该是可口可乐广告公司，或者保洁广告公司，但是结果却不是，这里面必然有它的原因。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="随笔" scheme="https://ivaneye.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>为时间买单</title>
    <link href="https://ivaneye.com/2016/11/21/cost.html"/>
    <id>https://ivaneye.com/2016/11/21/cost.html</id>
    <published>2016-11-20T16:00:00.000Z</published>
    <updated>2016-12-30T12:56:27.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间是有成本的"><a href="#时间是有成本的" class="headerlink" title="时间是有成本的"></a>时间是有成本的</h1><p>大家都听说过“天下没有免费的午餐”这句话！这里所说的免费并不是金钱上的免费，而是<strong>机会成本</strong>！</p>
<ul>
<li><strong>机会成本</strong>：指为了得到某种东西而所要放弃另一些东西的最大价值</li>
</ul>
<p>用上面的话来解释机会成本，就是说，你吃午餐的成本不是你为午餐所花费的钱是多少，而是你吃饭所花费的时间，如果用来做其他事情，这个事情的最大价值是多少，你吃饭的成本就是多少！</p>
<p>再具体点，你本来想去买彩票的，但是肚子实在太饿了，就花10块钱去吃了个饭，由于吃饭你没买彩票，而你所要买的号码中了500w！那你这顿饭的成本就是500W！！！</p>
<p>从这个角度看的话，你是否能理解，花几十万和巴菲特吃饭的人了？</p>
<p>所以说，时间是有成本的！</p>
<a id="more"></a>
<h1 id="负罪感"><a href="#负罪感" class="headerlink" title="负罪感"></a>负罪感</h1><p>再举一个大家熟悉的例子！</p>
<p>相信大家在学生时代都有过这样的经历！一大早下定决心：“今天我要好好学习”！学了没几分钟，然后开始刷微博、刷朋友圈！一天就这么过去了，然后带着强烈的负罪感睡觉了！睡之前暗自下决定：“明天不能再这样了，一定要好好学习”！然后，第二天照旧！</p>
<p>有很多书谈这个问题，说自控力不行啦，不会时间管理啦！并给出一些解决方案，比如SMART原则，番茄时间法！</p>
<p>而我觉得主要原因是<strong>没有时间成本的概念</strong>！</p>
<h1 id="时间成本"><a href="#时间成本" class="headerlink" title="时间成本"></a>时间成本</h1><p>我们就从大学开始看起，因为之前的时间支配都还是父母帮忙决策！而大学是我们开始自己决定时间的使用！</p>
<p>回想一下，你在大学里是不是有大把大把的时间可以干自己喜欢的事情！大学里课程安排要比高中轻松很多，甚至不想上课了，请室友帮忙点个到就行！而到了寒暑假，就更high了！一到两个月的自由支配时间！所以这个时候，你的时间成本其实是比较低的！这个时候你的自由支配时间可以按周、甚至月来计算！</p>
<p>但是随着你进入社会，开始工作了，你会发现你整片整片的时间越来越少！首先，就是寒暑假没了！其次，可能还要频繁加班！还有，你需要谈谈恋爱吧，需要联络联络感情吧？这时，周末可能就成了你唯一能有自由支配时间的时候了！这个时候你的自由支配时间可能只能按天来算了！</p>
<p>而到你生了小孩之后，自由支配时间进一步被压缩了！小孩每三个小时要喂奶了，每两个小时要换尿布湿啦，还要洗澡，哭闹了还要哄！这时你的自由支配时间就被彻底碎片化了，只能按小时算！这时，你的时间成本就大幅度提高了！</p>
<h1 id="为时间买单"><a href="#为时间买单" class="headerlink" title="为时间买单"></a>为时间买单</h1><p>随着时间成本的大幅提高，你为了能获得自由支配时间，你会选择付钱！比如：以前在大学里，如果电脑出了问题，第一反应是自己先捣鼓捣鼓，说不定能捣鼓好呢！而现在你的第一反应应该是直接丢给维修人员了吧？回想一下，类似的事情是否有很多？</p>
<p>如果你站在现在的角度去看过去的你，是否觉得过去的你有些傻？如果你站在过去的角度去看现在的你，是否也觉得现在的你有些傻？</p>
<h1 id="物以稀为贵"><a href="#物以稀为贵" class="headerlink" title="物以稀为贵"></a>物以稀为贵</h1><p>类似的，有些人觉得一些有钱人花个几万甚至几十万买个包、买套西装太奢侈了(还有前面的和巴菲特吃饭)，纯粹就是炫富！很可能就是因为他们的时间成本很高，买这些名牌能降低时间成本的消耗！因为名牌的质量相对都较高，有很好的售后服务等，能节约很多时间！</p>
<h1 id="得到APP与精读"><a href="#得到APP与精读" class="headerlink" title="得到APP与精读"></a>得到APP与精读</h1><p>得到APP是罗辑思维推出的学习类付费APP，主要功能是将书读给用户听，节约用户读书的时间！精读微信公众帐号也推出了类似服务！</p>
<p>这种付费服务方式能够实行，就是由于时间成本越来越高！但个人认为还是需要挤出时间来读好的原书！因为精读出的内容都是经过人为过滤的，别人认为没用的东西，可能对你却有很高的价值！同时，过滤过的内容都多少带有个人主观偏向，可能有失偏颇！<strong>能读一手资料就尽量读一手资料</strong>！</p>
<p>如果是要扩大知识广度，这种花钱的方式，不失为一个好方法！</p>
<h1 id="另一个角度看时间成本"><a href="#另一个角度看时间成本" class="headerlink" title="另一个角度看时间成本"></a>另一个角度看时间成本</h1><p>时间成本越来越高的另一个原因是：时间成本是个<strong>沉没成本</strong>！</p>
<ul>
<li><strong>沉没成本</strong>:是已经付出且不可收回的成本!</li>
</ul>
<p>时间流逝后是没法收回的，每个人都一样！且每个人的时间长度都相同，在一件事上花费的时间上多了，相对的在另一件事上花费的时间就少了！而如果你想同时在多件事上都花些时间，那只能花钱买了(前面说的几万买包，花钱和巴菲特吃饭，花钱让人给你读书都是为了节约时间)！从这个角度来看“能用钱解决的问题都不是问题”这句话，还是很有道理的！</p>
<p>由于时间是沉没成本，所以不要太纠结于过去！举个例子：你买了一杯星巴克的咖啡，发现太TM难喝了！你是喝呢？还是流着泪把它喝完呢？你买了咖啡后是不能退的，买咖啡的钱就是沉默成本了，你喝不喝这个钱都已经花了，是要不回来的，所以不要纠结了，难喝就扔了，何必花钱买难受呢？</p>
<p>郭德纲在他的相声里也说过类似的段子：“大家都是买票来的，买的就是个乐呵，你500块钱已经花了，该乐就乐！你盯着500块钱看又不会乐，你要真乐了，你这病500块钱治不好”！</p>
<p>所以，对于该花钱的地方，还是该舍得花钱！至于什么是该花钱的地方，每个人看法不同！我会花在可积累的地方，把不可积累的时间转化为可积累的东西，比如知识，见识，亲情，友情等！</p>
<p>活在当下，着眼未来，才是正确的姿势！懊恼过去，是很不划算的买卖！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;时间是有成本的&quot;&gt;&lt;a href=&quot;#时间是有成本的&quot; class=&quot;headerlink&quot; title=&quot;时间是有成本的&quot;&gt;&lt;/a&gt;时间是有成本的&lt;/h1&gt;&lt;p&gt;大家都听说过“天下没有免费的午餐”这句话！这里所说的免费并不是金钱上的免费，而是&lt;strong&gt;机会成本&lt;/strong&gt;！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;机会成本&lt;/strong&gt;：指为了得到某种东西而所要放弃另一些东西的最大价值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用上面的话来解释机会成本，就是说，你吃午餐的成本不是你为午餐所花费的钱是多少，而是你吃饭所花费的时间，如果用来做其他事情，这个事情的最大价值是多少，你吃饭的成本就是多少！&lt;/p&gt;
&lt;p&gt;再具体点，你本来想去买彩票的，但是肚子实在太饿了，就花10块钱去吃了个饭，由于吃饭你没买彩票，而你所要买的号码中了500w！那你这顿饭的成本就是500W！！！&lt;/p&gt;
&lt;p&gt;从这个角度看的话，你是否能理解，花几十万和巴菲特吃饭的人了？&lt;/p&gt;
&lt;p&gt;所以说，时间是有成本的！&lt;/p&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="随笔" scheme="https://ivaneye.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>Mybooklive修复</title>
    <link href="https://ivaneye.com/2016/11/19/nas.html"/>
    <id>https://ivaneye.com/2016/11/19/nas.html</id>
    <published>2016-11-18T16:00:00.000Z</published>
    <updated>2016-12-30T12:49:18.621Z</updated>
    
    <content type="html"><![CDATA[<p>11年底告别租房，搬到了新家。当时智能电视还刚起步，买的55寸的三星电视，只支持简单的应用和DLNA。所以想法很简单，就是想在电脑上下载的视频可以直接在电视上播放。巧的是那时正好西数发布了Mybooklive这个网络NAS，特点是<strong>便宜</strong>，3T版才1千多点，也就是个硬盘的钱，当即购入，谁知果然便宜没好货！用了三年多，后来手贱，想在Mybooklive上搭个git服务器，然后Mybooklive就变砖了！我搜集了三年的1T多的数据，就这么没了！！！重装系统也无果，硬盘挂了，西数绿盘质量真不咋的～</p>
<p>本来想就算了，就安心把数据都放云盘吧！反正我用的50M的电信网络，下载速度还可以！谁知祸不单行，网盘又开始接二连三的关闭了！虽然我主力用的百度网盘，官方言论是不会关闭，但是谁能保证呢？毕竟官方打脸是分分钟的事！还是搞个私有云比较安心！</p>
<ul>
<li>NAS全称Network Attached Storage：网络附属存储</li>
<li>DLNA全称是DIGITAL LIVING NETWORK ALLIANCE：数字生活网络联盟。旨在解决个人PC，消费电器，移动设备在内的无线网络和有线网络的互联互通</li>
</ul>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>目前对私有云的需求不是很复杂。</p>
<ul>
<li>所有手机、电视、pad都能很容易的访问NAS上的资源</li>
<li>个人的一些资料能备份到NAS上</li>
<li>没有公网访问需求，公网访问需求通过百度网盘来分享</li>
</ul>
<a id="more"></a>
<p>这些需求原来的Mybooklive即可以满足需求。现在我个人不推荐买Mybooklive，因为目前的私有云解决方案很多(不过我没用过其它的，所以也不具体推荐！)，Mybooklive的体验并不好。不过我已经折腾了三年了，一是熟悉了，二是有“沉没成本”的投入，最重要的一点是<strong>木有钱</strong>！</p>
<p>所以在双11入手了一块东芝1T的盘！我大概估算了一下，我原来1T的数据，其实大部分都是我当初舍不得删或者懒得删的数据，真正的数据并没有那么多，1T应该差不多了！</p>
<ul>
<li><strong>沉没成本</strong>：已经付出且不可收回的成本。</li>
</ul>
<p>对于沉没成本最近接触比较多，有些感想，后面总结！</p>
<h1 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h1><p>Mybooklive其实就是一个简单的电脑，运行的是debian系统！支持ssh,ftp，可以安装一些应用，实现例如离线bt,git服务等功能！</p>
<p>具体流程参考<a href="https://my.oschina.net/u/248080/blog/207665" target="_blank" rel="external">这里</a></p>
<p>买的硬盘连接线，直接通过USB接口，把硬盘接到电脑上，我用的是Linux Mint系统，如果是windows系统，需要用虚拟机安装debian系的Linux!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt－get install fuseext2 parted</div><div class="line">sudo parted -l //找到磁盘标识，如/dev/sdb</div><div class="line">sudo fuseext2 -o allow_other -o ro -o sync_read /dev/sdb4 /mnt/    #这个命令我死活执行不成功，不过算了，不影响，因为我不需要备份</div></pre></td></tr></table></figure>
<ul>
<li>下载<a href="http://download.wdc.com/nas/apnc-023205-046-20120910.deb" target="_blank" rel="external">apnc-023205-046-20120910.deb</a>这个版本固件，我只有这个版本安装成功了！</li>
<li>从固件中提取rootfs.img</li>
<li>把下面的执行脚本拷贝下来，保存成debrick.sh</li>
<li>运行脚本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./debrick.sh /dev/sdb rootfs.img destroy</div></pre></td></tr></table></figure>
<h1 id="升级系统"><a href="#升级系统" class="headerlink" title="升级系统"></a>升级系统</h1><p>目前最新的版本是apnc-024310-048-20150507.deb,直接从Mybooklive官网下载即可。</p>
<p>但是使用上面的方法重装系统后，无法使用管理界面里的离线升级！在线升级一直0%，没有进度，所以只能手动升级。</p>
<p>把下载的最新版固件上传到public目录下，执行如下命令！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./updateFirmwareFromFile.sh /shares/Public/文件名</div></pre></td></tr></table></figure>
<p>管理界面自动进入升级界面！</p>
<h1 id="升级DNLA服务"><a href="#升级DNLA服务" class="headerlink" title="升级DNLA服务"></a>升级DNLA服务</h1><p>默认Mybooklive的DNLA服务是twonkymedia，支持的视频格式很有限。后来Mybooklive提供了自己的DLNA服务，从<a href="http://support.wdc.com/knowledgebase/answer.aspx?ID=7839&amp;lang=cn" target="_blank" rel="external">Mybooklive固件帮助页面</a>下载后，和前面的升级系统一样进行操作即可！</p>
<h1 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#</div><div class="line"># The purpose of the script is to reinstall the operating system (debrick) on</div><div class="line"># a harddrive that has been extracted from the housing of a WD MyBook Live.</div><div class="line">#</div><div class="line"></div><div class="line">#help screen</div><div class="line">if  [ $# = 1 -a &quot;$1&quot; = &quot;--help&quot; ]; then</div><div class="line">echo &quot;</div><div class="line">standard use of script is:</div><div class="line">    sudo ./debricker.sh     the script will find out what disk to use, it will not</div><div class="line">                            touch the partition tables and therefore perserves data.</div><div class="line">                            it will look what the newest version of the firmware is</div><div class="line">                            via internet and then search for it in current folder or</div><div class="line">                            subfolders. if none is found it will download one.</div><div class="line"></div><div class="line">possible options are:</div><div class="line">    /dev/sd?                path to the disk from mybook live. if not given, the script</div><div class="line">                            will figure it out on its own.</div><div class="line">    /*/*.img                path to the firmware that will be written to the disk. if</div><div class="line">                            not given, the script will search for and then download it.</div><div class="line">    destroy                 script will rewrite the partition table of disk,</div><div class="line">                            this will not perserve data, must match /dev/sd?.</div><div class="line"></div><div class="line">example</div><div class="line">    sudo ./debricker.sh /dev/sda /firmwares/mine.img destroy</div><div class="line">&quot;</div><div class="line">exit 1</div><div class="line">fi</div><div class="line"></div><div class="line">echo</div><div class="line"></div><div class="line">#check that requirements are fullfilled</div><div class="line">if [ &quot;$(id -u)&quot; != &quot;0&quot; ]; then</div><div class="line">    echo -e &quot;this script must be run as root.\n&quot;</div><div class="line">    exit 1</div><div class="line">fi</div><div class="line">if ! which mdadm &gt; /dev/null; then</div><div class="line">    echo -e &quot;this script requires the mdadm package.\n&quot;</div><div class="line">    exit 1</div><div class="line">fi</div><div class="line"></div><div class="line">#making sure the mountpoint is available</div><div class="line">rootfsMount=/mnt/md0</div><div class="line">if [ -e $&#123;rootfsMount&#125; ]; then</div><div class="line">    if mountpoint -q $&#123;rootfsMount&#125;; then</div><div class="line">        echo &quot;$&#123;rootfsMount&#125; needs to be unmounted.&quot;</div><div class="line">        exit 1;</div><div class="line">    fi</div><div class="line">fi</div><div class="line">test -d &quot;./mnt&quot; || mkdir -p &quot;/mnt&quot;</div><div class="line">test -d &quot;$rootfsMount&quot; || mkdir -p &quot;$rootfsMount&quot;</div><div class="line"></div><div class="line">#making sure that there is no raid unit running</div><div class="line">rootfsRaid=/dev/md0</div><div class="line">if [ -e $rootfsRaid ]; then</div><div class="line">    echo -e &quot;\n$rootfsRaid already exists! you need to stop and remove it.\n&quot;</div><div class="line">    exit 1;</div><div class="line">fi</div><div class="line"></div><div class="line">#standard choices</div><div class="line">disk=notset</div><div class="line">image_img=notset</div><div class="line">destroy=false</div><div class="line"></div><div class="line">#handles the arguments and sets options</div><div class="line">for (( arg=1; arg&lt;=$&#123;#&#125;; arg++ ))</div><div class="line">do</div><div class="line">    case $&#123;!arg&#125; in</div><div class="line">    /dev/sd?)    disk=$&#123;!arg&#125;;;</div><div class="line">    *.img)        image_img=$&#123;!arg&#125;;;</div><div class="line">    &quot;destroy&quot;)    destroy=true;;</div><div class="line">    *)             echo &quot;unknown argument: $&#123;!arg&#125;&quot;</div><div class="line">                exit 1</div><div class="line">    esac</div><div class="line">done</div><div class="line"></div><div class="line">echo &quot;********************** DISK           **********************&quot;</div><div class="line">echo</div><div class="line"></div><div class="line">#figure out what disk to use</div><div class="line">if [ $disk = &quot;notset&quot; ]; then</div><div class="line">    for x in &#123;a..z&#125;</div><div class="line">    do</div><div class="line">        #avoid a to literal matching in order to avoid incompability.</div><div class="line">        if [ -e /dev/sd$&#123;x&#125; ];                                then</div><div class="line">        diskTest=$(parted --script /dev/sd$&#123;x&#125; print)</div><div class="line">        if [ ! -e /dev/sd$&#123;x&#125;0 -a ! -e /dev/sd$&#123;x&#125;5 ];            then</div><div class="line">        if [[ $diskTest = *WD??EARS* ]];                        then</div><div class="line">        if [[ $diskTest = *??00GB* ]];                            then</div><div class="line">        if [[ $diskTest = *3*B*B*5??MB*primary* ]];                then</div><div class="line">        if [[ $diskTest = *1*B*B*2???MB*ext3*primary*raid* ]];    then</div><div class="line">        if [[ $diskTest = *2*B*B*2???MB*ext3*primary*raid* ]];    then</div><div class="line">        if [[ $diskTest = *4*B*B*GB*ext4*primary* ]];            then</div><div class="line">            if [ $disk != notset ];                                then</div><div class="line">                echo &quot;multiple disk founds, you must enter the path manually:&quot;</div><div class="line">                echo &quot;   sudo ./debricker.sh /dev/sd?&quot;</div><div class="line">                exit 1;</div><div class="line">            fi</div><div class="line">            disk=/dev/sd$&#123;x&#125;</div><div class="line">        fi; fi; fi;    fi;    fi;    fi; fi; fi</div><div class="line">    done</div><div class="line"></div><div class="line">    if [ $disk == notset ]; then</div><div class="line">        echo &quot;script could not find a matching sd unit connected to system.&quot;</div><div class="line">        exit 1</div><div class="line">    fi</div><div class="line">else</div><div class="line">    if [ ! -e $disk ]; then</div><div class="line">        echo &quot;$disk does not exist.&quot;</div><div class="line">        exit 1;</div><div class="line">    fi</div><div class="line">fi</div><div class="line"></div><div class="line">echo -e &quot;script will use the following disk: \n&quot;</div><div class="line">parted --script $disk print</div><div class="line">read -p &quot;is this REALLY the disk you want? [y] &quot; -n 1</div><div class="line">if ! [[ $REPLY =~ ^[Yy]$ ]]; then</div><div class="line">    echo -e &quot;\nuser did not confirm, nothing was done.\n&quot;</div><div class="line">    exit 1;</div><div class="line">fi</div><div class="line">echo</div><div class="line"></div><div class="line">diskRoot1=$&#123;disk&#125;1</div><div class="line">diskRoot2=$&#123;disk&#125;2</div><div class="line">diskSwap=$&#123;disk&#125;3</div><div class="line">diskData=$&#123;disk&#125;4</div><div class="line"></div><div class="line">echo</div><div class="line">echo &quot;********************** IMAGE          **********************&quot;</div><div class="line">echo</div><div class="line"></div><div class="line">#the image was not given as parameter</div><div class="line">if [ $image_img = notset ]; then</div><div class="line">    #find out what the latest version of firmware is</div><div class="line">    if ! which curl &gt; /dev/null; then</div><div class="line">        echo -e &quot;\nthis script requires the curl package, either install it or specify image file.\n&quot;</div><div class="line">        exit 1</div><div class="line">    fi</div><div class="line">    wdc_homepage=&quot;http://websupport.wdc.com/firmware/list.asp&quot;</div><div class="line">    wdc_latestfirmware=$(curl &quot;$&#123;wdc_homepage&#125;?type=AP1NC&amp;fw=01.03.03&quot; 2&gt; /dev/null | awk &apos; &#123;</div><div class="line">        if ( match($0, &quot;upgrade file&quot; ) != 0 ) &#123;</div><div class="line">            split($0, http, &quot;\&quot;&quot;);</div><div class="line">            print http[2];</div><div class="line">            exit 1;</div><div class="line">        &#125;</div><div class="line">    &#125;&apos;)</div><div class="line">    latestversion_simple=$(echo $wdc_latestfirmware | cut -d&apos;-&apos; -f 2)</div><div class="line">    latestversion_pattern=$(echo $latestversion_simple | sed &apos;s/../&amp;*/g;s/:$//&apos;)</div><div class="line">    if [ &quot;$latestversion_simple&quot; == &quot;&quot; -o &quot;$latestversion_pattern&quot; == &quot;&quot; ]; then</div><div class="line">        echo -e &quot;\ncould not fetch the latest version!\n&quot;</div><div class="line">        exit 1;</div><div class="line">    fi</div><div class="line">    echo &quot;checking:     $&#123;latestversion_simple&#125;&quot;</div><div class="line">    echo &quot;searching:    ./*/*$&#123;latestversion_pattern&#125;.img&quot;</div><div class="line">    image_img=$(find ./ -type f -name &quot;*$&#123;latestversion_pattern&#125;.img&quot; -print; 2&gt;/dev/null)</div><div class="line"></div><div class="line">    #get the latest firmware either from subdirs or internet</div><div class="line">    case `echo $image_img | wc -w` in</div><div class="line">    0)  echo &quot;searching:    ./*/*$&#123;latestversion_pattern&#125;.deb&quot;</div><div class="line">        test -d &quot;./firmware&quot; || mkdir -p &quot;./firmware&quot;</div><div class="line">        image_deb=$(find ./ -type f -name &quot;*$&#123;latestversion_pattern&#125;.deb&quot; -print; 2&gt;/dev/null)</div><div class="line">        image_img=&quot;./firmware/rootfs_$latestversion_simple.img&quot;</div><div class="line">        if ! [ `echo $image_deb | wc -w` == 1 ]; then</div><div class="line">            image_deb=&quot;./firmware/rootfs_$latestversion_simple.deb&quot;</div><div class="line">            echo</div><div class="line">            echo &quot;downloading:  $image_deb&quot;</div><div class="line">            read -p &quot;confirm [y]:  &quot; -n 1</div><div class="line">            if ! [[ $REPLY =~ ^[Yy]$ ]]; then</div><div class="line">                exit 1</div><div class="line">            fi</div><div class="line">            echo</div><div class="line">            curl $wdc_latestfirmware &gt; $image_deb</div><div class="line">            if [ $? != 0 ]; then</div><div class="line">                echo -e &quot;\ndownloading encountered problems.\n&quot;</div><div class="line">                exit 1;</div><div class="line">            fi</div><div class="line">        fi</div><div class="line">        echo</div><div class="line">        echo    &quot;will extract: $image_deb&quot;</div><div class="line">        read -p &quot;confirm [y]:  &quot; -n 1</div><div class="line">        echo</div><div class="line">        if ! [[ $REPLY =~ ^[Yy]$ ]]; then</div><div class="line">            exit 1</div><div class="line">        fi</div><div class="line">        echo &quot;extracting:   ./firmware/rootfs_$&#123;latestversion_simple&#125;.img&quot;</div><div class="line">        ar p $image_deb data.tar.lzma | unlzma | tar -x -C ./firmware</div><div class="line">        if [ $? != 0 ]; then</div><div class="line">            echo -e &quot;\nextraction encountered problems.\n&quot;</div><div class="line">            exit 1;</div><div class="line">        fi</div><div class="line">        mv ./firmware/CacheVolume/upgrade/rootfs.img ./firmware/rootfs_$&#123;latestversion_simple&#125;.img</div><div class="line">        rm -rf ./firmware/CacheVolume;;</div><div class="line">    1)  echo &quot;found:        $image_img&quot;;;</div><div class="line">    *)  echo -e &quot;\nmultiple image_img files was found.&quot;</div><div class="line">        exit 1</div><div class="line">    esac</div><div class="line">else</div><div class="line">    if [ ! -e $image_img ]; then</div><div class="line">        echo &quot;$image_img does not exist.&quot;</div><div class="line">        exit 1;</div><div class="line">    fi</div><div class="line">fi</div><div class="line"></div><div class="line">#construct the swap program</div><div class="line">echo &quot;\</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;fcntl.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;sys/mount.h&gt;</div><div class="line"></div><div class="line">#define MD_RESERVED_BYTES      (64 * 1024)</div><div class="line">#define MD_RESERVED_SECTORS    (MD_RESERVED_BYTES / 512)</div><div class="line"></div><div class="line">#define MD_NEW_SIZE_SECTORS(x) ((x &amp; ~(MD_RESERVED_SECTORS - 1)) - MD_RESERVED_SECTORS)</div><div class="line"></div><div class="line">main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line">    int fd, i;</div><div class="line">    unsigned long size;</div><div class="line">    unsigned long long offset;</div><div class="line">    char super[4096];</div><div class="line">    if (argc != 2) &#123;</div><div class="line">        fprintf(stderr, \&quot;Usage: swap_super device\\n\&quot;);</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line">    fd = open(argv[1], O_RDWR);</div><div class="line">    if (fd&lt;0) &#123;</div><div class="line">        perror(argv[1]);</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line">    if (ioctl(fd, BLKGETSIZE, &amp;size)) &#123;</div><div class="line">        perror(\&quot;BLKGETSIZE\&quot;);</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line">    offset = MD_NEW_SIZE_SECTORS(size) * 512LL;</div><div class="line">    if (lseek64(fd, offset, 0) &lt; 0LL) &#123;</div><div class="line">        perror(\&quot;lseek64\&quot;);</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line">    if (read(fd, super, 4096) != 4096) &#123;</div><div class="line">        perror(\&quot;read\&quot;);</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (i=0; i &lt; 4096 ; i+=4) &#123;</div><div class="line">        char t = super[i];</div><div class="line">        super[i] = super[i+3];</div><div class="line">        super[i+3] = t;</div><div class="line">        t=super[i+1];</div><div class="line">        super[i+1]=super[i+2];</div><div class="line">        super[i+2]=t;</div><div class="line">    &#125;</div><div class="line">    /* swap the u64 events counters */</div><div class="line">    for (i=0; i&lt;4; i++) &#123;</div><div class="line">        /* events_hi and events_lo */</div><div class="line">        char t=super[32*4+7*4 +i];</div><div class="line">        super[32*4+7*4 +i] = super[32*4+8*4 +i];</div><div class="line">        super[32*4+8*4 +i] = t;</div><div class="line"></div><div class="line">        /* cp_events_hi and cp_events_lo */</div><div class="line">        t=super[32*4+9*4 +i];</div><div class="line">        super[32*4+9*4 +i] = super[32*4+10*4 +i];</div><div class="line">        super[32*4+10*4 +i] = t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (lseek64(fd, offset, 0) &lt; 0LL) &#123;</div><div class="line">        perror(\&quot;lseek64\&quot;);</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line">    if (write(fd, super, 4096) != 4096) &#123;</div><div class="line">        perror(\&quot;write\&quot;);</div><div class="line">        exit(1);</div><div class="line">    &#125;</div><div class="line">    exit(0);</div><div class="line"></div><div class="line">&#125;&quot; &gt;./swap.c</div><div class="line"></div><div class="line">gcc swap.c -o swap</div><div class="line">rm swap.c</div><div class="line"></div><div class="line">echo</div><div class="line">echo &quot;********************** IMPLEMENTATION **********************&quot;</div><div class="line"></div><div class="line">echo -e &quot;</div><div class="line">everything is now prepared!</div><div class="line">device:       $disk</div><div class="line">image_img:    $image_img</div><div class="line">destroy:      $destroy\n&quot;</div><div class="line"></div><div class="line">read -p &quot;this is the point of no return, continue? [y] &quot; -n 1</div><div class="line">echo</div><div class="line">if ! [[ $REPLY =~ ^[Yy]$ ]]; then</div><div class="line">    exit 1;</div><div class="line">fi</div><div class="line">echo</div><div class="line"></div><div class="line">#rewrite the partition table</div><div class="line">if [ $destroy = true ]; then</div><div class="line">    backgroundPattern=&quot;$&#123;backgroundPattern:-0&#125;&quot;</div><div class="line"></div><div class="line">    dd if=/dev/zero of=$diskRoot1 bs=1M count=32</div><div class="line">    dd if=/dev/zero of=$diskRoot2 bs=1M count=32</div><div class="line">    dd if=/dev/zero of=$diskSwap bs=1M count=32</div><div class="line">    dd if=/dev/zero of=$diskData bs=1M count=32</div><div class="line">    badblocks -swf -b 1048576 -t $&#123;backgroundPattern&#125; $&#123;disk&#125; 16 0</div><div class="line"></div><div class="line">    sync</div><div class="line">    sleep 2</div><div class="line"></div><div class="line">    parted $disk --align optimal &lt;&lt;EOP</div><div class="line">mklabel gpt</div><div class="line">mkpart primary 528M  2576M</div><div class="line">mkpart primary 2576M 4624M</div><div class="line">mkpart primary 16M 528M</div><div class="line">mkpart primary 4624M -1M</div><div class="line">set 1 raid on</div><div class="line">set 2 raid on</div><div class="line">quit</div><div class="line">EOP</div><div class="line"></div><div class="line">    sync</div><div class="line">    sleep 1</div><div class="line"></div><div class="line">    #blocksize 65536 is required by the hardware, you won&apos;t be able to mount if different.</div><div class="line">    mkfs.ext4 -b 65536 -m 0 $diskData</div><div class="line"></div><div class="line">    echo</div><div class="line">    read -p &quot;destroying was done, would you like to continue with installation? [y] &quot; -n 1</div><div class="line">    echo -e</div><div class="line">    if ! [[ $REPLY =~ ^[Yy]$ ]]; then</div><div class="line">        exit 1;</div><div class="line">    fi</div><div class="line">fi</div><div class="line"></div><div class="line">#write the image to the raid disk</div><div class="line">echo</div><div class="line">sync</div><div class="line">mdadm --create $rootfsRaid --verbose --metadata=0.9 --raid-devices=2 --level=raid1 --run $diskRoot1 missing</div><div class="line">mdadm --wait $rootfsRaid</div><div class="line">sync</div><div class="line">sleep 2</div><div class="line">mkfs.ext3 -c -b 4096 $rootfsRaid</div><div class="line">sync</div><div class="line">sleep 2</div><div class="line"></div><div class="line">mdadm $rootfsRaid --add --verbose $diskRoot2</div><div class="line">echo</div><div class="line">echo -n &quot;synchronize raid... &quot;</div><div class="line">sleep 2</div><div class="line">mdadm --wait $rootfsRaid</div><div class="line">sync</div><div class="line">echo -e &quot;done\n&quot;</div><div class="line">echo &quot;copying image to disk... &quot;</div><div class="line">dd if=$image_img of=$rootfsRaid</div><div class="line">mount $rootfsRaid $rootfsMount</div><div class="line">cp $rootfsMount/usr/local/share/bootmd0.scr $rootfsMount/boot/boot.scr</div><div class="line">echo &quot;enabled&quot; &gt; $rootfsMount/etc/nas/service_startup/ssh</div><div class="line">sync</div><div class="line">sync</div><div class="line">sync</div><div class="line">umount $rootfsMount</div><div class="line">rmdir $rootfsMount</div><div class="line">mdadm --stop $rootfsRaid</div><div class="line">./swap $diskRoot1</div><div class="line">./swap $diskRoot2</div><div class="line">rm ./swap</div><div class="line"></div><div class="line">echo</div><div class="line">echo &quot;all done! device should be debricked!&quot;</div><div class="line">echo</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://download.wdc.com/nas/apnc-023205-046-20120910.deb" target="_blank" rel="external">Mybooklive固件地址</a></li>
<li><a href="https://my.oschina.net/u/248080/blog/207665" target="_blank" rel="external">Mybooklive 数据备份和重装系统</a></li>
<li><a href="https://www.mobibrw.com/2014/1297" target="_blank" rel="external">WD My Book Live 离线升级固-件</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;11年底告别租房，搬到了新家。当时智能电视还刚起步，买的55寸的三星电视，只支持简单的应用和DLNA。所以想法很简单，就是想在电脑上下载的视频可以直接在电视上播放。巧的是那时正好西数发布了Mybooklive这个网络NAS，特点是&lt;strong&gt;便宜&lt;/strong&gt;，3T版才1千多点，也就是个硬盘的钱，当即购入，谁知果然便宜没好货！用了三年多，后来手贱，想在Mybooklive上搭个git服务器，然后Mybooklive就变砖了！我搜集了三年的1T多的数据，就这么没了！！！重装系统也无果，硬盘挂了，西数绿盘质量真不咋的～&lt;/p&gt;
&lt;p&gt;本来想就算了，就安心把数据都放云盘吧！反正我用的50M的电信网络，下载速度还可以！谁知祸不单行，网盘又开始接二连三的关闭了！虽然我主力用的百度网盘，官方言论是不会关闭，但是谁能保证呢？毕竟官方打脸是分分钟的事！还是搞个私有云比较安心！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NAS全称Network Attached Storage：网络附属存储&lt;/li&gt;
&lt;li&gt;DLNA全称是DIGITAL LIVING NETWORK ALLIANCE：数字生活网络联盟。旨在解决个人PC，消费电器，移动设备在内的无线网络和有线网络的互联互通&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;目前对私有云的需求不是很复杂。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有手机、电视、pad都能很容易的访问NAS上的资源&lt;/li&gt;
&lt;li&gt;个人的一些资料能备份到NAS上&lt;/li&gt;
&lt;li&gt;没有公网访问需求，公网访问需求通过百度网盘来分享&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="other" scheme="https://ivaneye.com/categories/other/"/>
    
    
      <category term="other" scheme="https://ivaneye.com/tags/other/"/>
    
      <category term="随笔" scheme="https://ivaneye.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>李狗嗨与美国大选</title>
    <link href="https://ivaneye.com/2016/11/13/vote.html"/>
    <id>https://ivaneye.com/2016/11/13/vote.html</id>
    <published>2016-11-12T16:00:00.000Z</published>
    <updated>2016-12-30T12:56:16.292Z</updated>
    
    <content type="html"><![CDATA[<p>上周美国大选终于落幕了，我没太关注，不过有几件事我印象比较深刻：</p>
<ul>
<li>在第一次公开辩论后，twitter和主流媒体分别对此次辩论做了调查！twitter显示川普赢了，而主流媒体显示希拉里赢了。</li>
<li>主流媒体，各大财团公开支持希拉里。而只有一家媒体公开支持川普</li>
<li>大选开始前，希拉里已经准备庆祝烟花了，而川普已经基本放弃</li>
<li>川普赢了以后，很多人举行游行，拒绝承认川普为总统</li>
</ul>
<p>不由得想起之前刷的一部日剧《Legel High》，这个场景和《Legel High》第二部里的场景太类似了！</p>
<h1 id="李狗嗨"><a href="#李狗嗨" class="headerlink" title="李狗嗨"></a>李狗嗨</h1><p>网上流传的“李狗嗨”就是这部日剧的音译。该剧讲述的是官司胜诉率高达100%却性格偏执的律师古美门研介，和坦率得有些鲁莽的后辈黛真知子这对“凹凸组合”一起解决疑难案件的故事。(摘自百度百科)</p>
<p>刚开始看，会觉得古美门就是个流氓律师，为了胜利不择手段，而真知子的做法好像更符合我们普罗大众对司法公正的理解。</p>
<p>而实际上，这体现了他们对待什么是公正和正义的两种态度。古美门律师体现<strong>合法期望</strong>，真知子律师体现<strong>道义应得</strong>。</p>
<ul>
<li><strong>合法期望</strong>：买彩票中奖并不是从道德上就应该中奖，而是一个合法的期望</li>
<li><strong>道义应得</strong>：竞技比赛中长期刻苦训练最后获得冠军的一方是道义应得</li>
</ul>
<a id="more"></a>
<p>(合法期望，道义应得，参考自<a href="https://www.zhihu.com/question/20995916/answer/21332600" target="_blank" rel="external">知乎答案</a>，如想详细了解，请访问知乎，这里不讨论这个)</p>
<h1 id="民意"><a href="#民意" class="headerlink" title="民意"></a>民意</h1><p>这里想说的是《Legel High》第二部的主线故事：</p>
<ul>
<li>被告安藤贵和的老公和孩子被发现死在家里</li>
<li>警方和检察院并没有直接证据证明凶手就是安藤贵和</li>
<li>但是安藤的前两任丈夫也都离奇自杀，安藤由此获得大额保险金</li>
<li>且安藤很漂亮，也很会俘获男人的心，也就是大家眼里的“狐狸精”</li>
</ul>
<p>你觉得安藤是凶手吗？</p>
<p>岔个话题，就上面的剧情，如果是港剧的话，应该是个神探破案剧！如果是美剧的话，可能是个高智商犯罪！如果是大陆剧的话。。。</p>
<p>《Legel High》从另一个角度来讨论了这个问题！<strong>民意</strong>!</p>
<p>什么是民意？<strong>人民群众的共同的、普遍的思想或意愿</strong>!通俗来说就是大部分人的看法！</p>
<p>剧中讨论的问题就是，<strong>大部分人的观点或看法就是正确的吗？</strong></p>
<p>古美门在最终审判中给出了如下陈述:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">真正的恶魔，正是无限膨胀的民意，是坚信自己是善人，对落入阴沟的肮脏野狗进行群殴的善良的市民。</div><div class="line"></div><div class="line">要是民意想判一个人死刑，那就判吧，因为说到底这一系列官司不过就是一场以绞死讨厌鬼为目的的国民运动，为了给自己无聊的人生消愁解闷的运动。</div><div class="line"></div><div class="line">如果民意可以决定一切，那就不需要这种拘泥于形式的建筑与郑重的手续，也不需要一脸傲慢的老头子和老太婆。“下判决”绝不是国民的调查问卷，而是法官决定的。</div></pre></td></tr></table></figure>
<p>我想这就是编剧的观点吧！</p>
<p>回到美国大选！各大媒体、各大财团都明确支持希拉里，调查显示也表明希拉里的支持率高，希拉里就是所谓的民意所向吧？而川普不就是现实版的安藤贵和？</p>
<p>而最终川普当选了，违背民意了，民众就不干了！开始游行了！恰恰印证了上面古美门的话：<strong>真正的恶魔，正是无限膨胀的民意!</strong></p>
<p><strong>民意</strong>影响了<strong>公正</strong></p>
<p>我们再回到<strong>公正</strong>上！</p>
<h1 id="公正"><a href="#公正" class="headerlink" title="公正"></a>公正</h1><p>民众为什么游行？他们认为川普不应该被选为总统，希拉里才应该当选！</p>
<p>我们先撇开这些，来看川普和希拉里。他们肯定都希望自己能当选总统吧？要不费这么大劲干嘛？这对他们来说应该是<strong>合法期望</strong>！再看川普当选后的民众反应，他们认为希拉里没有获得<strong>道义应得</strong>！</p>
<p>回想一下我们听得比较多的话，大概是这样的：</p>
<ul>
<li>好好学习，将来能找个好工作</li>
<li>努力工作，将来迎娶白富美</li>
<li>…</li>
</ul>
<p>模式大概就是“做了什么，就能得到什么”！典型的<strong>道义应得</strong>！对于这样的人，如果成功了，大家认为是应得的，而失败了，则替他们惋惜！而如果有人天天想着“我要中500w”，然后居然中了！大家的反应应该是“靠，走狗屎运了”！</p>
<p>而川普的胜利，恰恰就是某些人眼里所谓的“狗屎运”！这突破了我们所认知的所谓“公正”！活脱脱现实版的李狗嗨啊！</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>川普这个总统是美国大选所选出来的，不可能因为不符合“民意”就作废！</p>
<p>建立在“民意”之上的“公正”就是狗屎！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周美国大选终于落幕了，我没太关注，不过有几件事我印象比较深刻：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在第一次公开辩论后，twitter和主流媒体分别对此次辩论做了调查！twitter显示川普赢了，而主流媒体显示希拉里赢了。&lt;/li&gt;
&lt;li&gt;主流媒体，各大财团公开支持希拉里。而只有一家媒体公开支持川普&lt;/li&gt;
&lt;li&gt;大选开始前，希拉里已经准备庆祝烟花了，而川普已经基本放弃&lt;/li&gt;
&lt;li&gt;川普赢了以后，很多人举行游行，拒绝承认川普为总统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不由得想起之前刷的一部日剧《Legel High》，这个场景和《Legel High》第二部里的场景太类似了！&lt;/p&gt;
&lt;h1 id=&quot;李狗嗨&quot;&gt;&lt;a href=&quot;#李狗嗨&quot; class=&quot;headerlink&quot; title=&quot;李狗嗨&quot;&gt;&lt;/a&gt;李狗嗨&lt;/h1&gt;&lt;p&gt;网上流传的“李狗嗨”就是这部日剧的音译。该剧讲述的是官司胜诉率高达100%却性格偏执的律师古美门研介，和坦率得有些鲁莽的后辈黛真知子这对“凹凸组合”一起解决疑难案件的故事。(摘自百度百科)&lt;/p&gt;
&lt;p&gt;刚开始看，会觉得古美门就是个流氓律师，为了胜利不择手段，而真知子的做法好像更符合我们普罗大众对司法公正的理解。&lt;/p&gt;
&lt;p&gt;而实际上，这体现了他们对待什么是公正和正义的两种态度。古美门律师体现&lt;strong&gt;合法期望&lt;/strong&gt;，真知子律师体现&lt;strong&gt;道义应得&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;合法期望&lt;/strong&gt;：买彩票中奖并不是从道德上就应该中奖，而是一个合法的期望&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;道义应得&lt;/strong&gt;：竞技比赛中长期刻苦训练最后获得冠军的一方是道义应得&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="随笔" scheme="https://ivaneye.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>如何高效学习</title>
    <link href="https://ivaneye.com/2016/11/06/learn.html"/>
    <id>https://ivaneye.com/2016/11/06/learn.html</id>
    <published>2016-11-05T16:00:00.000Z</published>
    <updated>2016-12-30T12:52:28.549Z</updated>
    
    <content type="html"><![CDATA[<p>《如何高效学习》最近在网上好像比较火，主要原因还是作者很牛逼！作者叫斯科特•扬，他应用自己发明的学习方法，完成了10天搞定线性代数，1年学习4年MIT课程的“不可能任务”。这本书是对其学习方法的总结。</p>
<p>所以抽时间看了这本书，作者提出的学习方法称为“整体性学习法[Holistic learning]”(大致思路和我自己归纳总结的方法很类似)!不过有些地方并不赞同，下面再说！</p>
<p>首先吐槽下这本书的译者，哪来那么多的想法的？！是不评论会死星人吗？！每段都要加自己的观点，而且不是脚注，是直接跟在正文后面，看完整段后，发现后面三个字：“译者注”！这算不算骗稿费？！</p>
<h1 id="知识是有联系的"><a href="#知识是有联系的" class="headerlink" title="知识是有联系的"></a>知识是有联系的</h1><p>“整体性学习法”的大前提是：作者认为学会把知识联系起来会记得更多，学得更好！在《我最想要的记忆魔法书》里也有类似的观点！我只是说在”<strong>知识联系起来会记得更多</strong>“这个观点上，两者相同，但本质还是很不同的！举个例子：</p>
<p>在《我最想要的记忆魔法书》里，有个测试记忆水平的例子，作者给出了一组没什么关系的单词，看在三分钟之内能按顺序记住多少！你可以试试，单词如下:</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">小提琴       合唱团       铅笔</div><div class="line">武士         红鲱鱼(herring)       邮票</div><div class="line">箱子         文件        彩虹</div><div class="line">项链         窗户        地毯</div><div class="line">雪球         桌子        桃子</div><div class="line">婴儿         皱纹        瓶塞</div><div class="line">面具         球          星球</div><div class="line">玫瑰         照片        杂志</div><div class="line">尖塔         大象        黄金</div><div class="line">姜           奖杯        手表</div></pre></td></tr></table></figure>
<p>你能记住多少呢？</p>
<p>书中给出的记忆方法是，充分发挥你的想象力，使用上面的词构成一个场景，不管这个场景是多么的不切实际(以前上学的时候，死记硬背的时候应该有不少人用过类似的方法吧？)！它强调的是将原本没有关系的“记忆内容”人为的串起来，可以说是“人造联想”！这种方法应该适合背单词。强调的是<strong>记忆</strong>！</p>
<p>而《如何高效学习》所说的“把知识联系起来”，更多的是为了<strong>理解</strong>！方法上是所谓的“类比”！</p>
<p><strong>类比</strong>：通过比较两件事情，清楚揭示二者之间的相似点，并将已知事物的特点，推衍到未知事物中，但两者不一定有实质上的同源性，其类比也不见得“合理”。(Wikipedia)</p>
<p>简单来说，类比就是<strong>通过已知事物来认知未知事物</strong>!</p>
<p>举个段子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">某人女友一直分不清油门和刹车，他对女友说：“你把离合器，油门</div><div class="line">和刹车想像成左脚，右脚和档！要停车就踩“档”！如果有色狼要袭击</div><div class="line">你，你踢他裤裆他停不停？！”</div></pre></td></tr></table></figure>
<p>如果以前你也分不清油门和刹车的话，现在能分清了没？</p>
<h1 id="整体性学习的结构"><a href="#整体性学习的结构" class="headerlink" title="整体性学习的结构"></a>整体性学习的结构</h1><p>作者将整体性学习分为三块：</p>
<ul>
<li><strong>结构</strong>：一系列紧密联系的知识</li>
<li><strong>模型</strong>：核心概念</li>
<li><strong>高速公路</strong>：不同知识之间的联系，也可以说是知识的外延</li>
</ul>
<p>大致思路就是，通过模型(核心概念)构建初始结构(就是先有一个整体轮廓)，再在后续的实践中来完善这个结构，再通过高速公路使得不同的结构之间产生联系(知识是有共性的)。</p>
<h1 id="整体性学习的步骤"><a href="#整体性学习的步骤" class="headerlink" title="整体性学习的步骤"></a>整体性学习的步骤</h1><p>同时书中给出了整体性学习步骤（交叉进行）：</p>
<ul>
<li><strong>获取</strong>：获取知识</li>
<li><strong>理解</strong>：理解知识</li>
<li><strong>拓展</strong>：知识外延</li>
<li><strong>纠错</strong>：通过各种反馈来修正</li>
<li><strong>应用</strong>：实践</li>
</ul>
<p>针对各个步骤书中给出了具体的方法。比如怎么阅读啦，怎么理解啦，怎么纠错啦。有兴趣可以自己看书。</p>
<p>这里举个简单的例子，就是上面的“红鲱鱼”这个单词！</p>
<ul>
<li><p><strong>获取</strong></p>
<p>  我看到了“红鲱鱼”这个单词，知道了有“红鲱鱼”这么个东西</p>
</li>
<li><p><strong>理解</strong></p>
<p>  第一印象，“鲱鱼”应该是一种鱼类，“红鲱鱼”应该是一种红色的“鲱鱼”！到网上去搜一下，发现“鲱鱼”确实是一种鱼类！</p>
</li>
<li><p><strong>纠错</strong></p>
<p>  但是呢，“红鲱鱼”可不是一种红色的“鲱鱼”！“红鲱鱼”是英文习语。指以修辞或文学的手法转移议题焦点与注意力，是一种政治宣传、公关及戏剧创作的技巧。同时，你会发现，“红鲱鱼”英文应该写作“Red Herring”！而在《我最想要的记忆魔法书》里将“herring”翻译成了“红鲱鱼”，说明这里是译者犯的一个错误（不过，如果没翻译错误，我也不会知道“红鲱鱼”是习语～）！</p>
</li>
<li><p><strong>拓展</strong></p>
<p>  “红鲱鱼”当成转移焦点的代名词有几种不同的起源。其中的一种认为当初反打猎人士为了混淆猎犬的嗅觉，所以在猎场中四处放置烟熏过的鲱鱼，借此转移猎犬的注意力；另外一种说法则认为是监狱逃犯为了诱骗追缉的警犬，所以在逃跑的路程外放置红鲱鱼，借此顺利逃脱。</p>
<p>  “红鲱鱼”可以用在文学、戏剧，尤其是推理小说的创作上，通常代表误导读者思路的诱饵，让读者在看到结局之前，误以为某人或某事件为凶手或破案关键。</p>
<p>   “红鲱鱼”在公关与政治宣传上也经常被使用，利用新的事件或曲解议题，将群众的注意力移开原先关注的议题上。红鲱鱼常用来处理政府或企业面临的危机，在危机发生的时候抛出另外一个不相干的议题；或是配合“乐队花车”技巧，混淆群众。</p>
</li>
<li><p><strong>再理解（通过类比加深印象）</strong></p>
<p>  “红鲱鱼”很像魔术师的诱导，使得观众不会发现魔术师的“小动作”！“红鲱鱼”也很像是“烟雾弹”，但两者有细微的差异。“红鲱鱼”是刻意引入一个无关的议题以转移注意力；烟雾弹则是将主题搞得异常复杂而丧失焦点。</p>
</li>
<li><p><strong>应用</strong></p>
<p>  技术工作，好像暂时用不上～</p>
</li>
</ul>
<h1 id="关于阅读"><a href="#关于阅读" class="headerlink" title="关于阅读"></a>关于阅读</h1><p>关于阅读这一块，完全不认同作者的观点。第一句就严重不认同！作者认为：“如果读得快，那么获得的知识就多，这是常识”！以前我也这么认为，所以找了各种教快速阅读的书，收效甚微！</p>
<p>现在，我比较赞同李笑来的观点：<strong>读书不在于阅读速度，而在于理解速度</strong>！你读得再快，不理解，等于没读！</p>
<p>对于作者提到的几种阅读法，不认同作者推崇的“指读法”！</p>
<p>书中所提的“指读法”，就是用手指头指着，一行行的读。记得在上学的时候，老师就说过，不要用手指头，会带慢眼睛的速度。之前读的几本关于快速阅读的书也提到过不要用手指着读。而本书作者好像很推崇指读法！</p>
<p>我比较赞同的是《如何阅读一本书》里所说的四种阅读方式：基础阅读，检视阅读，分析阅读和主题阅读！听说和《批判性思维》更配哦～当然需要针对自身条件做调整！关于《如何阅读一本书》和《批判性思维》，后续整理!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《如何高效学习》最近在网上好像比较火，主要原因还是作者很牛逼！作者叫斯科特•扬，他应用自己发明的学习方法，完成了10天搞定线性代数，1年学习4年MIT课程的“不可能任务”。这本书是对其学习方法的总结。&lt;/p&gt;
&lt;p&gt;所以抽时间看了这本书，作者提出的学习方法称为“整体性学习法[Holistic learning]”(大致思路和我自己归纳总结的方法很类似)!不过有些地方并不赞同，下面再说！&lt;/p&gt;
&lt;p&gt;首先吐槽下这本书的译者，哪来那么多的想法的？！是不评论会死星人吗？！每段都要加自己的观点，而且不是脚注，是直接跟在正文后面，看完整段后，发现后面三个字：“译者注”！这算不算骗稿费？！&lt;/p&gt;
&lt;h1 id=&quot;知识是有联系的&quot;&gt;&lt;a href=&quot;#知识是有联系的&quot; class=&quot;headerlink&quot; title=&quot;知识是有联系的&quot;&gt;&lt;/a&gt;知识是有联系的&lt;/h1&gt;&lt;p&gt;“整体性学习法”的大前提是：作者认为学会把知识联系起来会记得更多，学得更好！在《我最想要的记忆魔法书》里也有类似的观点！我只是说在”&lt;strong&gt;知识联系起来会记得更多&lt;/strong&gt;“这个观点上，两者相同，但本质还是很不同的！举个例子：&lt;/p&gt;
&lt;p&gt;在《我最想要的记忆魔法书》里，有个测试记忆水平的例子，作者给出了一组没什么关系的单词，看在三分钟之内能按顺序记住多少！你可以试试，单词如下:&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://ivaneye.com/categories/book/"/>
    
    
      <category term="book" scheme="https://ivaneye.com/tags/book/"/>
    
      <category term="read" scheme="https://ivaneye.com/tags/read/"/>
    
  </entry>
  
  <entry>
    <title>与机器赛跑</title>
    <link href="https://ivaneye.com/2016/11/01/machine.html"/>
    <id>https://ivaneye.com/2016/11/01/machine.html</id>
    <published>2016-10-31T16:00:00.000Z</published>
    <updated>2016-12-30T12:51:44.401Z</updated>
    
    <content type="html"><![CDATA[<p>上周抽时间把《与机器赛跑》这本书刷完了，总体结论还是挺乐观的！聊聊自己的看法！</p>
<h1 id="技术大爆发"><a href="#技术大爆发" class="headerlink" title="技术大爆发"></a>技术大爆发</h1><p>今年上半年比较火的一件事就是2016年3月9日起，谷歌开发的AlphaGo 与世界顶级围棋手李世石的比赛了，结果是4:1，AlphaGo碾压李世石！</p>
<p>而早在1997年5月，IBM深蓝计算机就击败了国际象棋世界冠军卡斯巴罗夫。当时人们还确认计算机搞不定围棋，可是20年不到，就被打脸了！</p>
<p>其实只要稍微注意一下，就可以发现近几年频频有类似的新闻！例如：3D打印机的出现，谷歌无人驾驶，特斯拉将无人驾驶商用，亚马逊、京东、菜鸟物流的自动化仓储机器人，富士康流水线使用机器人，中国也发布了自动汽车发展规划，等等等等</p>
<p>而相对的，我们人类的境况好像就差了很多。不看《与机器赛跑》里举的美国的例子，就看我们周围的例子。什么今年高考人数又减了多少，创新低。大学生失业率增加了多少，创新低。富士康裁员了。实体企业又有多少家关门了。。。。好像自07、08年金融危机以后，就没有什么好消息（房市就算了，其实也不算什么好消息）！</p>
<a id="more"></a>
<p>那这种情况是金融危机导致的吗？书中的观点是金融危机使这些问题显现了出来，即使没有金融危机，这些事情迟早也会发生！</p>
<p>针对美国失业率高的问题，书中给出了三种不同的解释：周期性、停滞和“工作的终结”。对中国应该也有效！</p>
<ul>
<li>周期性一说认为，这事儿完全不新鲜，不神奇；美国失业率这么高，完全是因为经济发展速度还不够快，不足以把人们送回职场。</li>
<li>“停滞”指的是，美国的创新能力，以及生产率的提高速度陷入了长期衰退。此一解释还有另一种版本。该版本认为不是美国停滞了，而是中国和印度等其他国家开始迎头赶上。在全球化经济中，如果美国的企业和工人生产效率不能比其他国家的同行更快，就无法获得溢价。</li>
<li>第三种解释：正是因为技术创新的步伐太快，才把许许多多的人抛在了后面。简而言之，好多工人，在跟机器的赛跑中出了局。</li>
</ul>
<p>作者支持第三种解释！并解释了，为什么技术革新在这段时间里爆发！而不是在之前某个时间里发生！</p>
<h1 id="摩尔定律与棋盘下半场"><a href="#摩尔定律与棋盘下半场" class="headerlink" title="摩尔定律与棋盘下半场"></a>摩尔定律与棋盘下半场</h1><ul>
<li>摩尔定律：摩尔定律大家应该都很熟悉了。由英特尔创始人之一戈登·摩尔提出。 其内容为：集成电路上可容纳的電晶体（晶体管）数目，约每隔24个月便会增加一倍；后来修正为18个月翻一倍</li>
<li>棋盘下半场：这个故事大家也很熟悉。国王为了奖励国际象棋的发明者，愿意给其任何想要的东西。于是发明者就让国王在国际象棋棋盘上第一个格子上放1粒米，第二个格子上放两粒米，第三个格子上放四粒米，依次类推，放满整个棋盘。</li>
</ul>
<p>当到下半场时，米粒的增长速率就非常的快，在下半场的第一格，也就是第33格，需要放置2^32粒米，大概是42亿粒，假设每粒米重0.02克，42亿粒米，大概就是84吨，假设每亩地产500公斤大米的话，那大概就相当于150亩地的产量。后面每一格都翻倍，累计效应非常的惊人。</p>
<p>而目前技术发展正进入棋盘下半场。书中作者给出解释：1958年，美国经济分析局将“信息技术”列入了商业投资类别，作者认为这可以算成起始年，根据摩尔定律，每18个月，集成晶管数量翻倍。国际象棋到达第32个格子标志着上半场结束进入下半场。而晶体管数量翻32倍，也就是过去了48年：2006年。</p>
<p>前面所说的技术的发展就得到了解释。</p>
<h1 id="技术性失业"><a href="#技术性失业" class="headerlink" title="技术性失业"></a>技术性失业</h1><p>由于我们新发现了大量减少使用劳动力的手段，而又尚未及时地给劳动力找到新的用途，如此导致的失业，称为<strong>技术性失业</strong></p>
<p>就以上面的自动驾驶为例。特斯拉全系都支持自动驾驶了，中国也发布了自动汽车发展规划，在不远的将来，自动驾驶绝对会普及。</p>
<p>自动驾驶普及后会发生什么？出租车还需要司机了吗？恐怖的大货车还需要司机吗？再进一步讲，我们还需要养车吗？还需要为停车位和堵车烦恼吗？</p>
<p>我们可以想象一下，以后我们的出行会是什么样的情形？拿出手机，预约行程，一辆汽车就会在你预订的时间内到达你指定的地点来接你，你上车后，汽车自动规划最优路线（如果所有的汽车都联网，那所有路线数据都上传到云端，通过云端计算，整体规划线路，达到真正的路线最优），将你送达到目的地，然后自己去接下一位乘客。</p>
<p>如果再加上电池产业的发展，电动车完全替代燃油车。会有多少产业会被颠覆，多少人会因此而失业？！</p>
<h1 id="与机器共舞"><a href="#与机器共舞" class="headerlink" title="与机器共舞"></a>与机器共舞</h1><p>目前来看，人类是无法阻止技术的发展的！那如何避免上面的悲剧呢？</p>
<p>想想我们为什么要发展技术？是为了减轻我们的负担，技术再牛，也有不擅长的,例如：给出一张图片，分辨出图片是什么，这对人来说太简单了，目前的技术却办不到(准确率不高)！更何况它只是工具！我们要利用技术进行互补。</p>
<p>比如上面说的象棋比赛，现在发展为人+机器的比赛，人给机器编写好的算法，来赢得比赛。而对围棋来说，棋局太过复杂，可能一个专业的棋手穷其一生也不一定能记住所有的棋局，但是现在可以利用电脑来辅助，来突破人类的极限。</p>
<p>之前看到一篇文章，说人类对大脑的开发程度1%都不到！所以我们的大脑(应该是思维)才是我们最强有力的武器！技术的发展是在强迫我们突破现有的思维模式和框架！</p>
<p>说到底，<strong>技术只是辅助</strong>!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周抽时间把《与机器赛跑》这本书刷完了，总体结论还是挺乐观的！聊聊自己的看法！&lt;/p&gt;
&lt;h1 id=&quot;技术大爆发&quot;&gt;&lt;a href=&quot;#技术大爆发&quot; class=&quot;headerlink&quot; title=&quot;技术大爆发&quot;&gt;&lt;/a&gt;技术大爆发&lt;/h1&gt;&lt;p&gt;今年上半年比较火的一件事就是2016年3月9日起，谷歌开发的AlphaGo 与世界顶级围棋手李世石的比赛了，结果是4:1，AlphaGo碾压李世石！&lt;/p&gt;
&lt;p&gt;而早在1997年5月，IBM深蓝计算机就击败了国际象棋世界冠军卡斯巴罗夫。当时人们还确认计算机搞不定围棋，可是20年不到，就被打脸了！&lt;/p&gt;
&lt;p&gt;其实只要稍微注意一下，就可以发现近几年频频有类似的新闻！例如：3D打印机的出现，谷歌无人驾驶，特斯拉将无人驾驶商用，亚马逊、京东、菜鸟物流的自动化仓储机器人，富士康流水线使用机器人，中国也发布了自动汽车发展规划，等等等等&lt;/p&gt;
&lt;p&gt;而相对的，我们人类的境况好像就差了很多。不看《与机器赛跑》里举的美国的例子，就看我们周围的例子。什么今年高考人数又减了多少，创新低。大学生失业率增加了多少，创新低。富士康裁员了。实体企业又有多少家关门了。。。。好像自07、08年金融危机以后，就没有什么好消息（房市就算了，其实也不算什么好消息）！&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://ivaneye.com/categories/book/"/>
    
    
      <category term="book" scheme="https://ivaneye.com/tags/book/"/>
    
      <category term="read" scheme="https://ivaneye.com/tags/read/"/>
    
  </entry>
  
  <entry>
    <title>平均薪酬×××，你拖后腿了吗？</title>
    <link href="https://ivaneye.com/2016/10/30/salary.html"/>
    <id>https://ivaneye.com/2016/10/30/salary.html</id>
    <published>2016-10-29T16:00:00.000Z</published>
    <updated>2016-12-30T12:56:07.180Z</updated>
    
    <content type="html"><![CDATA[<p>现在每隔一段时间，都会报个这样的新闻《全国××主要城市平均薪酬××××元 你拖后腿了么？》，都快成姨妈新闻了！而后面的评论也是清一色的，“对不起祖国，拖到大腿根部了！”</p>
<p>周末没事，专门搜了一下类似的新闻。发现大部分数据都来自智联招聘！那数据的准确性就要打三个问号了！</p>
<h1 id="平均数"><a href="#平均数" class="headerlink" title="平均数"></a>平均数</h1><p>第一个疑问是“平均”！标题是平均薪酬，而在文中并没有提到是如何计算的(以前我也不会考虑这个问题，天真的以为“平均数”，不就是总和/数量吗？在《批判性思维》《统计数字会说谎》里面都提到过这个问题)！到底是计算的平均数，中位数，还是众数？</p>
<p><strong>平均数</strong>：一组数据的总和除以这组数据个数所得到的商叫这组数据的平均数。</p>
<p><strong>中位数</strong>：将一组数据按大小顺序排列，处在最中间位置的一个数叫做这组数据的中位数 。</p>
<p><strong>众数</strong>：在一组数据中出现次数最多的数叫做这组数据的众数。</p>
<a id="more"></a>
<p>举个很简单的例子就可以看出不同了。假如有5个人在智联招聘找到工作，工资分别是1k,1k,6k,6.1k,6.3k!那这5个人的平均数是”1k+1K+6K+6.1k+6.3k/5=4.08k”,中位数是6k,众数是1k!</p>
<p>如果你是智联招聘，你会放哪个数据出来？</p>
<h1 id="广告嫌疑"><a href="#广告嫌疑" class="headerlink" title="广告嫌疑"></a>广告嫌疑</h1><p>第二个疑问就是广告嫌疑了！考虑到智联招聘是招聘网站，也是需要流量的，薪资高的话，相当于就是变相的向需要找工作的人打广告，就像说“快到智联招聘来投简历吧，看在我网站找的工作的薪资多高！”！从这个角度看，你觉得放哪个数据合适呢？</p>
<h1 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h1><p>第三就是数据来源，智联招聘是综合性招聘网站没错，但是还是有地区限制，以及还有很多其他垂直性的招聘网站！这就导致数据的来源并不能算是“随机”的！比如说，家政类的工作的话，可能会在58、赶集比较多;高端类的职位的话，现在可能有猎聘网或直接内部推荐！这就导致类似这样的样本数据在智联招聘上偏少，导致最终样本无效！</p>
<p>在之前个税调整的时候，有新闻表示：个税起征点至3500元，缴税人群减少约6千万。这个数据据说是财政部给出的，如果这个数据没错的话，那就是说2000～3500这个工资档位的人有6000万!而这部分人有多少人在智联招聘找工作的？不得而知了！</p>
<p>所以，总体而言，对这个数据，只有呵呵了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在每隔一段时间，都会报个这样的新闻《全国××主要城市平均薪酬××××元 你拖后腿了么？》，都快成姨妈新闻了！而后面的评论也是清一色的，“对不起祖国，拖到大腿根部了！”&lt;/p&gt;
&lt;p&gt;周末没事，专门搜了一下类似的新闻。发现大部分数据都来自智联招聘！那数据的准确性就要打三个问号了！&lt;/p&gt;
&lt;h1 id=&quot;平均数&quot;&gt;&lt;a href=&quot;#平均数&quot; class=&quot;headerlink&quot; title=&quot;平均数&quot;&gt;&lt;/a&gt;平均数&lt;/h1&gt;&lt;p&gt;第一个疑问是“平均”！标题是平均薪酬，而在文中并没有提到是如何计算的(以前我也不会考虑这个问题，天真的以为“平均数”，不就是总和/数量吗？在《批判性思维》《统计数字会说谎》里面都提到过这个问题)！到底是计算的平均数，中位数，还是众数？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平均数&lt;/strong&gt;：一组数据的总和除以这组数据个数所得到的商叫这组数据的平均数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中位数&lt;/strong&gt;：将一组数据按大小顺序排列，处在最中间位置的一个数叫做这组数据的中位数 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;众数&lt;/strong&gt;：在一组数据中出现次数最多的数叫做这组数据的众数。&lt;/p&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="随笔" scheme="https://ivaneye.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>评李笑来的知乎live</title>
    <link href="https://ivaneye.com/2016/10/20/zhihulive.html"/>
    <id>https://ivaneye.com/2016/10/20/zhihulive.html</id>
    <published>2016-10-19T16:00:00.000Z</published>
    <updated>2016-12-30T12:56:00.252Z</updated>
    
    <content type="html"><![CDATA[<p>昨天参加了李笑来的知乎live《一小时建立终生受用的阅读操作系统》。为什么参加呢？主要是想了解下知乎live是怎么玩的。正好看到李笑来的这个live很便宜，才1块钱，就买了。</p>
<p>虽然很便宜，还是抱着学习的态度听的。结果是把他的书《把时间当作朋友》和《新生-七年就是一辈子》里的一部分抽出来，的吧的吧炒了一个小时冷饭！主要观点还是那么几个：</p>
<ul>
<li>概念很重要，要死磕概念</li>
<li>要有逻辑思维能力—形式逻辑，非形式逻辑，认知误差修正</li>
<li>区分事实和观点</li>
<li>读书不在快，在理解</li>
<li>要积累</li>
</ul>
<p>而这几个概念，你从《如何阅读一本书》和《批判性思维》里面都能获取到。</p>
<p>对于提问者的问题，也基本没有好好回答！只给个答案，其他自己想去吧！</p>
<p>听说李笑来好像是网上看到有人引用他的“学习学习再学习”，一看挺简洁、挺有想法的一句话，后来又了解到他的《把时间当作朋友》很火，就专门去网上把他的几本书都看了一遍。看完感觉并没有网上说的那么好。原因可能是，我之前看过前面提的两本书，而他的书可以说是对前面两本书的实践。</p>
<a id="more"></a>
<p>他在《把时间当作朋友》里提出的主要观点是，<strong>时间不可管理，要管理的是自己</strong>。其实和市面上的时间管理类书籍没啥本质区别，都是在规划时间。他在书中特别推崇一本书《奇特的一生》，说看了很多遍。很凑巧，我也看过，我一句话评价一下这本书：“流水帐的方式讲述了一个记流水帐的人”！书的内容也可以用一句话讲完：“一个叫柳比歇夫的人，以流水帐的方式记录了他每天的事情，不断优化调优后，充分利用时间，在很多领域都有了很大的成就”！到底怎么充分利用时间的呢？书中没提，因为作者也不知道！！！如果看过一些理财书籍的话，应该对上面的方法有点眼熟吧？就是那些理财书籍里面说的记流水帐，统计钱到底花哪里去了，哪些该花，哪些不该花，进行优化，是一样一样的！但是有多少人做了呢？<strong>重在执行</strong>！也就是李笑来所说的“践行”！发现他也挺喜欢“发明”新词的！</p>
<p>从他的书和知乎live里，我总感觉到他很强势！他说出一些概念想法，要你相信并去执行，对疑问不正面回答，说得最多的就是“自己想去吧”！好像就是“我把正确的东西都告诉你们了，你们去实践就行了，这些都是我实践过的，绝对没有问题的，不要有任何的质疑，有质疑也不会回答你”！这和他前面所说的“要有逻辑思维能力”相违背，别人思考了，有疑问，却不正面回答，让他们“践行”去！个体差异是很大的，一个人成功的经验，在另一个人身上不见得就会有效！而他的观点不就是“成功学”吗？！</p>
<p>再说说他的“得到”专栏，主题是“通往财富自由之路”！实际上主要讲的还是思维转变上的问题，而且方式很无语！其他专栏基本都是每天一更，他每周一更新个草稿，周二到周四讨论，然后周五出最终稿，周六抽奖。。抽奖。。抽奖！感觉一帮人掏钱帮忙改稿子了！现在比较庆幸，还好没买他的专栏！</p>
<p>总体而言，到目前为止我从他那里没学到什么有用的！不过后续还会关注，我是“实用主义者”！态度就是“有用的就吸收，没用的就扔掉”！你认为对的，我不一定认为对;你的理由说服不了我，或者干脆不说理由，我认为没用就直接扔掉，当然也会吐吐槽！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天参加了李笑来的知乎live《一小时建立终生受用的阅读操作系统》。为什么参加呢？主要是想了解下知乎live是怎么玩的。正好看到李笑来的这个live很便宜，才1块钱，就买了。&lt;/p&gt;
&lt;p&gt;虽然很便宜，还是抱着学习的态度听的。结果是把他的书《把时间当作朋友》和《新生-七年就是一辈子》里的一部分抽出来，的吧的吧炒了一个小时冷饭！主要观点还是那么几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概念很重要，要死磕概念&lt;/li&gt;
&lt;li&gt;要有逻辑思维能力—形式逻辑，非形式逻辑，认知误差修正&lt;/li&gt;
&lt;li&gt;区分事实和观点&lt;/li&gt;
&lt;li&gt;读书不在快，在理解&lt;/li&gt;
&lt;li&gt;要积累&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而这几个概念，你从《如何阅读一本书》和《批判性思维》里面都能获取到。&lt;/p&gt;
&lt;p&gt;对于提问者的问题，也基本没有好好回答！只给个答案，其他自己想去吧！&lt;/p&gt;
&lt;p&gt;听说李笑来好像是网上看到有人引用他的“学习学习再学习”，一看挺简洁、挺有想法的一句话，后来又了解到他的《把时间当作朋友》很火，就专门去网上把他的几本书都看了一遍。看完感觉并没有网上说的那么好。原因可能是，我之前看过前面提的两本书，而他的书可以说是对前面两本书的实践。&lt;/p&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>内向也是一种优势</title>
    <link href="https://ivaneye.com/2016/10/16/introvert.html"/>
    <id>https://ivaneye.com/2016/10/16/introvert.html</id>
    <published>2016-10-15T16:00:00.000Z</published>
    <updated>2016-12-30T12:51:35.937Z</updated>
    
    <content type="html"><![CDATA[<p>周末读了一本书《内向也是一种优势》，聊聊自己的想法！</p>
<h1 id="什么是内向？"><a href="#什么是内向？" class="headerlink" title="什么是内向？"></a>什么是内向？</h1><p>卡尔-古斯塔夫-荣格在1921年出版的《心理类型》一书中首次提出：内向型与外向型的特征（思维、感官、直觉、感觉）影响一个人的主要性格。但认为两种性格同要重要，同样有价值。他认为，内向与外向的性格是互补互助的，可以扩充对方看问题的角度，同时利用对方所拥有的新视角。</p>
<p>一直以来我认为的“内向”就是“不善言语、表达，特别是在公众场合，偏爱独处，比较自卑”。而实际上不善言语、表达除了“内向”有一部分原因外，主要还是缺少练习，<strong>表达、沟通、公众演讲都是可以习得的</strong>！</p>
<p>本书给出的“内向”“外向”的关键区别是：<strong>精力从哪里得到补充？</strong></p>
<p>作者认为“外向”的人通过朋友聚会等活动获得精力。而“内向”的人通过独处获得精力。作者将外向的人比作“风车”，外界交流沟通比作“风”，“风”吹动“风车”，“风车”亦可发电;而“内向”的人好比“蓄电池”，对外界时“放电”，放完电需要找个地方“充电”！</p>
<a id="more"></a>
<p>同时书中也从“大脑生理学”的角度给出了内向与外向的区别，来支持其“内向、外向的关键区别”的观点！</p>
<ul>
<li>内向者的大脑皮层前部比外向者的大脑皮层前部更加活跃，外部信息和内部反应在大脑皮层前部发生碰撞</li>
<li>内向者的大脑皮层中，血流量要多一些，且血流通道比外向者长—内向者受到刺激后，刺激在神经轨道上经过的反射时间远比外向者长</li>
<li>内向者和外向者的大脑受到不同的神经传输器的控制。外向者分泌的多巴胺多一些。内向者分泌的乙酰胆碱多一些</li>
<li>多巴胺控制的多是运动原动力、好奇心、追求变化以及渴望称赞的活动。乙酰胆碱控制的多是注意力、记忆力以及学习能力</li>
<li>植物性神经系统不同。“交感神经”支持身体的活动，需要“外向”的多巴胺。“副交感神经”负责安静、休息以及保护，需要“内向”的乙酰胆碱</li>
<li>外向者受交感神经控制多一点，内向者受“副交感神经”多一点</li>
<li>精力获取途径的不同，与植物性神经系统的不同有着必然联系</li>
</ul>
<h1 id="你内向吗？"><a href="#你内向吗？" class="headerlink" title="你内向吗？"></a>你内向吗？</h1><p>书中给出了一个测试，可以测试自己是否是内向性格！我不用测都知道自己很内向！就是这么有自知之明！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">1.在谈话的时候,如果对方回答问题的时间太长,很容易感到不耐烦。</div><div class="line">2.与一群人聊天感觉可不怎么样,更喜欢和一个人说说话。</div><div class="line">3.在别人面前,能清晰地表达自己的观点。</div><div class="line">4.如果周围很干净、很整洁,心情也会很舒畅。</div><div class="line">5.喜欢直接说出自己的观点,不需要太多的思考时间。</div><div class="line">6.感到疲惫的时候,喜欢退出,不再继续参与。</div><div class="line">7.那些说话太快的人,真是让人吃不消。</div><div class="line">8.有自己独特的品位。</div><div class="line">9.如果可以,会尽量避免接触人群。</div><div class="line">10.和陌生人聊天还是很容易的嘛!</div><div class="line">11.如果长时间在人群里待着,会感到疲惫不堪,甚至易怒。</div><div class="line">12.你说话的时候,别人总能仔细地聆听。</div><div class="line">13.如果家里来了客人,真希望他们能帮忙。</div><div class="line">14.做项目时,喜欢一部分一部分地处理,而不是很长一段时间处理一大部分。</div><div class="line">15.有时候,在经过几段谈话或者大声谈话后,会感到很疲惫。</div><div class="line">16.不需要太多朋友,但看重真正的、可靠的友谊。</div><div class="line">17.不会太考虑别人的想法。</div><div class="line">18.充足的睡眠是非常非常重要的。</div><div class="line">19.新的地方和环境真令人兴奋。</div><div class="line">20.不喜欢突然的打扰和不期而至的情况。</div><div class="line">21.大家认为我很安静、有些无聊、有距离感而且很腼腆。</div><div class="line">22.喜欢并注意细小的事情。</div><div class="line">23.喜欢说多于写。</div><div class="line">24.在做决定前,会提前咨询好。</div><div class="line">25.人与人之间紧张的关系,通常总是后知后觉。</div><div class="line">26.对美有深刻的感觉。</div><div class="line">27.有时会找借口不去参加一些活动或者不去某些社交场所。</div><div class="line">28.轻易地相信别人。</div><div class="line">29.喜欢思考,找出事情的前因后果。</div><div class="line">30.尽量避免在众人面前讲话。</div><div class="line">31.不太善于倾听。</div><div class="line">32.面对别人的期待,很容易感到有压力。</div><div class="line">33.采取武力解决人身攻击。</div><div class="line">34.自己独处很快就感到无聊。</div><div class="line">35.如果有什么值得庆祝的事情,喜欢举行庆祝会,或找上一大群人吃饭。</div></pre></td></tr></table></figure>
<ul>
<li>属于内向的人会选择“是”的答案是:2,6,7,9,11,15,16,20,21,22,24,27,29,30,32</li>
<li>属于外向的人会选择“是”的答案是:1,3,5,10,12,14,17,19,23,25,28,31,33,34,35</li>
<li>其中,4,8,13,18,26题和性格的判断没关系,是迷惑项。目的是不让大家陷入回答问题的模式。</li>
</ul>
<p>如果你的内向型选项比外向型选项多三个以上(包括三个),说明你是内向的人。内向型性格的答案选得越多,就越趋向于内向性格。如果你的内向型选项与外向型选项数量相当,前后不会相差两个,那么你是一个内向型兼外向型的人,可以叫作“中心体”或者是“双面体”。你和两类性格的人都可以相处得很好,行为非常灵活。如果你的外向型选项比内向型选项多三个(包括三个),说明你是一个外向的人。你对外向性格的答案选得越多,说明你就越趋向于外向性格。</p>
<p>我果不其然很内向！3：14！！！</p>
<p>内向性格也不必自卑！书中认为对内向性格的消极评价可能源于外向的弗洛伊德在关于纳粹注意的著作中描述了内向性格消极的一面，并赞扬了外向性格的健康与积极性！</p>
<p>所以让我们正是“内向”！来看看内向的优势与障碍！</p>
<h1 id="内向的优势与障碍"><a href="#内向的优势与障碍" class="headerlink" title="内向的优势与障碍"></a>内向的优势与障碍</h1><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>谨慎：做事谨慎;避免风险与冒险;细心观察;尊重他人;三思而后行;不难缠;能适度地谈论和自己相关的信息</li>
<li>看到本质：从自己的经验中获得深层次的东西;强调本质;介绍内容和联系意义、深度与质量;谈话内容丰富</li>
<li>集中：集中精力;能全身心投入到一件事，无论是内心还是外界设定的活动;持之以恒地做一件事;细心</li>
<li>善于倾听：从对方对信息、观点以及需求的表达中提取精华,与之完成对话</li>
<li>安静：内心的安静是集中精力、放松、内心清澈、找到自我本质的基础</li>
<li>分析式思考：有计划、有组织;能分析复杂的关系，并从中找到系统性的信息、观点、答案和方法</li>
<li>独立：独处;独立;有自己的原则，内心不遵从别人的看法;忘我</li>
<li>坚韧：为了完成一个目标，会用心且一鼓作气</li>
<li>书写代替言论：喜欢用书写的形式表达自己，而非口头表达</li>
<li>移情能力：可以设身处地地为自己的伙伴着想;很少与别人发生矛盾;把集体的利益放在首位;随时准备妥协;妥善的调节关系</li>
</ul>
<h2 id="障碍"><a href="#障碍" class="headerlink" title="障碍"></a>障碍</h2><ul>
<li>害怕：与别人交流时，总是羞怯或不自信</li>
<li>太注重细节：个别信息妨碍了一些事情的优先权或大局</li>
<li>易受刺激：在繁多的工作、吵闹的环境或快节奏的情况下，感觉受到了苛求</li>
<li>被动：没有自我鼓励性，停滞不前、固执己见</li>
<li>逃避：避免一些场合或任务</li>
<li>考虑太多：忽略自己的感受</li>
<li>自我否定：将内向的特点和需求看作负担，消极的评价</li>
<li>死板：在交际中不能灵活应对</li>
<li>避免接触：不愿意接触很多人</li>
<li>害怕矛盾：在压力下容易屈服或闭口不言</li>
</ul>
<h2 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h2><p>仔细看这十个优势和障碍！完全就是度的问题。过分的“谨慎”就是“害怕”！过分的“分析式思维”就是“考虑太多”！过分的“看到本质”就是“太注重细节”，……</p>
<p>照这个模式，完全可以列出外向者的优势和障碍！</p>
<ul>
<li>外向者的优势：<br>  胆大，顾虑少，有大局观，自信，不易受刺激，灵活，主动，善于交际，敢于冒险，不怕矛盾</li>
<li>外向者的障碍：<br>  不够谨慎，考虑不够，不注重细节，不够独立，不够集中，不够坚韧，不善于倾听，不善记录，无法静心思考，缺少移情能力</li>
</ul>
<p>实际上十个优势有重复的点！比如“谨慎”，“分析式思考”，“看到本质”。“谨慎”起见才会“分析式思考”继而“看到本质”啊！</p>
<h1 id="内向的本质"><a href="#内向的本质" class="headerlink" title="内向的本质"></a>内向的本质</h1><p>个人认为，内向与外向的本质区别是“<strong>思考度</strong>”！内向者偏向于思考出一个完整框架后再表达，而外向者偏向于思考出一个大致框架就表达，在表达或者讨论中再去完善这个框架！</p>
<p>“<strong>思考度</strong>”是我创造的词，即思考的深度、广度、完整度、缜密度等等！</p>
<p>如果思考过度了，就会陷入“太注重细节”，“考虑太多”障碍中！而考虑得太浅，在表达时就显得很“肤浅”！</p>
<h1 id="如何利用优势避免障碍"><a href="#如何利用优势避免障碍" class="headerlink" title="如何利用优势避免障碍"></a>如何利用优势避免障碍</h1><p>知道了优势和障碍后，我们就可以在现实生活中去利用优势、规避障碍！</p>
<ul>
<li>与外向的家人相处：协同好各自的差异。例如：什么时候讨论，什么时候你需要休息！</li>
<li>与内向的家人相处或独处：可能会缺少社交活动、缺少对新视角和新印象的体会，导致停滞不前。做一些计划避免上面的情况。比如每年尝试一个新爱好。每年去两个新地方等</li>
<li>与孩子相处：需要针对其内向或外向对其做出相应的引导，适度的夸奖，增强其自信心。协助处理相应的障碍</li>
</ul>
<p>对于谈判，报告，会议，和讨论，其实对内向者来说还是很有利的！事前利用自身优势做好充足的准备，而对于即时讨论，也可在前期准备时做好预演！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末读了一本书《内向也是一种优势》，聊聊自己的想法！&lt;/p&gt;
&lt;h1 id=&quot;什么是内向？&quot;&gt;&lt;a href=&quot;#什么是内向？&quot; class=&quot;headerlink&quot; title=&quot;什么是内向？&quot;&gt;&lt;/a&gt;什么是内向？&lt;/h1&gt;&lt;p&gt;卡尔-古斯塔夫-荣格在1921年出版的《心理类型》一书中首次提出：内向型与外向型的特征（思维、感官、直觉、感觉）影响一个人的主要性格。但认为两种性格同要重要，同样有价值。他认为，内向与外向的性格是互补互助的，可以扩充对方看问题的角度，同时利用对方所拥有的新视角。&lt;/p&gt;
&lt;p&gt;一直以来我认为的“内向”就是“不善言语、表达，特别是在公众场合，偏爱独处，比较自卑”。而实际上不善言语、表达除了“内向”有一部分原因外，主要还是缺少练习，&lt;strong&gt;表达、沟通、公众演讲都是可以习得的&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;本书给出的“内向”“外向”的关键区别是：&lt;strong&gt;精力从哪里得到补充？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作者认为“外向”的人通过朋友聚会等活动获得精力。而“内向”的人通过独处获得精力。作者将外向的人比作“风车”，外界交流沟通比作“风”，“风”吹动“风车”，“风车”亦可发电;而“内向”的人好比“蓄电池”，对外界时“放电”，放完电需要找个地方“充电”！&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://ivaneye.com/categories/book/"/>
    
    
      <category term="book" scheme="https://ivaneye.com/tags/book/"/>
    
      <category term="read" scheme="https://ivaneye.com/tags/read/"/>
    
  </entry>
  
  <entry>
    <title>10000小时</title>
    <link href="https://ivaneye.com/2016/10/12/10000hours.html"/>
    <id>https://ivaneye.com/2016/10/12/10000hours.html</id>
    <published>2016-10-11T16:00:00.000Z</published>
    <updated>2016-12-30T12:53:59.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10000小时理论"><a href="#10000小时理论" class="headerlink" title="10000小时理论"></a>10000小时理论</h1><p>前两天订阅了吴军博士的专栏，他这两天主要说了“伪工作者”和10000小时理论。“伪工作者”就是指那些看起来很忙，但是实际上没什么效率的人。而10000小时理论，就是格拉德威尔在《异类》里所说的，要精通某件事或某个领域，至少需要10000小时。这个理论应该都比较熟悉了。</p>
<p>对于10000小时理论，吴军博士首先提了大家对10000小时理解上的四个误区</p>
<ul>
<li>误区一：简单工作重复10000小时。这个不用多说了，大家应该都理解。</li>
<li>误区二：习惯性失败。好高鹜远，不注重学习，懒得总结教训;脸皮还薄，也不虚心请教。迷信失败是成功之母。而实际上没有总结和收获的失败没有任何意义。（不总结，脸皮薄是我的毛病。以后得脸皮厚点才行～）</li>
<li>误区三：林黛玉式的困境。太专而排外。类似大头针式的知识体系，没有外延。或者说知识有深度但是没广度。</li>
<li>误区四：狗熊掰棒子。就是不积累，前面的努力和后面的努力不在一个方向上，成果没有累积效应。</li>
</ul>
<a id="more"></a>
<p>接着给出了三板斧来破困境</p>
<ul>
<li>第一板斧：愿景-目标-道路。就是说要有愿景、定目标、制定计划、以及执行</li>
<li>第二板斧：即便遇到不中听的，也要试着找到其中的合理之处</li>
<li>第三板斧：凡事做记录</li>
</ul>
<h1 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h1><p>自己第一次接触到“10000小时”这个概念也是在几年前阅读《异类》这本书。吴军博士提出的几个问题，问题二，三，四自己身上都有，自己也都已经发现了，并在持续改进中。提出的三个解决方案，都赞同。但是对吴军博士针对第二个解决方案举的一个例子不赞同，他说如果一个人无缘无故骂你的时候，你也要去反思是不是哪里做得不好，当最终确认对方就是在胡说八道，也要思考他为什么这么说，找出其中的合理性。这我就无法理解了，既然都已经知道对方在胡说八道了，还要找什么合理性？为何要浪费时间做这件事？思考其他更有意义的事不是更好？！</p>
<p>知道吴军博士是当初看了他的《浪潮之巅》，其中他对各个公司以及趋势的分析，都有独特的见解，很佩服一个技术人员能有这样的眼界。所以在“得到APP”上看到他的专栏立马就订了！就前三天的内容来看，没有太多让我惊喜的内容。希望后面惊喜多多～</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;10000小时理论&quot;&gt;&lt;a href=&quot;#10000小时理论&quot; class=&quot;headerlink&quot; title=&quot;10000小时理论&quot;&gt;&lt;/a&gt;10000小时理论&lt;/h1&gt;&lt;p&gt;前两天订阅了吴军博士的专栏，他这两天主要说了“伪工作者”和10000小时理论。“伪工作者”就是指那些看起来很忙，但是实际上没什么效率的人。而10000小时理论，就是格拉德威尔在《异类》里所说的，要精通某件事或某个领域，至少需要10000小时。这个理论应该都比较熟悉了。&lt;/p&gt;
&lt;p&gt;对于10000小时理论，吴军博士首先提了大家对10000小时理解上的四个误区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;误区一：简单工作重复10000小时。这个不用多说了，大家应该都理解。&lt;/li&gt;
&lt;li&gt;误区二：习惯性失败。好高鹜远，不注重学习，懒得总结教训;脸皮还薄，也不虚心请教。迷信失败是成功之母。而实际上没有总结和收获的失败没有任何意义。（不总结，脸皮薄是我的毛病。以后得脸皮厚点才行～）&lt;/li&gt;
&lt;li&gt;误区三：林黛玉式的困境。太专而排外。类似大头针式的知识体系，没有外延。或者说知识有深度但是没广度。&lt;/li&gt;
&lt;li&gt;误区四：狗熊掰棒子。就是不积累，前面的努力和后面的努力不在一个方向上，成果没有累积效应。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
      <category term="concept" scheme="https://ivaneye.com/tags/concept/"/>
    
  </entry>
  
  <entry>
    <title>元认知</title>
    <link href="https://ivaneye.com/2016/10/11/metaknowledge.html"/>
    <id>https://ivaneye.com/2016/10/11/metaknowledge.html</id>
    <published>2016-10-10T16:00:00.000Z</published>
    <updated>2016-12-30T12:53:50.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是“元认知”"><a href="#什么是“元认知”" class="headerlink" title="什么是“元认知”"></a>什么是“元认知”</h1><p>“元认知”这个词应该第一次是听李笑来说的，他的解释是：“所谓的元认知，指的就是<strong>认知的认知</strong>。也就是说，你能认知到你的认知。当你在思考的时候，你能意识到自己在思考，进一步还能意识到自己在思考什么，又进一步还能判断自己的思考方式、思考结果是否正确，更进一步还能纠正自己错误的思考方式或者结果，这就是元认知能力。”</p>
<p>对一个软件从业者来说，这个词应该很容易理解！因为软件开发中有个很类似的词“元编程”！如果说“编程”就是“编写代码实现某个功能”的话，那么“元编程”就是“编写代码实现“编写代码实现某个功能”的功能”！！！更晕了？简单点说，“元编程”就是<strong>编写代码的代码</strong>！如果对“元编程”不了解，</p>
<a id="more"></a>
<p>举个现实中的例子：3D打印机。我们知道3D打印机现在可以打印各种东西，比如电灯、桌椅、甚至手枪！这里我们就可以把3D打印机看作是我们的大脑，3D打印机打印的过程就是我们认知这个世界的过程，打印电灯的过程就是我们认知电灯的过程，打印桌椅的过程就是我们认知桌椅的过程。好，现在我们有一个特殊的3D打印机，它打印什么呢？打印一个3D打印机！这个3D打印机我们就可以称为是“元3D打印机”！这个“元3D打印机”打印的过程，就是我们形成“认知”的过程！比如“元3D打印机”打印出的3D打印机可以打印桌子，那么“元3D打印机”打印的过程就是我们形成“如何打印桌子”这个“元认知”的过程，形成“元认知”后，就可以通过这个“元认知”来打印桌子了！</p>
<p>可以看出，“元认知”是“认知”的基础。如果“元认知”错了，那就可以说是我们常说的“概念错误”了！比如上面如果把“如何打印桌子”搞成了“如何打印椅子”，那打印出的3D打印机打出来的就是椅子了！</p>
<h1 id="如何形成自己的“元认知”"><a href="#如何形成自己的“元认知”" class="headerlink" title="如何形成自己的“元认知”"></a>如何形成自己的“元认知”</h1><p>说起来也很简单，多思考总结，形成自己的思维模式，再对思维模式进行实践，实践的过程中进行反馈，来完善思维模式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是“元认知”&quot;&gt;&lt;a href=&quot;#什么是“元认知”&quot; class=&quot;headerlink&quot; title=&quot;什么是“元认知”&quot;&gt;&lt;/a&gt;什么是“元认知”&lt;/h1&gt;&lt;p&gt;“元认知”这个词应该第一次是听李笑来说的，他的解释是：“所谓的元认知，指的就是&lt;strong&gt;认知的认知&lt;/strong&gt;。也就是说，你能认知到你的认知。当你在思考的时候，你能意识到自己在思考，进一步还能意识到自己在思考什么，又进一步还能判断自己的思考方式、思考结果是否正确，更进一步还能纠正自己错误的思考方式或者结果，这就是元认知能力。”&lt;/p&gt;
&lt;p&gt;对一个软件从业者来说，这个词应该很容易理解！因为软件开发中有个很类似的词“元编程”！如果说“编程”就是“编写代码实现某个功能”的话，那么“元编程”就是“编写代码实现“编写代码实现某个功能”的功能”！！！更晕了？简单点说，“元编程”就是&lt;strong&gt;编写代码的代码&lt;/strong&gt;！如果对“元编程”不了解，&lt;/p&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
      <category term="concept" scheme="https://ivaneye.com/tags/concept/"/>
    
  </entry>
  
  <entry>
    <title>你真的理解概念了吗？</title>
    <link href="https://ivaneye.com/2016/10/09/concept.html"/>
    <id>https://ivaneye.com/2016/10/09/concept.html</id>
    <published>2016-10-08T16:00:00.000Z</published>
    <updated>2016-12-30T12:55:44.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h1><p>前几天需要做个演讲，在演讲前和领导就PPT进行了沟通，沟通过程中明显感觉到了自己对概念理解的不够透彻，领导几个问题一问，原本感觉挺理所当然的字词、概念，就没法说清楚。比如就演讲的题目来说—《<em>*</em> 的演变》，什么是演变？什么是演？什么是变？什么发生了演变？为什么需要演变？一问才感觉自己思考得不够清楚！</p>
<p>再细想，发现在生活中我们好像也并不会太细究概念，感觉都是理所当然的。而且每个人对概念的理解都是有差异甚至是截然不同的，甚至是同一个人在不同的时间对概念的理解也会有不同。举个例子：</p>
<ul>
<li>学习</li>
</ul>
<p>学习是大家经常听到、也经常说的一个词吧？那你能解释一下什么是“学习”吗？</p>
<ul>
<li>如果你是个学生，你可能会认为学习就是上课、读书、做作业等等相关行为</li>
<li>如果你工作了，学习可能就是熟悉工作相关的内容</li>
<li>而可能有的人会认为学习就是去认知这个世界</li>
<li>甚至某人为了游戏通关去看游戏秘籍、泡网吧练微操，在他看来也是一种学习，但是可能在别人眼里就是不务正业了</li>
<li>等等等等</li>
</ul>
<a id="more"></a>
<p>现在再想一下，你真的理解概念了吗？你真的给人说明白了吗？别人真的听懂你所表达的意思了吗？</p>
<p>所以，我先来解释一下我所理解的“概念”！</p>
<h1 id="什么是“概念”"><a href="#什么是“概念”" class="headerlink" title="什么是“概念”"></a>什么是“概念”</h1><p>维基百科里的一个解释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">中华人民共和国国家标准：“概念”是对特征的独特组合而形成的知识单元。</div></pre></td></tr></table></figure>
<p>上面是“标准理解”。而我理解的概念是什么呢？</p>
<p>从“标准理解”里可以看出：</p>
<ul>
<li>概念是抽象的</li>
<li>反映了事物的共性</li>
</ul>
<p>我首先想到的是面向对象里面的“类”，类是一组对象的抽象，表示一类对象的共性，而对象相当于是对概念的不同理解。类组合成组件（概念组合成知识点），组件组合成子系统（知识点组合成知识面），子系统组合成整个系统（知识面组合成知识体系）。</p>
<p>对我来说，“概念”就是最小的不需要解释的字词！比如当你说“书”的时候，你就不需要解释“一种出版社出版的、带有封面、目录、内容的，能学习知识或休闲的纸质的或电子的东西”！</p>
<p>而我们的沟通，是建立在这些“概念”之上的！也就是说，两个人的概念交集越大，沟通就越容易！反之，越难沟通！所以我认为<strong>“概念”是我们沟通、建立知识体系最基本的单元。</strong></p>
<h1 id="如何理解概念？"><a href="#如何理解概念？" class="headerlink" title="如何理解概念？"></a>如何理解概念？</h1><p>知道了“概念”是什么。那我们如何来理解概念呢？</p>
<ul>
<li>首先需要对概念有自我认知，即有自己的一个理解。比如上面的“学习”</li>
<li>因为“学习”是一个过程，那可以通过实践，形成适合自己的方法论</li>
<li>将对“学习”的理解表达出来，通过别人的反馈，对其进行修正</li>
<li>在实践的过程中也可以对其进行修正</li>
<li>通过不断的积累，形成自己的知识点-》知识面-》知识体系</li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>我为什么会有上面的想法呢？因为我遇到了几个类似的例子！</p>
<ul>
<li>在和领导的沟通中，感觉他的思考方式是从一个概念出发，然后进行展开(上推和下探)</li>
<li>之前读了几本李笑来的书，他在书中也提到了类似的方法，从一个概念出发，来衍生出后续的知识</li>
<li>还有罗振宇在一期罗辑思维中也提到了类似的学习方法</li>
<li>再之前，我在知乎看了一篇关于如何一周内摸清一个行业，里面的思路也很类似，先学行业“黑话”，其实就是行业里的概念了。等等等等。</li>
<li>最后是个人在工作学习中的实践，确实有效</li>
</ul>
<p>在《如何阅读一本书》里，最后一种阅读方式—主题阅读。大致方法就是读一类书籍，总结出有共性的内容。这里套用一下，<strong>主题学习</strong>，观察比自己牛的人，总结出相似的思维模式、观点、认知，进行学习！<br>C执行流程</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;源起&quot;&gt;&lt;a href=&quot;#源起&quot; class=&quot;headerlink&quot; title=&quot;源起&quot;&gt;&lt;/a&gt;源起&lt;/h1&gt;&lt;p&gt;前几天需要做个演讲，在演讲前和领导就PPT进行了沟通，沟通过程中明显感觉到了自己对概念理解的不够透彻，领导几个问题一问，原本感觉挺理所当然的字词、概念，就没法说清楚。比如就演讲的题目来说—《&lt;em&gt;*&lt;/em&gt; 的演变》，什么是演变？什么是演？什么是变？什么发生了演变？为什么需要演变？一问才感觉自己思考得不够清楚！&lt;/p&gt;
&lt;p&gt;再细想，发现在生活中我们好像也并不会太细究概念，感觉都是理所当然的。而且每个人对概念的理解都是有差异甚至是截然不同的，甚至是同一个人在不同的时间对概念的理解也会有不同。举个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习是大家经常听到、也经常说的一个词吧？那你能解释一下什么是“学习”吗？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你是个学生，你可能会认为学习就是上课、读书、做作业等等相关行为&lt;/li&gt;
&lt;li&gt;如果你工作了，学习可能就是熟悉工作相关的内容&lt;/li&gt;
&lt;li&gt;而可能有的人会认为学习就是去认知这个世界&lt;/li&gt;
&lt;li&gt;甚至某人为了游戏通关去看游戏秘籍、泡网吧练微操，在他看来也是一种学习，但是可能在别人眼里就是不务正业了&lt;/li&gt;
&lt;li&gt;等等等等&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
      <category term="concept" scheme="https://ivaneye.com/tags/concept/"/>
    
  </entry>
  
  <entry>
    <title>函数式思维的小例子</title>
    <link href="https://ivaneye.com/2016/08/14/function.html"/>
    <id>https://ivaneye.com/2016/08/14/function.html</id>
    <published>2016-08-13T16:00:00.000Z</published>
    <updated>2016-12-30T12:58:33.784Z</updated>
    
    <content type="html"><![CDATA[<p>最近写了一个简单的客户端，用来模拟服务化框架的客户端调用，功能如下:</p>
<ul>
<li>随机调用服务</li>
<li>打印服务结果</li>
<li>10%的几率较少访问量(假设1个并发)，10%几率高访问量(假设100个并发)，80%几率正常访问量(假设10个并发)</li>
<li>打印各个访问量情况下的服务调用总时间</li>
</ul>
<p>分别尝试了Java和Clojure实现，在实现过程中，两者的思路完全不同！</p>
<h1 id="面向对象-面向过程语言思路"><a href="#面向对象-面向过程语言思路" class="headerlink" title="面向对象/面向过程语言思路"></a>面向对象/面向过程语言思路</h1><p>逻辑很简单，基本不涉及面向对象概念，主要还是面向过程语言的思路！</p>
<p>如果使用Java来实现，那么大致的思路是这样的:</p>
<ul>
<li>首先需要一个随机数生成器，基于这个随机数生成器来构建随机调用逻辑</li>
<li>随机调用服务就是判断随机数大小，例如:0~1的随机数范围，大于0.5访问服务A,否则访问服务B</li>
<li>并发量判定则可以依据0~10的随机数范围，小于等于1时并发为1，大于等于9时并发为100，否则并发为10</li>
<li>在每个服务调用完成后，统计执行时间，然后汇总就可以了</li>
</ul>
<a id="more"></a>
<p>下面是Java实现的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomCall</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">4</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> rand = (<span class="keyword">int</span>)(Math.random() * <span class="number">10</span>);</div><div class="line">            <span class="keyword">if</span> (rand &gt;= <span class="number">9</span>) &#123;</div><div class="line">                call(<span class="number">100</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rand &lt;= <span class="number">1</span>) &#123;</div><div class="line">                call(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                call(<span class="number">10</span>);</div><div class="line">            &#125;</div><div class="line">            Thread.sleep(<span class="number">1000L</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">final</span> AtomicLong total = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</div><div class="line">        <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">                    <span class="keyword">if</span> ((<span class="keyword">int</span>)(Math.random() * <span class="number">2</span>) &gt; <span class="number">1</span>) &#123;</div><div class="line">                        System.out.println(callServiceA());</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        System.out.println(callServiceB());</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    total.addAndGet(System.currentTimeMillis() - start);</div><div class="line"></div><div class="line">                    latch.countDown();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        latch.await();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Invoke "</span> + n + <span class="string">":"</span> + total + <span class="string">" ms"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码没什么好说的，对ExecutorService,Executors以及CountDownLatch不熟悉的请自行Google。</p>
<h1 id="函数式语言思路"><a href="#函数式语言思路" class="headerlink" title="函数式语言思路"></a>函数式语言思路</h1><p>函数式语言的思路和上面的思路差异很大！</p>
<p>函数式语言通过提供大量的函数来操作少量的数据结构来完成逻辑。</p>
<p>所以其大致思路就是构建相应的数据结构，然后使用提供的操作函数来对其进行操作。</p>
<p>对于“随机调用服务”这个需求，我们可以把它看成是有一个序列，随机排列着需要调用的服务！</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;定义一个包含了所调用服务的Vector</span></div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> fns [call-serviceA call-serviceB])</div><div class="line"><span class="comment">;依据上面的Vector构建一个随机排列的服务序列</span></div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> rand-infinite-fns (<span class="name">repeatedly</span> #(<span class="name"><span class="builtin-name">get</span></span> fns (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> fns count rand int))))</div></pre></td></tr></table></figure>
<p>简单解释下最后一行代码:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">;;-&gt;&gt;是个宏，是为了方便代码阅读</div><div class="line">(-&gt;&gt; fns count rand int)</div><div class="line">;;等价于</div><div class="line">(int (rand (count fns)))</div><div class="line">;;从最里面那个括号往外读：</div><div class="line">;;1 获取fns这个Vector的长度</div><div class="line">;;2 以这个长度为随机数范围(0,length)产生随机数</div><div class="line">;;3 并取整</div><div class="line"></div><div class="line">#(get fns ...)</div><div class="line">;#(...)表示匿名函数，是个语法糖，等价于</div><div class="line">(fn [] (get fns ...))</div><div class="line"></div><div class="line">(get fns ...)</div><div class="line">;就是依据上面的随机数，从fns这个Vector中获取元素</div><div class="line"></div><div class="line">(repeatedly ...)</div><div class="line">;就是字面意思，不停的重复，结果构建成一个LazySeq</div><div class="line">;LazySeq就是在需要时才执行</div></pre></td></tr></table></figure>
<p>理解了上面的代码，我们是不是可以以同样的逻辑，构建一个随机1、10、100的LazySeq来实现随机并发的逻辑呢？</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> arr [<span class="number">1</span> <span class="number">10</span> <span class="number">100</span>])</div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> rand-infinite-arr (<span class="name">repeatedly</span> #(<span class="name"><span class="builtin-name">get</span></span> arr (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> arr count rand int))))</div></pre></td></tr></table></figure>
<p>很简单吧？那么问题来了：</p>
<ul>
<li>目前这个LazySeq是平均概率的分布着1、10、100，和需求不符合</li>
<li>第二行代码和前面的逻辑一模一样，是不是可以重构成函数</li>
</ul>
<p>第一个问题有思路吗？可以先想想。</p>
<p>其实很简单</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">def</span></span> arr [<span class="number">1</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">100</span>])</div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> rand-infinite-arr (<span class="name">repeatedly</span> #(<span class="name"><span class="builtin-name">get</span></span> arr (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> arr count rand int))))</div></pre></td></tr></table></figure>
<p>这样是不是就符合要求了？</p>
<p>再进一步对第二行代码重构为函数:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> rand-infinite [vec]</div><div class="line">    (<span class="name">repeatedly</span> #(<span class="name"><span class="builtin-name">get</span></span> vec (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> vec count rand int))))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> fns [call-serviceA call-serviceB])</div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> arr [<span class="number">1</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">100</span>])</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> rand-infinite-fns (<span class="name">rand-infinite</span> fns))</div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> rand-infinite-arr (<span class="name">rand-infinite</span> arr))</div></pre></td></tr></table></figure>
<ul>
<li>rand-infinite-fns中是随机调用的函数</li>
<li>rand-infinite-arr中是随机的并发数</li>
</ul>
<p>现在我们只要从rand-infinite-arr中依次取出元素，然后根据元素的值来构建相同数量的线程来进行调用就可以了！由于是无限序列，所以间接实现了死循环！</p>
<p>举个例子:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">;;假设现在rand-infinite-fns中元素如下</span></div><div class="line">[call-serviceA call-serviceA call-serviceB call-serviceA ...]</div><div class="line"><span class="comment">;;rand-infinite-arr中元素如下</span></div><div class="line">[<span class="number">10</span> <span class="number">1</span> <span class="number">10</span> <span class="number">100</span> <span class="number">10</span> <span class="number">10</span> <span class="number">1</span> ...]</div><div class="line"><span class="comment">;;rand-infinite-arr的第一个元素是10,</span></div><div class="line"><span class="comment">;;则从rand-infinite-fns中取10个元素，构建10个线程去调用</span></div><div class="line"><span class="comment">;;rand-infinite-arr的第二个元素是1,</span></div><div class="line"><span class="comment">;;则从rand-infinite-fns的第11个函数开始，去一个函数去调用</span></div><div class="line"><span class="comment">;;以此类推</span></div></pre></td></tr></table></figure>
<p>第一印象是递归,Clojure代码实现如下:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">loop</span></span> [rand-fns (<span class="name">rand-infinite</span> fns)</div><div class="line">       nums (<span class="name">rand-infinite</span> arr)]</div><div class="line">       ...</div><div class="line">       (<span class="name"><span class="builtin-name">recur</span></span> (<span class="name"><span class="builtin-name">drop</span></span> (<span class="name"><span class="builtin-name">first</span></span> nums) rand-fns)</div><div class="line">              (<span class="name"><span class="builtin-name">drop</span></span> <span class="number">1</span> nums)))</div></pre></td></tr></table></figure>
<p>最后就是构建线程进行函数调用</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">time</span></span> (<span class="name">println</span> (<span class="name">pmap</span> #(%) (<span class="name"><span class="builtin-name">take</span></span> (<span class="name"><span class="builtin-name">first</span></span> nums) rand-fns)))</div><div class="line"><span class="comment">;;pmap就是将#(% obj)这个函数依次应用到后面的序列上，并且是并发的</span></div><div class="line"><span class="comment">;;time函数打印出执行所需要的时间</span></div><div class="line"><span class="comment">;;(take (first nums) rand-fns)就是依据nums元素的大小，获取相应数量的rand-fns的元素</span></div><div class="line"><span class="comment">;;rand-fns中的元素是函数，直接放在括号里的第一个元素就可以执行了，这里是替换了那个%</span></div></pre></td></tr></table></figure>
<p>实际上可以更进一步，上面的流程，相当于遍历下面这个链表:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[call-serviceA] [call-serviceA call-serviceB ...] [call-serviceB] [call-serviceB call-serviceA ...] ...]</div></pre></td></tr></table></figure>
<p>所以只需要构建类似上面的链表结构就可以了，Clojure里很简单:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(let [rand-fns (rand-infinite fns)</div><div class="line">       rand-arr (rand-infinite arr)</div><div class="line">       group-rand-fns (map #(take % rand-fns) rand-arr)]</div><div class="line">       ...))</div><div class="line">;;group-rand-fns就是我们需要的链表结构</div></pre></td></tr></table></figure>
<p>最后只要遍历这个链表就可以了:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> invoke [fns]</div><div class="line">    (<span class="name">Thread/sleep</span> <span class="number">1000</span>)</div><div class="line">    (<span class="name"><span class="builtin-name">time</span></span> (<span class="name">println</span> (<span class="name">pmap</span> #(%) fns))))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> -main [&amp; args]</div><div class="line">    (<span class="name"><span class="builtin-name">let</span></span> [rand-fns (<span class="name">rand-infinite</span> fns)</div><div class="line">           rand-arr (<span class="name">rand-infinite</span> arr)</div><div class="line">           group-rand-fns (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name"><span class="builtin-name">take</span></span> % rand-fns) rand-arr)]</div><div class="line">           (<span class="name"><span class="builtin-name">doall</span></span> (<span class="name"><span class="builtin-name">map</span></span> invoke group-rand-fns))))</div><div class="line"><span class="comment">;;doall表示立即执行，因为map出来的链表是lazySeq,这里的map相当于外层循环，对每个内部链表应用invoke函数</span></div><div class="line"><span class="comment">;;invoke内部是内层循环，每隔1秒就并发调用链表中的函数</span></div></pre></td></tr></table></figure>
<p>完整代码如下:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> rand-infinite [vec]</div><div class="line">    (<span class="name">repeatedly</span> #(<span class="name"><span class="builtin-name">get</span></span> vec (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> vec count rand int))))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> fns [call-serviceA call-serviceB])</div><div class="line">(<span class="name"><span class="builtin-name">def</span></span> arr [<span class="number">1</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">100</span>])</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> invoke [fns]</div><div class="line">    (<span class="name">Thread/sleep</span> <span class="number">1000</span>)</div><div class="line">    (<span class="name"><span class="builtin-name">time</span></span> (<span class="name">println</span> (<span class="name">pmap</span> #(%) fns))))</div><div class="line"></div><div class="line">(<span class="name"><span class="builtin-name">defn</span></span> -main [&amp; args]</div><div class="line">    (<span class="name"><span class="builtin-name">let</span></span> [rand-fns (<span class="name">rand-infinite</span> fns)</div><div class="line">           rand-arr (<span class="name">rand-infinite</span> arr)</div><div class="line">           group-rand-fns (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name"><span class="builtin-name">take</span></span> % rand-fns) rand-arr)]</div><div class="line">           (<span class="name"><span class="builtin-name">doall</span></span> (<span class="name"><span class="builtin-name">map</span></span> invoke group-rand-fns))))</div></pre></td></tr></table></figure>
<h1 id="Java8实现"><a href="#Java8实现" class="headerlink" title="Java8实现"></a>Java8实现</h1><p>Java8提供了lambda表达式等功能，支持函数式编程，下面使用Java8实现，直接贴代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomCall</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Function&lt;Supplier&lt;String&gt;,Long&gt; func = sup -&gt; &#123;</div><div class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">            sup.get();</div><div class="line">            <span class="keyword">return</span> System.currentTimeMillis() - start;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        Supplier&lt;String&gt; serviceASup = () -&gt; callServiceA();</div><div class="line">        Supplier&lt;String&gt; serviceBSup = () -&gt; callServiceB();</div><div class="line"></div><div class="line">        List&lt;Supplier&lt;String&gt;&gt; fns = Arrays.asList(serviceASup,serviceBSup);</div><div class="line">        List&lt;Integer&gt; arr = Arrays.asList(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line">        Stream.generate(() -&gt; (<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>)).map(arr::get)</div><div class="line">              .forEach(n -&gt; &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000L</span>);</div><div class="line"></div><div class="line">                    System.out.println(Stream.generate(() -&gt; (<span class="keyword">int</span>) (Math.random() * <span class="number">2</span>)).map(fns::get).limit(n)</div><div class="line">                    .parallel().mapToLong(func::apply).sum());</div><div class="line">              &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>最终代码，Clojure明显少于Java、略少于Java8。在代码表现力上Clojure &gt; Java8 &gt; Java</li>
<li>函数式思路和过程式思路差异很大</li>
<li>在编写Clojure代码时，明显是偏脑力的劳动。而在编写Java的时候，明显是偏体力的劳动</li>
<li>编写Clojure代码，如果不多思考，则写出来的代码将比Java要难读得多</li>
<li>Java8代码比Clojure代码可读性上感觉更差(可能自己对Java8的函数式思路还不太了解)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写了一个简单的客户端，用来模拟服务化框架的客户端调用，功能如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机调用服务&lt;/li&gt;
&lt;li&gt;打印服务结果&lt;/li&gt;
&lt;li&gt;10%的几率较少访问量(假设1个并发)，10%几率高访问量(假设100个并发)，80%几率正常访问量(假设10个并发)&lt;/li&gt;
&lt;li&gt;打印各个访问量情况下的服务调用总时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分别尝试了Java和Clojure实现，在实现过程中，两者的思路完全不同！&lt;/p&gt;
&lt;h1 id=&quot;面向对象-面向过程语言思路&quot;&gt;&lt;a href=&quot;#面向对象-面向过程语言思路&quot; class=&quot;headerlink&quot; title=&quot;面向对象/面向过程语言思路&quot;&gt;&lt;/a&gt;面向对象/面向过程语言思路&lt;/h1&gt;&lt;p&gt;逻辑很简单，基本不涉及面向对象概念，主要还是面向过程语言的思路！&lt;/p&gt;
&lt;p&gt;如果使用Java来实现，那么大致的思路是这样的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先需要一个随机数生成器，基于这个随机数生成器来构建随机调用逻辑&lt;/li&gt;
&lt;li&gt;随机调用服务就是判断随机数大小，例如:0~1的随机数范围，大于0.5访问服务A,否则访问服务B&lt;/li&gt;
&lt;li&gt;并发量判定则可以依据0~10的随机数范围，小于等于1时并发为1，大于等于9时并发为100，否则并发为10&lt;/li&gt;
&lt;li&gt;在每个服务调用完成后，统计执行时间，然后汇总就可以了&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="code" scheme="https://ivaneye.com/categories/code/"/>
    
    
      <category term="java" scheme="https://ivaneye.com/tags/java/"/>
    
      <category term="clojure" scheme="https://ivaneye.com/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>高性能Server---Reactor模型</title>
    <link href="https://ivaneye.com/2016/07/23/iomodel.html"/>
    <id>https://ivaneye.com/2016/07/23/iomodel.html</id>
    <published>2016-07-22T16:00:00.000Z</published>
    <updated>2016-12-30T13:07:04.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无处不在的C-S架构"><a href="#无处不在的C-S架构" class="headerlink" title="无处不在的C/S架构"></a>无处不在的C/S架构</h2><p>在这个充斥着云的时代,我们使用的软件可以说99%都是C/S架构的！</p>
<ul>
<li>你发邮件用的Outlook,Foxmail等</li>
<li>你看视频用的优酷，土豆等</li>
<li>你写文档用的Office365,googleDoc，Evernote等</li>
<li>你浏览网页用的IE,Chrome等(B/S是特殊的C/S)</li>
<li>……</li>
</ul>
<p>C/S架构的软件带来的一个明显的好处就是：只要有网络，你可以在任何地方干同一件事。</p>
<p>例如：你在家里使用Office365编写了文档。到了公司，只要打开编辑地址就可以看到在家里编写的文档，进行展示或者继续编辑。甚至在手机上进行阅读与编辑。不再需要U盘拷来拷去了。</p>
<p>C/S架构可以抽象为如下模型：</p>
<p><img src="/assets/iomodel/client-server.png" alt=""></p>
<ul>
<li>C就是Client(客户端),上面的B是Browser(浏览器)</li>
<li>S就是Server(服务器)：<strong>服务器管理某种资源，并且通过操作这种资源来为它的客户端提供某种服务</strong></li>
</ul>
<p>C/S架构之所以能够流行的一个主要原因就是网速的提高以及费用的降低，特别是无线网络速度的提高。试想在2G时代，大家最多就是看看文字网页，小说什么的。看图片，那简直就是奢侈！更别说看视频了！</p>
<p>网速的提高，使得越来越多的人使用网络，例如：优酷，微信都是上亿用户量，更别说天猫双11的瞬间访问量了！这就对服务器有很高的要求！能够快速处理海量的用户请求！那服务器如何能快速的处理用户的请求呢？</p>
<a id="more"></a>
<h2 id="高性能服务器"><a href="#高性能服务器" class="headerlink" title="高性能服务器"></a>高性能服务器</h2><p>高性能服务器至少要满足如下几个需求：</p>
<ul>
<li>效率高：既然是高性能，那处理客户端请求的效率当然要很高了</li>
<li>高可用：不能随便就挂掉了</li>
<li>编程简单：基于此服务器进行业务开发需要足够简单</li>
<li>可扩展：可方便的扩展功能</li>
<li>可伸缩：可简单的通过部署的方式进行容量的伸缩，也就是服务需要无状态</li>
</ul>
<p>而满足如上需求的一个基础就是高性能的IO!</p>
<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>无论你是发邮件，浏览网页，还是看视频～实际底层都是使用的TCP/IP，而TCP/IP的编程抽象就是Socket!</p>
<p>我一直对Socket的中文翻译很困惑，个人觉得是我所接触的技术名词翻译里最莫名其妙的，没有之一！</p>
<p>Socket中文翻译为”套接字”！什么鬼？在很长的时间里我都无法将其和网络编程关联上！后来专门找了一些资料，最后在知乎上找到了一个还算满意的答案(具体链接，请见文末的参考资料链接)！</p>
<p>Socket的原意是插口，想表达的意思是插口与插槽的关系！”send socket”插到”receive socket”里，建立了链接，然后就可以通信了！</p>
<p>套接字的翻译，应该是参考了套接管(如下图)！从这个层面上来看，是有那么点意思！</p>
<p><img src="/assets/iomodel/套接管.jpg" alt=""></p>
<p>套接字这个翻译已经是标准了，不纠结这个了！</p>
<p>我们看一下Socket之间建立链接及通信的过程！实际上就是对TCP/IP连接与通信过程的抽象:</p>
<p><img src="/assets/iomodel/socket.png" alt=""></p>
<ul>
<li>服务端Socket会bind到指定的端口上，Listen客户端的”插入”</li>
<li>客户端Socket会Connect到服务端</li>
<li>当服务端Accept到客户端连接后</li>
<li>就可以进行发送与接收消息了</li>
<li>通信完成后即可Close</li>
</ul>
<p>对于IO来说，我们听得比较多的是:</p>
<ul>
<li>BIO:阻塞IO</li>
<li>NIO:非阻塞IO</li>
<li>同步IO</li>
<li>异步IO</li>
</ul>
<p>以及其组合:</p>
<ul>
<li>同步阻塞IO</li>
<li>同步非阻塞IO</li>
<li>异步阻塞IO</li>
<li>异步非阻塞IO</li>
</ul>
<p><strong>那么什么是阻塞IO、非阻塞IO、同步IO、异步IO呢？</strong></p>
<ul>
<li>一个IO操作其实分成了两个步骤：发起IO请求和实际的IO操作</li>
<li>阻塞IO和非阻塞IO的区别在于第一步：发起IO请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞IO;如果不阻塞，那么就是非阻塞IO</li>
<li>同步IO和异步IO的区别就在于第二个步骤是否阻塞，如果实际的IO读写阻塞请求进程，那么就是同步IO，因此阻塞IO、非阻塞IO、IO复用、信号驱动IO都是同步IO;如果不阻塞，而是操作系统帮你做完IO操作再将结果返回给你，那么就是异步IO</li>
</ul>
<p>举个不太恰当的例子 ：比如你家网络断了，你打电话去中国电信报修！</p>
<ul>
<li>你拨号—客户端连接服务器</li>
<li>电话通了—连接建立</li>
<li>你说：“我家网断了,帮我修下”—发送消息</li>
<li>说完你就在那里等，那么就是阻塞IO</li>
<li>如果正好你有事，你放下带电话，然后处理其他事情了，过一会你来问下，修好了没—那就是非阻塞IO</li>
<li>如果客服说：“马上帮你处理，你稍等”—同步IO</li>
<li>如果客服说：“马上帮你处理，好了通知你”，然后挂了电话—异步IO</li>
</ul>
<p>本文只讨论BIO和NIO,AIO使用度没有前两者普及，暂不讨论！</p>
<p>下面从代码层面看看BIO与NIO的流程!</p>
<h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><ul>
<li>客户端代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Bind,Connect</span></div><div class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">7777</span>);    </div><div class="line"><span class="comment">//读写</span></div><div class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(client.getOutputStream());</div><div class="line">BufferedReader br=</div><div class="line">        <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));  </div><div class="line">pw.write(br.readLine());  </div><div class="line"><span class="comment">//Close</span></div><div class="line">pw.close();  </div><div class="line">br.close();</div></pre></td></tr></table></figure>
<ul>
<li>服务端代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Socket socket;  </div><div class="line"><span class="comment">//Bind,Listen</span></div><div class="line">ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">7777</span>);  </div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </div><div class="line">    <span class="comment">//Accept</span></div><div class="line">    socket = ss.accept();  </div><div class="line">    <span class="comment">//一般新建一个线程执行读写</span></div><div class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(</div><div class="line">            <span class="keyword">new</span> InputStreamReader(socket  .getInputStream()));  </div><div class="line">    System.out.println(<span class="string">"you input is : "</span> + br.readLine());  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面的代码可以说是学习Java的Socket的入门级代码了</li>
<li>代码流程和前面的图可以一一对上</li>
</ul>
<p>模型图如下所示：</p>
<p><img src="/assets/iomodel/bio.png" alt=""></p>
<h2 id="BIO优缺点"><a href="#BIO优缺点" class="headerlink" title="BIO优缺点"></a>BIO优缺点</h2><ul>
<li>优点<ul>
<li>模型简单</li>
<li>编码简单</li>
</ul>
</li>
<li>缺点<ul>
<li>性能瓶颈低</li>
</ul>
</li>
</ul>
<p>优缺点很明显。这里主要说下缺点：主要瓶颈在线程上。每个连接都会建立一个线程。虽然线程消耗比进程小，但是一台机器实际上能建立的有效线程有限，以Java来说，1.5以后，一个线程大致消耗1M内存！且随着线程数量的增加，CPU切换线程上下文的消耗也随之增加，在高过某个阀值后，继续增加线程，性能不增反降！而同样因为一个连接就新建一个线程，所以编码模型很简单！</p>
<p>就性能瓶颈这一点，就确定了BIO并不适合进行高性能服务器的开发！像Tomcat这样的Web服务器，从7开始就从BIO改成了NIO，来提高服务器性能！</p>
<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><ul>
<li>NIO客户端代码(连接)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取socket通道</span></div><div class="line">SocketChannel channel = SocketChannel.open();        </div><div class="line">channel.configureBlocking(<span class="keyword">false</span>);</div><div class="line"><span class="comment">//获得通道管理器</span></div><div class="line">selector=Selector.open();        </div><div class="line">channel.connect(<span class="keyword">new</span> InetSocketAddress(serverIp, port));</div><div class="line"><span class="comment">//为该通道注册SelectionKey.OP_CONNECT事件</span></div><div class="line">channel.register(selector, SelectionKey.OP_CONNECT);</div></pre></td></tr></table></figure>
<ul>
<li>NIO客户端代码(监听)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">    <span class="comment">//选择注册过的io操作的事件(第一次为SelectionKey.OP_CONNECT)</span></div><div class="line">   selector.select();</div><div class="line">   <span class="keyword">while</span>(SelectionKey key : selector.selectedKeys())&#123;</div><div class="line">       <span class="keyword">if</span>(key.isConnectable())&#123;</div><div class="line">           SocketChannel channel=(SocketChannel)key.channel();</div><div class="line">           <span class="keyword">if</span>(channel.isConnectionPending())&#123;</div><div class="line">               channel.finishConnect();<span class="comment">//如果正在连接，则完成连接</span></div><div class="line">           &#125;</div><div class="line">           channel.register(selector, SelectionKey.OP_READ);</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable())&#123; <span class="comment">//有可读数据事件。</span></div><div class="line">           SocketChannel channel = (SocketChannel)key.channel();</div><div class="line">           ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</div><div class="line">           channel.read(buffer);</div><div class="line">           <span class="keyword">byte</span>[] data = buffer.array();</div><div class="line">           String message = <span class="keyword">new</span> String(data);</div><div class="line">           System.out.println(<span class="string">"recevie message from server:, size:"</span></div><div class="line">               + buffer.position() + <span class="string">" msg: "</span> + message);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>NIO服务端代码(连接)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取一个ServerSocket通道</span></div><div class="line">ServerSocketChannel serverChannel = ServerSocketChannel.open();</div><div class="line">serverChannel.configureBlocking(<span class="keyword">false</span>);</div><div class="line">serverChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(port));</div><div class="line"><span class="comment">//获取通道管理器</span></div><div class="line">selector = Selector.open();</div><div class="line"><span class="comment">//将通道管理器与通道绑定，并为该通道注册SelectionKey.OP_ACCEPT事件，</span></div><div class="line">serverChannel.register(selector, SelectionKey.OP_ACCEPT);</div></pre></td></tr></table></figure>
<ul>
<li>NIO服务端代码(监听)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">    <span class="comment">//当有注册的事件到达时，方法返回，否则阻塞。</span></div><div class="line">   selector.select();</div><div class="line">   <span class="keyword">for</span>(SelectionKey key : selector.selectedKeys())&#123;</div><div class="line">       <span class="keyword">if</span>(key.isAcceptable())&#123;</div><div class="line">           ServerSocketChannel server =</div><div class="line">                (ServerSocketChannel)key.channel();</div><div class="line">           SocketChannel channel = server.accept();</div><div class="line">           channel.write(ByteBuffer.wrap(</div><div class="line">            <span class="keyword">new</span> String(<span class="string">"send message to client"</span>).getBytes()));</div><div class="line">           <span class="comment">//在与客户端连接成功后，为客户端通道注册SelectionKey.OP_READ事件。</span></div><div class="line">           channel.register(selector, SelectionKey.OP_READ);</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable())&#123;<span class="comment">//有可读数据事件</span></div><div class="line">           SocketChannel channel = (SocketChannel)key.channel();</div><div class="line">           ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</div><div class="line">           <span class="keyword">int</span> read = channel.read(buffer);</div><div class="line">           <span class="keyword">byte</span>[] data = buffer.array();</div><div class="line">           String message = <span class="keyword">new</span> String(data);</div><div class="line">           System.out.println(<span class="string">"receive message from client, size:"</span></div><div class="line">               + buffer.position() + <span class="string">" msg: "</span> + message);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>NIO模型示例如下：</p>
<p><img src="/assets/iomodel/nio.png" alt=""></p>
<ul>
<li>Acceptor注册Selector，监听accept事件</li>
<li>当客户端连接后，触发accept事件</li>
<li>服务器构建对应的Channel，并在其上注册Selector，监听读写事件</li>
<li>当发生读写事件后，进行相应的读写处理</li>
</ul>
<h2 id="NIO优缺点"><a href="#NIO优缺点" class="headerlink" title="NIO优缺点"></a>NIO优缺点</h2><ul>
<li>优点<ul>
<li>性能瓶颈高</li>
</ul>
</li>
<li>缺点<ul>
<li>模型复杂</li>
<li>编码复杂</li>
<li>需处理半包问题</li>
</ul>
</li>
</ul>
<p>NIO的优缺点和BIO就完全相反了!性能高，不用一个连接就建一个线程，可以一个线程处理所有的连接！相应的，编码就复杂很多，从上面的代码就可以明显体会到了。还有一个问题，由于是非阻塞的，应用无法知道什么时候消息读完了，就存在了半包问题！</p>
<h2 id="半包问题"><a href="#半包问题" class="headerlink" title="半包问题"></a>半包问题</h2><p>简单看一下下面的图就能理解半包问题了！</p>
<p><img src="/assets/iomodel/package01.png" alt=""></p>
<p><img src="/assets/iomodel/package02.png" alt=""></p>
<p>我们知道TCP/IP在发送消息的时候，可能会拆包(如上图1)！这就导致接收端无法知道什么时候收到的数据是一个完整的数据。例如:发送端分别发送了ABC,DEF,GHI三条信息，发送时被拆成了AB,CDRFG,H,I这四个包进行发送，接受端如何将其进行还原呢？在BIO模型中，当读不到数据后会阻塞，而NIO中不会!所以需要自行进行处理!例如，以换行符作为判断依据，或者定长消息发生，或者自定义协议！</p>
<p>NIO虽然性能高，但是编码复杂，且需要处理半包问题！为了方便的进行NIO开发，就有了Reactor模型!</p>
<h2 id="Reactor模型"><a href="#Reactor模型" class="headerlink" title="Reactor模型"></a>Reactor模型</h2><ul>
<li>AWT Events</li>
</ul>
<p><img src="/assets/iomodel/awt.jpg" alt=""></p>
<p>Reactor模型和AWT事件模型很像，就是将消息放到了一个队列中，通过异步线程池对其进行消费！</p>
<h3 id="Reactor中的组件"><a href="#Reactor中的组件" class="headerlink" title="Reactor中的组件"></a>Reactor中的组件</h3><ul>
<li>Reactor:Reactor是IO事件的派发者。</li>
<li>Acceptor:Acceptor接受client连接，建立对应client的Handler，并向Reactor注册此Handler。</li>
<li>Handler:和一个client通讯的实体，按这样的过程实现业务的处理。一般在基本的Handler基础上还会有更进一步的层次划分， 用来抽象诸如decode，process和encoder这些过程。比如对Web Server而言，decode通常是HTTP请求的解析， process的过程会进一步涉及到Listener和Servlet的调用。业务逻辑的处理在Reactor模式里被分散的IO事件所打破， 所以Handler需要有适当的机制在所需的信息还不全（读到一半）的时候保存上下文，并在下一次IO事件到来的时候（另一半可读了）能继续中断的处理。为了简化设计，Handler通常被设计成状态机，按GoF的state pattern来实现。</li>
</ul>
<p>对应上面的NIO代码来看:</p>
<ul>
<li>Reactor：相当于有分发功能的Selector</li>
<li>Acceptor：NIO中建立连接的那个判断分支</li>
<li>Handler：消息读写处理等操作类</li>
</ul>
<p>Reactor从线程池和Reactor的选择上可以细分为如下几种：</p>
<h3 id="Reactor单线程模型"><a href="#Reactor单线程模型" class="headerlink" title="Reactor单线程模型"></a>Reactor单线程模型</h3><p><img src="/assets/iomodel/reactor1.png" alt=""></p>
<p>这个模型和上面的NIO流程很类似，只是将消息相关处理独立到了Handler中去了！</p>
<p>虽然上面说到NIO一个线程就可以支持所有的IO处理。但是瓶颈也是显而易见的！我们看一个客户端的情况，如果这个客户端多次进行请求，如果在Handler中的处理速度较慢，那么后续的客户端请求都会被积压，导致响应变慢！所以引入了Reactor多线程模型!</p>
<h3 id="Reactor多线程模型"><a href="#Reactor多线程模型" class="headerlink" title="Reactor多线程模型"></a>Reactor多线程模型</h3><p><img src="/assets/iomodel/reactor2.png" alt=""></p>
<p>Reactor多线程模型就是将Handler中的IO操作和非IO操作分开，操作IO的线程称为IO线程，非IO操作的线程称为工作线程!这样的话，客户端的请求会直接被丢到线程池中，客户端发送请求就不会堵塞！</p>
<p>但是当用户进一步增加的时候，Reactor会出现瓶颈！因为Reactor既要处理IO操作请求，又要响应连接请求！为了分担Reactor的负担，所以引入了主从Reactor模型!</p>
<h3 id="主从Reactor模型"><a href="#主从Reactor模型" class="headerlink" title="主从Reactor模型"></a>主从Reactor模型</h3><p><img src="/assets/iomodel/reactor3.png" alt=""></p>
<p>主Reactor用于响应连接请求，从Reactor用于处理IO操作请求！</p>
<h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p>Netty是一个高性能NIO框架，其是对Reactor模型的一个实现！</p>
<ul>
<li>Netty客户端代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Bootstrap b = <span class="keyword">new</span> Bootstrap();</div><div class="line">    b.group(workerGroup);</div><div class="line">    b.channel(NioSocketChannel.class);</div><div class="line">    b.option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</div><div class="line">    b.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            ch.pipeline().addLast(<span class="keyword">new</span> TimeClientHandler());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    ChannelFuture f = b.connect(host, port).sync();</div><div class="line"></div><div class="line">    f.channel().closeFuture().sync();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    workerGroup.shutdownGracefully();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Netty Client Handler</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</div><div class="line">        ByteBuf m = (ByteBuf) msg;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> currentTimeMillis =</div><div class="line">                (m.readUnsignedInt() - <span class="number">2208988800L</span>) * <span class="number">1000L</span>;</div><div class="line">            System.out.println(<span class="keyword">new</span> Date(currentTimeMillis));</div><div class="line">            ctx.close();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            m.release();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx,</span></span></div><div class="line">                Throwable cause) &#123;</div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Netty服务端代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">    b.group(bossGroup, workerGroup)</div><div class="line">     .channel(NioServerSocketChannel.class)</div><div class="line">     .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">             ch.pipeline().addLast(<span class="keyword">new</span> TimeServerHandler());</div><div class="line">         &#125;</div><div class="line">     &#125;)</div><div class="line">     .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)  </div><div class="line">     .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// Bind and start to accept incoming connections.</span></div><div class="line">    ChannelFuture f = b.bind(port).sync();</div><div class="line">    f.channel().closeFuture().sync();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    workerGroup.shutdownGracefully();</div><div class="line">    bossGroup.shutdownGracefully();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Netty Server Handler</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ByteBuf time = ctx.alloc().buffer(<span class="number">4</span>);</div><div class="line">        time.writeInt((<span class="keyword">int</span>)</div><div class="line">            (System.currentTimeMillis() / <span class="number">1000L</span> + <span class="number">2208988800L</span>));</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ChannelFuture f = ctx.writeAndFlush(time);</div><div class="line">        f.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> </span>&#123;</div><div class="line">                <span class="keyword">assert</span> f == future;</div><div class="line">                ctx.close();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx,</span></span></div><div class="line">        Throwable cause) &#123;</div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们从Netty服务器代码来看，与Reactor模型进行对应！</p>
<ul>
<li>EventLoopGroup就相当于是Reactor，bossGroup对应主Reactor,workerGroup对应从Reactor</li>
<li>TimeServerHandler就是Handler</li>
<li>child开头的方法配置的是客户端channel，非child开头的方法配置的是服务端channel</li>
</ul>
<p>具体Netty内容，请访问<a href="http://netty.io/" target="_blank" rel="external">Netty官网</a>！</p>
<h2 id="Netty的问题"><a href="#Netty的问题" class="headerlink" title="Netty的问题"></a>Netty的问题</h2><p>Netty开发中一个很明显的问题就是回调，一是打破了线性编码习惯，<br>二就是Callback Hell！</p>
<p>看下面这个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a.doing1();  <span class="comment">//1</span></div><div class="line">a.doing2();  <span class="comment">//2</span></div><div class="line">a.doing3();  <span class="comment">//3</span></div></pre></td></tr></table></figure>
<p>1,2,3处代码如果是同步的，那么将按顺序执行！但是如果不是同步的呢？我还是希望2在1之后执行，3在2之后执行！怎么办呢？想想AJAX!我们需要写类似如下这样的代码！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a.doing1(<span class="keyword">new</span> Callback()&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callback</span><span class="params">()</span></span>&#123;</div><div class="line">        a.doing2(<span class="keyword">new</span> Callback()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callback</span><span class="params">()</span></span>&#123;</div><div class="line">                a.doing3();</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>那有没有办法解决这个问题呢？其实不难，实现一个类似Future的功能！当Client获取结果时，进行阻塞，当得到结果后再继续往下走！实现方案，一个就是使用锁了，还有一个就是使用RingBuffer。经测试，使用RingBuffer比使用锁TPS有2000左右的提高！</p>
<p><img src="/assets/iomodel/pigeon.png" alt=""></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.zhihu.com/question/21383903" target="_blank" rel="external">Socket为什么要翻译成套接字？</a></li>
<li><a href="http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf" target="_blank" rel="external">Reactor论文</a></li>
<li><a href="http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf" target="_blank" rel="external">Doug Lea《Scalable IO in Java》</a></li>
<li><a href="https://github.com/netty/netty" target="_blank" rel="external">Netty源码</a></li>
<li><a href="http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast.html" target="_blank" rel="external">剖析Disruptor:为什么会这么快？</a></li>
<li><a href="http://ifeve.com/locks-are-bad/" target="_blank" rel="external">剖析Disruptor:为什么会这么快？(中文)</a></li>
<li><a href="http://ifeve.com/java-synchronized/" target="_blank" rel="external">Java SE1.6中的Synchronized</a></li>
<li><a href="http://www.cnblogs.com/l00l/p/4115001.html" target="_blank" rel="external">线程安全的无锁RingBuffer实现</a></li>
<li><a href="http://blog.csdn.net/haoel/article/details/2224055" target="_blank" rel="external">Java NIO类库Selector机制解析（上）</a></li>
<li><a href="http://blog.csdn.net/haoel/article/details/2224069" target="_blank" rel="external">Java NIO类库Selector机制解析（下）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;无处不在的C-S架构&quot;&gt;&lt;a href=&quot;#无处不在的C-S架构&quot; class=&quot;headerlink&quot; title=&quot;无处不在的C/S架构&quot;&gt;&lt;/a&gt;无处不在的C/S架构&lt;/h2&gt;&lt;p&gt;在这个充斥着云的时代,我们使用的软件可以说99%都是C/S架构的！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你发邮件用的Outlook,Foxmail等&lt;/li&gt;
&lt;li&gt;你看视频用的优酷，土豆等&lt;/li&gt;
&lt;li&gt;你写文档用的Office365,googleDoc，Evernote等&lt;/li&gt;
&lt;li&gt;你浏览网页用的IE,Chrome等(B/S是特殊的C/S)&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C/S架构的软件带来的一个明显的好处就是：只要有网络，你可以在任何地方干同一件事。&lt;/p&gt;
&lt;p&gt;例如：你在家里使用Office365编写了文档。到了公司，只要打开编辑地址就可以看到在家里编写的文档，进行展示或者继续编辑。甚至在手机上进行阅读与编辑。不再需要U盘拷来拷去了。&lt;/p&gt;
&lt;p&gt;C/S架构可以抽象为如下模型：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/iomodel/client-server.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C就是Client(客户端),上面的B是Browser(浏览器)&lt;/li&gt;
&lt;li&gt;S就是Server(服务器)：&lt;strong&gt;服务器管理某种资源，并且通过操作这种资源来为它的客户端提供某种服务&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C/S架构之所以能够流行的一个主要原因就是网速的提高以及费用的降低，特别是无线网络速度的提高。试想在2G时代，大家最多就是看看文字网页，小说什么的。看图片，那简直就是奢侈！更别说看视频了！&lt;/p&gt;
&lt;p&gt;网速的提高，使得越来越多的人使用网络，例如：优酷，微信都是上亿用户量，更别说天猫双11的瞬间访问量了！这就对服务器有很高的要求！能够快速处理海量的用户请求！那服务器如何能快速的处理用户的请求呢？&lt;/p&gt;
    
    </summary>
    
      <category term="io" scheme="https://ivaneye.com/categories/io/"/>
    
    
      <category term="java" scheme="https://ivaneye.com/tags/java/"/>
    
      <category term="io" scheme="https://ivaneye.com/tags/io/"/>
    
      <category term="reactor" scheme="https://ivaneye.com/tags/reactor/"/>
    
  </entry>
  
  <entry>
    <title>我的读书方法</title>
    <link href="https://ivaneye.com/2016/06/05/read.html"/>
    <id>https://ivaneye.com/2016/06/05/read.html</id>
    <published>2016-06-04T16:00:00.000Z</published>
    <updated>2016-12-30T12:51:23.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“书籍收藏家”"><a href="#“书籍收藏家”" class="headerlink" title="“书籍收藏家”"></a>“书籍收藏家”</h1><p>你是否有过这样的经历？</p>
<p><img src="/assets/read/read/read_process.png" alt=""></p>
<p>亦或，终于读完了一本书！这本书讲的什么呢？呃。。。。</p>
<p>我在很长一段时间里都有这样的困惑！这种情况导致的结果是，我成了”书籍收藏家”—买的书里没读完的比读完的多得多！</p>
<a id="more"></a>
<h1 id="一天一本书？！"><a href="#一天一本书？！" class="headerlink" title="一天一本书？！"></a>一天一本书？！</h1><p>网上有不少网友说自己读书经历，有的一年200多本书，有的一天一本书。我很羡慕他们是怎么做到的？</p>
<p>起初我觉得是自己看书的速度太慢了，一个字一个字的看，看到后面忘到前面。和以前背单词很像，abandon最熟，后面都不记得～所以就专门看了一些速读方面的资料，比如什么“一目十行”之类的。试了试发现没鸟用。读书是为了收获知识(消遣类的除外，我对消遣类的书不感兴趣，自动排除～)，一目十行虽然提高了翻书速度，但是：</p>
<ul>
<li>需要更高的集中力，就更容易疲劳，持续时间变短。结果就是实际效果没多少改善</li>
<li>对收获知识没有多大的帮助，依然是读了后面忘了前面</li>
</ul>
<h1 id="读书的目的"><a href="#读书的目的" class="headerlink" title="读书的目的"></a>读书的目的</h1><p>速读尝试失败后，我进行了思考，我读书的目的是什么？</p>
<ul>
<li>学习专业领域知识(深度)</li>
<li>扩展眼界(广度)</li>
</ul>
<p>总体来说，我读书是为了收获知识，使其融合到自身的知识体系架构中，为我所用！</p>
<p>既然是为了收获知识，读书的速度就不是主要问题，主要问题是怎样把书里的知识快速的吸收到自己脑子里！</p>
<p>那如何<strong>快速的收获知识</strong>呢？</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>基于上面的问题，我搜集并阅读了关于如何阅读的书籍！下面列出对我有帮助的四本书:</p>
<ul>
<li>书都不会读，你还想成功</li>
<li>杠杆阅读术</li>
<li>如何阅读一本书</li>
<li>如何提问：批判性思维</li>
</ul>
<h2 id="为什么要一个字一个字的读？"><a href="#为什么要一个字一个字的读？" class="headerlink" title="为什么要一个字一个字的读？"></a>为什么要一个字一个字的读？</h2><p>先说前两本，这两本书提到的方法比较类似：</p>
<ul>
<li>针对特定领域，读大量类似的书</li>
<li>如果书中提到了类似的观点或知识，则重点关注</li>
</ul>
<p>缺点就是比较费钱~</p>
<p>这个方法我并没有采用！提到这两本书，是因为这两本书使我进行了反思：我为什么要一个字一个字的读书呢？</p>
<p>主要有两个原因：</p>
<ul>
<li>学校里学习时都是这么读过来的(怪不得后来对学习越来越没兴趣了～)</li>
<li>书是花钱买的，每个字都抠一遍，才能值回花销</li>
<li>程序员出生，典型的程序员思维，喜欢死抠细节</li>
</ul>
<p>但是实际上越抠细节，收获越低！</p>
<h2 id="阅读是思考的过程"><a href="#阅读是思考的过程" class="headerlink" title="阅读是思考的过程"></a>阅读是思考的过程</h2><p>收获比较大的是《如何阅读一本书》和《如何提问：批判性思维》。一本教如何阅读，一本教如何思考！</p>
<p>《如何阅读一本书》提到了四种读书方式：</p>
<ul>
<li>基础阅读</li>
<li>检视阅读</li>
<li>分析阅读</li>
<li>主题阅读</li>
</ul>
<p>抠字眼的阅读方式实际上还停留在基础阅读层面，这个层面主要是为了学习基础知识—比如识字！</p>
<p>《如何提问：批判性思维》则说明了如何找出作者的观点，以及如何支撑这些观点！</p>
<p>从这两本书中，总结了适合自己的读书过程！</p>
<h1 id="读书工具"><a href="#读书工具" class="headerlink" title="读书工具"></a>读书工具</h1><p>先说下我读书的工具：</p>
<ul>
<li>纸质书</li>
<li>Kindle Paper White</li>
<li>手机/iPad</li>
</ul>
<h2 id="纸质书"><a href="#纸质书" class="headerlink" title="纸质书"></a>纸质书</h2><p>我最钟爱的还是纸质书，不过存在几个问题：</p>
<ul>
<li>不宜携带：相对手机和Kindle</li>
<li>无法方便的电子化：书中的知识点需要手动敲到电脑里进行整理</li>
<li>贵：相对其它设备来说，价格偏贵</li>
</ul>
<p>相对的，优点是:</p>
<ul>
<li>快速定位</li>
<li>不影响阅读速度和方式：不论是速读，慢读还是跳读</li>
<li>墨香：个人喜好</li>
</ul>
<h2 id="Kindle"><a href="#Kindle" class="headerlink" title="Kindle"></a>Kindle</h2><p>知道Kindle很久了，之前一直没出手，直到出了Kindle Paper White，立马出手。没有背光灯还不如纸质书！</p>
<p>Kindle的致命缺点是翻页太慢！很难进行速读和跳读！</p>
<p>优点就是:</p>
<ul>
<li>易于携带：相对纸质书和iPad</li>
<li>裸机手感很棒！</li>
<li>护眼：这是广告！我眼睛不好，当初买Kindle就是为了护眼！后来搜集资料发现：没有数据可以证明电子屏比水墨屏更伤眼睛！近视的原因是看近物时间过长，眼睛没有得到休息所致，和什么屏幕没有关系！即使纸质书也是！</li>
</ul>
<p>缺点：</p>
<ul>
<li>翻页慢</li>
<li>屏幕易碎：带套手感差，不带套怕屏碎！纠结～</li>
</ul>
<h2 id="手机-iPad"><a href="#手机-iPad" class="headerlink" title="手机/iPad"></a>手机/iPad</h2><p>手机和iPad优缺点基本相同，区别就是手机易于携带，但是屏幕太小！iPad屏幕很大，但是不易于携带！</p>
<p>这两个的缺点就是:</p>
<ul>
<li>应用太多，容易分心，无法安心阅读</li>
</ul>
<p>优点是:</p>
<ul>
<li>资源多</li>
</ul>
<h1 id="读书方法"><a href="#读书方法" class="headerlink" title="读书方法"></a>读书方法</h1><p>目前来说，我以纸质书为主！主要结合分析阅读和批判性思维来进行阅读！我觉得可以再结合番茄时间法—25分钟一个时间段来进行阅读！</p>
<p>主要方法就是<strong>提问和猜</strong>！</p>
<ul>
<li>首先阅读题目，书背面的上架指导！然后猜一下这本书大概是讲什么的，你希望从书里得到什么？</li>
<li>然后阅读序言，书后的总结，有的书背面有概要信息！看看是否和自己猜的差不多！如果是就继续读，如果不是，那么讲的是什么？是自己想要的吗？不是就不读了～</li>
<li>接着读目录，看这本书是怎么划分结构的！一本目录结构清晰的书绝大部分情况下是好书，而目录结构不清晰的书，绝大部分情况下不是好书！从目录确定书的描述方式！</li>
<li>按顺序开始读，先从目录猜此章节主要讲解的是什么，你需要从此章节得到什么知识？然后去读该章节，确认猜得对不对！以及找出你所需要的知识，看看作者的观点或经验以及论据！是否说服了你？还是你有不同的观念！确认了自己的问题解决了，这一章就可以过去了！</li>
<li>一章读完后，整理相关内容！然后接着读下一章！</li>
<li>全书读完后，回顾整理的内容！总结收获！</li>
</ul>
<p>此方法最好是在一个连续的时间段完成！比如周末的一个下午！当然时间段分开也没有问题，不过需要有回忆的过程！整体时间会比连续时间长！</p>
<p>通过此方法，我阅读一本200多页的书，基本控制在3小时之内！且效果比抠字眼的方式效果好很多！</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>以《数据之美—一本书学会可视化设计》(275页)这本书为例：</p>
<ul>
<li>通过题目和上架指导，可以知道该书是讲述如何进行数据可视化的！猜测应该是讲述如何将数据以图表(柱状图，饼图，折线图)的形式展示出来，大数据方向的书籍！</li>
<li>看序言之类的描述，可以看出该书不限于将数据以图表的形式展示，而是以图形的方式展示！</li>
<li>然后看目录，全书分七章，分别讲述了<pre><code>- 数据是什么
- 可视化设计是什么
- 可视化设计的组件
- 数据可视化的过程
- 可视化的用户体验
- 用户体验的补充
- 可视化工具介绍
</code></pre></li>
<li>然后看第一章，数据是什么？首先想一下，现在自己认为数据是什么？我认为数据是对我们真实世界的抽象！然后开始阅读，发现作者的看法和我很类似—数据描述了现实世界！除了解决了这个问题，作者还阐述了数据的不确定性以及数据需要依赖的背景信息！</li>
<li>重复上面的过程</li>
<li>总结：可视化的目的是理解数据！数据是核心，可视化是手段。为了更好的展示数据，需要使用合适的可视化手段！</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>李笑来说过这么一句话：“学习学习再学习”！第一个学习是动词，第二个学习是名词，第三个学习是动词！意思就是先学会怎么学习，然后再学习！以前挺讨厌这种换个说法说同一个意思的话，其实就是说“磨刀不误砍柴工”！现在想想，在快速消费的今天，白话比习语更适应时代！</p>
<p>扯远了，上面的方法是个人总结的适合自己的读书方法！总体来说，我适合”总(整体)-分(细节)-总(总结)”结构，有人可能适合”分(细节)-总(整体)”结构！需要自己去寻找适合自己的方法—<strong>学习阅读再阅读</strong>！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;“书籍收藏家”&quot;&gt;&lt;a href=&quot;#“书籍收藏家”&quot; class=&quot;headerlink&quot; title=&quot;“书籍收藏家”&quot;&gt;&lt;/a&gt;“书籍收藏家”&lt;/h1&gt;&lt;p&gt;你是否有过这样的经历？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/read/read/read_process.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;亦或，终于读完了一本书！这本书讲的什么呢？呃。。。。&lt;/p&gt;
&lt;p&gt;我在很长一段时间里都有这样的困惑！这种情况导致的结果是，我成了”书籍收藏家”—买的书里没读完的比读完的多得多！&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://ivaneye.com/categories/book/"/>
    
    
      <category term="book" scheme="https://ivaneye.com/tags/book/"/>
    
      <category term="read" scheme="https://ivaneye.com/tags/read/"/>
    
  </entry>
  
  <entry>
    <title>从用户体验角度看工具</title>
    <link href="https://ivaneye.com/2016/04/08/tools.html"/>
    <id>https://ivaneye.com/2016/04/08/tools.html</id>
    <published>2016-04-07T16:00:00.000Z</published>
    <updated>2016-12-30T12:55:37.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h1><p>作为互联网从业人员，经常会接触到“用户体验”这个词！<br>我们可能为了一个菜单该放在哪里而争论，或一边苦逼的编码一边骂着SB产品经理！<br>我们为别人考虑着“用户体验”，但是对自己一直在用的软件，为什么却这么将就呢？</p>
<h1 id="软件-工具"><a href="#软件-工具" class="headerlink" title="软件=工具"></a>软件=工具</h1><p>作为软件开发人员，使用的软件不在少数，我们都称为工具。即为工具，我们好像就不那么纠结难不难用了！好像工具就应该比较难用才对！而实际上，我们为别人做的软件，对别人来说也是工具。我们为什么要为用户考虑这么多，为什么不为自己考虑考虑？</p>
<p>现在，我们从用户体验的角度重新审视下我们常用的工具！</p>
<h1 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h1><p>在做软件的时候，我们知道要把用户当作“白痴”来看待！要尽可能的把功能做简单，能一步完成的绝对不能分成两步。所以软件要做得足够的简单。但是简单并不代表功能上的简单，比如说Windows下的记事本，那叫简陋！对于工具型软件来说，“简单”有三个层面上的意思：</p>
<h2 id="功能够用"><a href="#功能够用" class="headerlink" title="功能够用"></a>功能够用</h2><p>软件功能应该也适用28原则，即在使用软件的大部分(80%，甚至更多)情况下，只会使用很少(20%，甚至更少)的功能。所以软件没必要太多的功能。只要有足够的核心功能即可。过多的功能只会增加软件的复杂度和学习成本。</p>
<p>一个很典型的例子就是Office。Office功能很强大，但是大家大部分情况下会用到它多少功能？有5%吗？而且，你会发现，你需要的功能消失在了它的菜单列表里了！</p>
<p>现在再看Word的工具栏，是什么感觉？</p>
<p><img src="/assets/think/tools/tools_03.jpg" alt=""></p>
<a id="more"></a>
<h2 id="操作简单"><a href="#操作简单" class="headerlink" title="操作简单"></a>操作简单</h2><p>在功能的基础上，软件还需要操作简单。工具是为了提高效率的，太复杂的操作会间接的降低效率。比如：你本来就是为了编辑点文本，但是得花半年甚至更多时间去学习编辑工具。等你学完了，黄花菜都凉了。（无意黑谁，只是提醒注意任务的主次！）</p>
<h2 id="符合直觉"><a href="#符合直觉" class="headerlink" title="符合直觉"></a>符合直觉</h2><p>符合直觉就是说，当你刚接触一个软件的时候，可以靠猜或者随便点点就能掌握基本的功能！</p>
<p>典型的反面例子就是Vim!当一个完全没接触过Vim的人，打开Vim，三秒钟就懵逼了!怎么输入？怎么保存？怎么退出？目前我使用Vi的原因是Vi是Linux默认安装的文本编辑器！</p>
<p>有人会说，Vim的编辑效率很高，各种奇技淫巧！这点我承认，但是对我来说，然并卵，这个下面再提！</p>
<p>符合“简单”的工具，先推荐两个，Markdown和Pandoc!</p>
<p><strong>Markdown三分钟入门</strong></p>
<p>Markdown就是一个很简单的工具！</p>
<p>文件名以md结尾</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td># title</td>
<td>标题，一个#号代表一个级别</td>
</tr>
<tr>
<td>- text</td>
<td>列表</td>
</tr>
<tr>
<td>1. text</td>
<td>还是列表</td>
</tr>
<tr>
<td>[text](url)</td>
<td>链接</td>
</tr>
<tr>
<td>![](img-url)</td>
<td>图片</td>
</tr>
<tr>
<td>&gt; text</td>
<td>引用</td>
</tr>
<tr>
<td>*斜体*</td>
<td><em>斜体</em></td>
</tr>
<tr>
<td>**粗体**</td>
<td><strong>粗体</strong></td>
</tr>
<tr>
<td><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">演示请见下面的gif!</div><div class="line"></div><div class="line">**Pandoc三十秒入门**</div><div class="line"></div><div class="line">Markdown负责内容，Pandoc则负责展示！Pandoc是个牛逼的格式转换工具！请至[官网](http://pandoc.org/)查看Pandoc支持的转换类型！(很多，这里不贴了～)</div><div class="line"></div><div class="line">比如你想把Markdown转换成Word</div></pre></td></tr></table></figure></td>
</tr>
</tbody>
</table>
<p>pandoc source.md -o target.docx<br>```</p>
<p>那如果你想把Markdown转换成epub,html，你猜你该输什么命令呢？</p>
<h1 id="跨平台-全平台"><a href="#跨平台-全平台" class="headerlink" title="跨平台/全平台"></a>跨平台/全平台</h1><p>做前端的同学深有体会，各种浏览器兼容性问题！但是为了用户能在各个浏览器上看到一样的效果，还是忍了！</p>
<p>我们用的工具也一样。一般我们会在Windows或者Mac上开发，而部署都是在Linux上！所以我们当然希望能有工具既能在Windows上运行，也能在Mac和Linux上运行。当然功能和使用感受要完全相同。</p>
<p>比如，Notepad++,ULtraEdit,EditPlus,Office是在Windows上接受度比较高的编辑类软件，TextMate是Mac上很知名的编辑器。但是一出这个系统，你就用不了了，就得花时间再去学另一个软件，也是一种浪费！</p>
<h1 id="颜值"><a href="#颜值" class="headerlink" title="颜值"></a>颜值</h1><p>好看这个东西，见仁见智！自己觉得好看就行了！比起意淫用户喜欢什么样的配色、布局、字体！自己喜欢什么样的配色、布局、字体，应该很简单吧？比如，我就比较偏爱暗色系的主题！当初NetBeans就是因为颜值太差，被我抛弃了～</p>
<p>现在来看Vim和Emacs，颜值也是比较差的。不过两者的定制化比较高，可以按自己的需求来配置。不过由于历史遗留问题，有些功能靠配置是没法解决的。比如说，现在编辑器里都默认自带的目录树和页签。Vim和Emacs都是模拟出来的，看起来很不协调！</p>
<p><img src="/assets/think/tools/tools_vim.png" alt=""></p>
<p><img src="/assets/think/tools/tools_emacs.jpg" alt=""></p>
<p>有人可能觉得颜值不重要！你可以把下面的图片设为背景，干一天活试试～</p>
<p><img src="/assets/think/tools/tools_04.jpg" alt=""></p>
<h1 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h1><p>做网站另一个重点要考虑的问题就是速度。一般首页都是要优化到秒开的！对于工具来说，其实也有这个问题。比如说，你灵感突现，需要赶紧记下来，然后打开Word,Word刚打开，你忘了～</p>
<h1 id="不限制-打断思考"><a href="#不限制-打断思考" class="headerlink" title="不限制/打断思考"></a>不限制/打断思考</h1><p>不知道大家是如何定义自己的工作性质的？我很赞同《人件》里所说的，我们实际上是“非高科技脑力劳动者”！</p>
<p>既然是脑力劳动者，我们的主要工作是思考，手快没用，脑子快才是王道！(所以Vim输入再快都没用，你得脑子转得够快才行，手快只是辅助，帮助记录所想！)所以我们需要有工具能帮助我们思考！至少不能限制和打断我们的思考！</p>
<p>这也是我选择工具时很看重的一点！从这一点来看的话，其实很多软件都不合格！</p>
<h1 id="集中吐槽"><a href="#集中吐槽" class="headerlink" title="集中吐槽"></a>集中吐槽</h1><p>上面列出了几点需求，同时小吐槽了一下。这里集中吐槽几款工具！</p>
<h2 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h2><ul>
<li>简单:★★☆</li>
<li>跨平台/全平台:★☆</li>
<li>颜值:★★☆</li>
<li>速度:★★</li>
<li>不限制/打断思考:★★</li>
</ul>
<p>从简单性来说，Office入门容易，精通难！Windows独有，其他平台都是第三方软件！颜值一般，速度一般！</p>
<p>最大的问题是很容易打断思考!大家可以回忆下，我们用Office写文档或者写PPT的时候，是怎么写的？这个地方字体是不是要加粗？该用几号字体？这个图片该放哪里？有多少是涉及到内容本身的？分分钟就跑偏的节奏！</p>
<h1 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h1><ul>
<li>简单:★☆</li>
<li>跨平台/全平台:★★★★☆</li>
<li>颜值:★★</li>
<li>速度:★</li>
<li>不限制/打断思考:★</li>
</ul>
<p>eclipse在Java界是默认的IDE,我很早之前就抛弃了。现在看来，它的各种毛病都还在！</p>
<p>首先说简单，作为一个专业IDE，就已经和简单不挂钩了！全平台支持，这个值得表扬！没给五星，是因为在各个平台下的体验还是有些许的差异的！颜值在默认主题下还好，但是自定义主题就露馅了！</p>
<p><img src="/assets/think/tools/tools_eclipse_01.png" alt=""></p>
<p>看工具栏的按钮，锯齿明显！</p>
<p>速度只能说，我等得花都谢了～</p>
<p>eclipse的主要问题也在打断思维上！</p>
<ul>
<li>Crash： 我最初使用eclipse的时候是3.0左右，时不时就crash！我想好思路想实现了，eclipse不见了～你说郁闷不郁闷？</li>
<li>快捷键：eclipse流行的一个原因就是它的插件机制。可能是太开放的原因，插件功能快捷键根本不统一！比如说：我编写Java，Ctrl-Shift-F是格式化！我编写JSP或者其他语言的时候，格式化快捷键就不是这个了！一个软件，我要学几套快捷键吗？</li>
<li>保存时编译：双刃剑，机器差一点，立马卡顿～</li>
<li>恶心的进度条：eclipse的很多操作都会出现进度条。有些进度条还好，在后台。有些进度条就直接弹出，还不让后台执行。每个进度条后面都有个终止按钮，但是没鸟用～你按了，按钮置灰，滚动条还在欢快的滚～</li>
</ul>
<p><img src="/assets/think/tools/tools_eclipse_02.png" alt=""></p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ul>
<li>简单:★★★</li>
<li>跨平台/全平台:★★★★★</li>
<li>颜值:</li>
<li>速度:★★</li>
<li>不限制/打断思考:★★</li>
</ul>
<p>吐槽完工具，来吐槽语言！Java是门不错的工程语言。<br>网上吐槽比较多的是Java的启动速度和语法不灵活！我觉得最大的问题也是限制思考！</p>
<ul>
<li>Java只支持面向对象编程！所有的东西都是对象！这就像你手里拿着锤子，看什么都是钉子！面向对象比较善于建模，但是不擅长计算！这也是为什么目前新语言大部分都支持多种编程范式：Clojure,Kotlin,Scala,Golang</li>
<li>Java对面向对象编程，支持得并不彻底！例如：面向对象推荐与对象相关的行为最好和该对象关联，像people.walk(),computer.start()这样的代码形式！但是对已有的对象，除了继承，Java没有其他的方法可以添加行为！这也就是为什么Java里有那么多Util类的一个原因！</li>
</ul>
<h1 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h1><h2 id="Markdown-Pandoc"><a href="#Markdown-Pandoc" class="headerlink" title="Markdown+Pandoc"></a>Markdown+Pandoc</h2><ul>
<li>简单:★★★★</li>
<li>跨平台/全平台:★★★★★</li>
<li>颜值:</li>
<li>速度:★★★★</li>
<li>不限制/打断思考:★★★★</li>
</ul>
<p>Markdown和Pandoc在上面都做过了介绍。这里总结下，使用Markdown专注内容，而使用Pandoc来进行展示。</p>
<p><img src="/assets/think/tools/tools_markdown.gif" alt=""></p>
<h2 id="Intellij-IDEA"><a href="#Intellij-IDEA" class="headerlink" title="Intellij IDEA"></a>Intellij IDEA</h2><ul>
<li>简单:★☆</li>
<li>跨平台/全平台:★★★★☆</li>
<li>颜值:★★★★</li>
<li>速度:★</li>
<li>不限制/打断思考:★★★★</li>
</ul>
<p>IDEA启动速度很慢，不过每天就启动一次，启动完后基本就是指哪打哪的神器！贴几张网上的gif图！</p>
<p><img src="/assets/think/tools/tools_idea_01.gif" alt=""><br><img src="/assets/think/tools/tools_idea_02.gif" alt=""><br><img src="/assets/think/tools/tools_idea_03.gif" alt=""></p>
<h2 id="PlantUML"><a href="#PlantUML" class="headerlink" title="PlantUML"></a>PlantUML</h2><ul>
<li>简单:★★★</li>
<li>跨平台/全平台:★★★★★</li>
<li>颜值:★★★</li>
<li>速度:★★★★</li>
<li>不限制/打断思考:★★★★</li>
</ul>
<p>PlantUML是基于Graphviz的所想即所得的绘图工具，相关内容请见<a href="http://zh.plantuml.com/" target="_blank" rel="external">官网</a>,不做过多介绍！<br>PlantUML的一个显著缺点是，当元素多了以后，并不好维护!<br>所以我主要使用PlantUML做局部的建模！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;用户体验&quot;&gt;&lt;a href=&quot;#用户体验&quot; class=&quot;headerlink&quot; title=&quot;用户体验&quot;&gt;&lt;/a&gt;用户体验&lt;/h1&gt;&lt;p&gt;作为互联网从业人员，经常会接触到“用户体验”这个词！&lt;br&gt;我们可能为了一个菜单该放在哪里而争论，或一边苦逼的编码一边骂着SB产品经理！&lt;br&gt;我们为别人考虑着“用户体验”，但是对自己一直在用的软件，为什么却这么将就呢？&lt;/p&gt;
&lt;h1 id=&quot;软件-工具&quot;&gt;&lt;a href=&quot;#软件-工具&quot; class=&quot;headerlink&quot; title=&quot;软件=工具&quot;&gt;&lt;/a&gt;软件=工具&lt;/h1&gt;&lt;p&gt;作为软件开发人员，使用的软件不在少数，我们都称为工具。即为工具，我们好像就不那么纠结难不难用了！好像工具就应该比较难用才对！而实际上，我们为别人做的软件，对别人来说也是工具。我们为什么要为用户考虑这么多，为什么不为自己考虑考虑？&lt;/p&gt;
&lt;p&gt;现在，我们从用户体验的角度重新审视下我们常用的工具！&lt;/p&gt;
&lt;h1 id=&quot;简单&quot;&gt;&lt;a href=&quot;#简单&quot; class=&quot;headerlink&quot; title=&quot;简单&quot;&gt;&lt;/a&gt;简单&lt;/h1&gt;&lt;p&gt;在做软件的时候，我们知道要把用户当作“白痴”来看待！要尽可能的把功能做简单，能一步完成的绝对不能分成两步。所以软件要做得足够的简单。但是简单并不代表功能上的简单，比如说Windows下的记事本，那叫简陋！对于工具型软件来说，“简单”有三个层面上的意思：&lt;/p&gt;
&lt;h2 id=&quot;功能够用&quot;&gt;&lt;a href=&quot;#功能够用&quot; class=&quot;headerlink&quot; title=&quot;功能够用&quot;&gt;&lt;/a&gt;功能够用&lt;/h2&gt;&lt;p&gt;软件功能应该也适用28原则，即在使用软件的大部分(80%，甚至更多)情况下，只会使用很少(20%，甚至更少)的功能。所以软件没必要太多的功能。只要有足够的核心功能即可。过多的功能只会增加软件的复杂度和学习成本。&lt;/p&gt;
&lt;p&gt;一个很典型的例子就是Office。Office功能很强大，但是大家大部分情况下会用到它多少功能？有5%吗？而且，你会发现，你需要的功能消失在了它的菜单列表里了！&lt;/p&gt;
&lt;p&gt;现在再看Word的工具栏，是什么感觉？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/think/tools/tools_03.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="think" scheme="https://ivaneye.com/categories/think/"/>
    
    
      <category term="随笔" scheme="https://ivaneye.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="think" scheme="https://ivaneye.com/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>我的管理实践---《人件》读后感</title>
    <link href="https://ivaneye.com/2016/02/15/peopleware.html"/>
    <id>https://ivaneye.com/2016/02/15/peopleware.html</id>
    <published>2016-02-14T16:00:00.000Z</published>
    <updated>2016-12-30T12:51:07.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>听说《人件》是很久之前的事了，但一直没读。主要是受到了《人月神话》的影响—《人月神话》一直被奉为经典管理书籍，名声应该比《人件》高，至少我是这么认为的。所以先读了《人月神话》，当时还很好奇，《人月神话》和项目管理有毛线关系？读了才知道，“人月”就是我们说的“人天”！读了大概三分之一，不知道是翻译问题还是作者行文方式不适合我，反正读不下去了，感觉说了那么多废话只是说明了“增加人力无法加快项目进度”！所以《人件》也就无限期搁置了！</p>
<p>最近项目组购书，买了这本书，就拿来看看！看了才有一种相见恨晚的感觉。我做了两年多的管理，最近不想做了，又回到了技术。这本书并没有让我学到什么，但是它所提到的很多内容和我当时的管理方式很契合，或者说和我的想法很相近，同时也解释了我最后为什么不想做管理了！</p>
<h1 id="人员管理"><a href="#人员管理" class="headerlink" title="人员管理"></a>人员管理</h1><p>“流水的开发，铁打的项目”。相信对有几年经验的开发人员来说，这句话并没有说错。</p>
<p>很庆幸的是，在我管理的两年多里，没有人离职，虽然团队不大，只有七个人。</p>
<p>我把功劳归结为：</p>
<ul>
<li>项目组成员的自觉性</li>
<li>和我的好脾气</li>
</ul>
<p>而《人件》给了我更有说服力的说法：<strong>“管理者不是让大家去工作，而是创造环境，让大家可以顺利的开展工作”</strong></p>
<a id="more"></a>
<p>首先，我承认我自己也是多少有点“高科技幻觉”的！至少，每次别人问我做什么工作时，我回答：“互联网”，或者很屌丝的“软件开发”。基本都会得到“高端”的回应！也就导致我的一丝丝飘飘然，至少在当时是的。</p>
<p>现在，我很认同《人件》里的说法：<strong>“从事基础研究并获得根本突破的科研人员做的才是高科技工作，其他人只是在使用研究成果”</strong>.在各个技术大会上，你听着某某架构师、某某CTO，说着这个技术如何如何先进，这个架构如何如何好。其实绝大部分都是使用的前人的研究成果，而这些研究成果有不少实际上在很多年前就研究出来了。</p>
<p>另一个现象就是，虽然软件行业在外人以及不少行内人看来是“高科技行业”。但是，在管理上，仍然使用的是传统行业的那一套:项目就像流水线一样，而开发人员则像流水线工人，开发人员是可替换的！从软件架构来看：开发人员就像一个个的模块，某个模块出问题了，换个相同的模块就行了！</p>
<p>而实际上，虽然软件行业不是“高科技”行业，但是与传统行业还是有一个很明显的差异的：软件行业是“思维密集型”行业，而大部分传统行业是“劳动密集型”行业。</p>
<p>说到这里，我脑子里出现的画面是卓别林的“摩登时代”—他在流水线上拧螺丝的情景。可以想象，替换一个拧螺丝的流水线工人的成本能有多大？而替换一个软件开发呢？</p>
<ul>
<li>首先需要找个人和他交接</li>
<li>有新人进来了，还要再和新人交接</li>
<li>新人还需要熟悉整个环境</li>
</ul>
<p>所以，在软件行业，人是“个体”，不是“模块”！</p>
<p>可能得益于我的性格—“懒”！我这人不喜欢被人管，也确信，大部分成年人不喜欢被人管—大家都是成年人了，有自觉性！所以，我的管理完全建立在大家有自觉性的前提上！同时，给予了充分的自主性。所以我的管理很轻松：</p>
<ul>
<li>按个人能力及偏好划分计划</li>
<li>每日反馈进度</li>
<li>有问题，协助处理</li>
</ul>
<p>很庆幸项目没有出现大误差：</p>
<ul>
<li>期间安全发布了两个大版本，n个小版本</li>
<li>没有做过任何强制的加班规定，项目组人员自觉按计划执行！</li>
<li>除了版本发布前夕，基本没有什么加班情况！</li>
<li>项目组成员没有感到特别大的压力，能专心做自己的工作</li>
</ul>
<p>我个人是不喜欢加班的，相信没人会喜欢加班！而且特别特别讨厌强制性加班—没事也得留在公司！所以我在管理时，没有做过任何强制性加班的决定。我认为强制性加班完全提高不了效率！《人件》中也有同样的观点！</p>
<p>首先，效率是什么？<strong>单位时间内的工作产生更高的价值</strong>。而强制性加班，实际上是在<strong>单位付酬的情况下掠取更多价值</strong>!</p>
<p>其次，长期的强制性加班，会导致人员的流失，增加了替换人员的成本。实际上就抵消了，加班所带来的所谓的效率的提升！</p>
<p>总的来说，在人员管理方面，我个人觉得做得还不错，有点“无为而治”的感觉！</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>作为一个一线开发人员，应该有过这样的体会：思考一个问题，或者对某个问题进行编码!终于搞完了，抬头一看，“靠，三小时过去了”！或者正在兴头上，突然电话响了，或者下班了,直接就郁闷了～</p>
<p>反正我是深有体会！《人件》中给了个词”Flow”，中文版翻译为“流”！这是一个渐入的过程，很像做梦！在《盗梦空间》里，小李子说了这么一句，原文不记得了，大意是：“你能回想起来你是什么时候开始做梦的吗”？这里，也同样可以问一句，“你能回想起来，你是什么时候进入Flow状态的吗”？</p>
<p>我有这样的体会，所以在管理项目时，也在给项目组成员提供这样的环境！但是作为一个小项目经理，我没办法改变公司的格局，只能尽自己能力所及，做一些事情！</p>
<ul>
<li>首先，需求接口人是我。也就是说，我先对需求把关—做还是不做,什么时候做</li>
<li>现网问题全部提到我这里，我进行整理分发—通过jira</li>
<li>进度压力由我扛着，不传达到组员</li>
</ul>
<p>这使得组员在项目中能专注于自己的事情！另一方面，我自己就和“Flow”说拜拜了！这也是我最后不做管理的其中一个原因！</p>
<h1 id="招人与留人"><a href="#招人与留人" class="headerlink" title="招人与留人"></a>招人与留人</h1><p>招人方面我体会不深，我本人主业是技术，项目管理只是副业～～～所以招聘时，我更关注的是技术：主要是基础以及发展潜力！</p>
<p>而在留人方面，我并没有做什么特别的事情！我赞同：“用人不疑，疑人不用！”《人件》里提到“领导力”这个词，并说到提高“领导力”，需要做的几件事：</p>
<ul>
<li>主动承担任务</li>
<li>明显胜任工作</li>
<li>为任务准备提前做足必要的功课</li>
<li>让每个人创造最大的价值</li>
<li>实施过程中保持幽默和明显的善意</li>
<li>有感染力</li>
</ul>
<p>对应到我自身来说，我做到的是：</p>
<ul>
<li>主动承担任务[Yes]</li>
<li>明显胜任工作[Yes]</li>
<li>为任务准备提前做足必要的功课[Yes]</li>
<li>让每个人创造最大的价值[不确定]</li>
<li>实施过程中保持幽默和明显的善意[有善意，有没有幽默就不知道了]</li>
<li>有感染力[什么是感染力？]</li>
</ul>
<p>算是有点“领导力”吧！</p>
<h1 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h1><p>团队方面，个人体会和《人件》所描述的没什么共鸣！</p>
<p>我是个海贼迷，索隆粉！我个人比较赞同索隆在阿拉巴斯坦对乔巴说的自己对团队的理解：“你尽全力做好你该做的，我尽全力做好我该做的！如果你没做好，就揍你！”当然，这里的揍不一定就是真的揍了，可以想象一下，在团队里，其他人都在尽力做自己该做的事情，你没有，你会是什么感觉？</p>
<p>《人件》中提到团队需要目标一致！我个人觉得好难，甚至不现实！前几天刚读了托尼.巴赞的《思维导图》！书里有个实验，就是找了几个人，四人一组，针对同一个词来进行联想，然后统计有多少词是四个人都想到的！实验结果是，即使是年龄相当，经历相当的四个人，联想到相同词的概率都非常的小！所以我觉得要让项目组成员目标一致很难！</p>
<p>比如，有人工作就是为了赚钱！你能说他肤浅吗？你工作不是为了钱？有人工作就是为了充实自己！你能说他自私吗？你不需要项目经验来太高自己？你要让所有人都要把目标变成完成高质量的项目！有可能吗？</p>
<p>但是目标不同又如何呢？</p>
<p>你工作是为了赚钱！ok，没问题。你就把公司当作赚钱工具。你工作是为了充实自己！也没问题，你把公司当作学校！但是前提是你需要完成你的职责！你需要完成你的职责，来换取你所想要的！</p>
<h1 id="企业文化"><a href="#企业文化" class="headerlink" title="企业文化"></a>企业文化</h1><p>企业文化这么虚的东西，我真没什么体会！但是有些病态的企业文化我能体会，同时也是我不会去做的：</p>
<ul>
<li>比如全公司的强制性加班</li>
<li>无意义的会议！以及会议的跑题！</li>
<li>过多人参与的会议，等等</li>
</ul>
<p>另外，我不赞同所谓的“家”的企业文化—把公司当作家一样！在我看来，公司和家是对立的联系！</p>
<p>人是有<strong>责任心</strong>的动物！你为了家庭才出来工作，这是对家的责任感驱动！而对公司的责任感是建立在对家的责任感之上的！因为，对公司的责任感，能获得更多的回报，来照顾家庭！而过多的工作，又会导致对家庭的忽略！</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>针对两年多的管理体会，以及《人件》的阅读，目前管理给我的体会就是：<br><strong>管理，是一种服务！为了让成员快乐地、有效率地完成工作！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;听说《人件》是很久之前的事了，但一直没读。主要是受到了《人月神话》的影响—《人月神话》一直被奉为经典管理书籍，名声应该比《人件》高，至少我是这么认为的。所以先读了《人月神话》，当时还很好奇，《人月神话》和项目管理有毛线关系？读了才知道，“人月”就是我们说的“人天”！读了大概三分之一，不知道是翻译问题还是作者行文方式不适合我，反正读不下去了，感觉说了那么多废话只是说明了“增加人力无法加快项目进度”！所以《人件》也就无限期搁置了！&lt;/p&gt;
&lt;p&gt;最近项目组购书，买了这本书，就拿来看看！看了才有一种相见恨晚的感觉。我做了两年多的管理，最近不想做了，又回到了技术。这本书并没有让我学到什么，但是它所提到的很多内容和我当时的管理方式很契合，或者说和我的想法很相近，同时也解释了我最后为什么不想做管理了！&lt;/p&gt;
&lt;h1 id=&quot;人员管理&quot;&gt;&lt;a href=&quot;#人员管理&quot; class=&quot;headerlink&quot; title=&quot;人员管理&quot;&gt;&lt;/a&gt;人员管理&lt;/h1&gt;&lt;p&gt;“流水的开发，铁打的项目”。相信对有几年经验的开发人员来说，这句话并没有说错。&lt;/p&gt;
&lt;p&gt;很庆幸的是，在我管理的两年多里，没有人离职，虽然团队不大，只有七个人。&lt;/p&gt;
&lt;p&gt;我把功劳归结为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目组成员的自觉性&lt;/li&gt;
&lt;li&gt;和我的好脾气&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而《人件》给了我更有说服力的说法：&lt;strong&gt;“管理者不是让大家去工作，而是创造环境，让大家可以顺利的开展工作”&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://ivaneye.com/categories/book/"/>
    
    
      <category term="book" scheme="https://ivaneye.com/tags/book/"/>
    
      <category term="review" scheme="https://ivaneye.com/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>My GitBook</title>
    <link href="https://ivaneye.com/2015/12/12/2015-12-12-book.html"/>
    <id>https://ivaneye.com/2015/12/12/2015-12-12-book.html</id>
    <published>2015-12-11T16:00:00.000Z</published>
    <updated>2016-12-30T12:53:37.169Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p><a href="https://www.gitbook.com/book/ivaneye/luminus-reference/details" target="_blank" rel="external">Luminus手册</a></p>
</li>
<li><p><a href="https://www.gitbook.com/book/ivaneye/design-pattern/details" target="_blank" rel="external">语言与模式</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.gitbook.com/book/ivaneye/luminus-reference/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Luminus手册&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

    
    </summary>
    
      <category term="book" scheme="https://ivaneye.com/categories/book/"/>
    
    
      <category term="book" scheme="https://ivaneye.com/tags/book/"/>
    
      <category term="index" scheme="https://ivaneye.com/tags/index/"/>
    
  </entry>
  
</feed>
